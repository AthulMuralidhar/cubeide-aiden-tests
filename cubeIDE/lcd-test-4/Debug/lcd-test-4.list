
lcd-test-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebf0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d40  0800ede8  0800ede8  0000fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b28  08010b28  00012160  2**0
                  CONTENTS
  4 .ARM          00000008  08010b28  08010b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b30  08010b30  00012160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b30  08010b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b34  08010b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08010b38  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  08010b58  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  08010bf8  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000125c  20000160  08010c98  00012160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200013bc  08010c98  000123bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00012160  2**0
                  CONTENTS, READONLY
 14 .debug_info   00036df7  00000000  00000000  0001218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000060b4  00000000  00000000  00048f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c98  00000000  00000000  0004f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000022ca  00000000  00000000  00051cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394b6  00000000  00000000  00053fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003998f  00000000  00000000  0008d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0014c87d  00000000  00000000  000c6de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00213664  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c150  00000000  00000000  002136a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004a  00000000  00000000  0021f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000160 	.word	0x20000160
 8000214:	00000000 	.word	0x00000000
 8000218:	0800edd0 	.word	0x0800edd0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000164 	.word	0x20000164
 8000234:	0800edd0 	.word	0x0800edd0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f004 fa1c 	bl	8004968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f85c 	bl	80005ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000534:	f000 f8d6 	bl	80006e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f001 f962 	bl	8001800 <MX_GPIO_Init>
  MX_ADC1_Init();
 800053c:	f000 f8fc 	bl	8000738 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000540:	f000 f94c 	bl	80007dc <MX_ADC3_Init>
  MX_CRC_Init();
 8000544:	f000 f99c 	bl	8000880 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000548:	f000 f9f4 	bl	8000934 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800054c:	f000 fa2a 	bl	80009a4 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 8000550:	f000 fb28 	bl	8000ba4 <MX_ETH_Init>
  MX_FMC_Init();
 8000554:	f001 f904 	bl	8001760 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 8000558:	f000 fb72 	bl	8000c40 <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 800055c:	f000 fba4 	bl	8000ca8 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000560:	f000 fbe2 	bl	8000d28 <MX_I2C4_Init>
  MX_LTDC_Init();
 8000564:	f000 fc20 	bl	8000da8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000568:	f000 fc9e 	bl	8000ea8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800056c:	f000 fcc8 	bl	8000f00 <MX_RTC_Init>
  MX_SAI1_Init();
 8000570:	f000 fd62 	bl	8001038 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000574:	f000 fe08 	bl	8001188 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000578:	f000 fe32 	bl	80011e0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800057c:	f000 fe62 	bl	8001244 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000580:	f000 fe9c 	bl	80012bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000584:	f000 feee 	bl	8001364 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000588:	f000 ff46 	bl	8001418 <MX_TIM10_Init>
  MX_TIM11_Init();
 800058c:	f000 ff92 	bl	80014b4 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000590:	f000 ffde 	bl	8001550 <MX_TIM12_Init>
  MX_UART5_Init();
 8000594:	f001 f822 	bl	80015dc <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000598:	f001 f850 	bl	800163c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800059c:	f001 f87e 	bl	800169c <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80005a0:	f001 f8ac 	bl	80016fc <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 80005a4:	f000 f98e 	bl	80008c4 <MX_DFSDM1_Init>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005a8:	f003 fa62 	bl	8003a70 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_DEFAULT_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 80005ac:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80005b0:	2001      	movs	r0, #1
 80005b2:	f003 fc2b 	bl	8003e0c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_DEFAULT_ACTIVE_LAYER);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f003 fc88 	bl	8003ecc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80005bc:	f003 fe16 	bl	80041ec <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f003 fcde 	bl	8003f84 <BSP_LCD_Clear>

  // ref: https://www.youtube.com/watch?v=9zKkiFYjc2c


  // Set text colors
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f003 fca6 	bl	8003f1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80005d0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80005d4:	f003 fc8a 	bl	8003eec <BSP_LCD_SetTextColor>

  // Display the text
  BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"Hello World!", CENTER_MODE);
 80005d8:	2301      	movs	r3, #1
 80005da:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <main+0xc0>)
 80005dc:	2178      	movs	r1, #120	@ 0x78
 80005de:	2000      	movs	r0, #0
 80005e0:	f003 fd3c 	bl	800405c <BSP_LCD_DisplayStringAt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0xbc>
 80005e8:	0800ede8 	.word	0x0800ede8

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	@ 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00e fbbb 	bl	800ed76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f009 fcb6 	bl	8009f80 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <SystemClock_Config+0xf0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a30      	ldr	r2, [pc, #192]	@ (80006dc <SystemClock_Config+0xf0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <SystemClock_Config+0xf0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <SystemClock_Config+0xf4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <SystemClock_Config+0xf4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <SystemClock_Config+0xf4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000644:	230b      	movs	r3, #11
 8000646:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000664:	2319      	movs	r3, #25
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000668:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4618      	mov	r0, r3
 8000680:	f009 fda0 	bl	800a1c4 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800068a:	f001 fa2d 	bl	8001ae8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068e:	f009 fc87 	bl	8009fa0 <HAL_PWREx_EnableOverDrive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000698:	f001 fa26 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2107      	movs	r1, #7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00a f830 	bl	800a720 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xde>
  {
    Error_Handler();
 80006c6:	f001 fa0f 	bl	8001ae8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2000      	movs	r0, #0
 80006d0:	f00a f912 	bl	800a8f8 <HAL_RCC_MCOConfig>
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0a4      	sub	sp, #144	@ 0x90
 80006e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2290      	movs	r2, #144	@ 0x90
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00e fb40 	bl	800ed76 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <PeriphCommonClock_Config+0x50>)
 80006f8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006fa:	23c0      	movs	r3, #192	@ 0xc0
 80006fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000702:	2303      	movs	r3, #3
 8000704:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000716:	2300      	movs	r3, #0
 8000718:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fa7b 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000728:	f001 f9de 	bl	8001ae8 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3790      	adds	r7, #144	@ 0x90
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	00180008 	.word	0x00180008

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0x9c>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000752:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_ADC1_Init+0xa0>)
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800079a:	f004 f937 	bl	8004a0c <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a4:	f001 f9a0 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007a8:	230c      	movs	r3, #12
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_ADC1_Init+0x98>)
 80007ba:	f004 f96b 	bl	8004a94 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c4:	f001 f990 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200001b4 	.word	0x200001b4
 80007d4:	40012000 	.word	0x40012000
 80007d8:	0f000001 	.word	0x0f000001

080007dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_ADC3_Init+0x98>)
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <MX_ADC3_Init+0x9c>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_ADC3_Init+0x98>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_ADC3_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_ADC3_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_ADC3_Init+0x98>)
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <MX_ADC3_Init+0xa0>)
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_ADC3_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_ADC3_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_ADC3_Init+0x98>)
 800083e:	f004 f8e5 	bl	8004a0c <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000848:	f001 f94e 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800084c:	2306      	movs	r3, #6
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_ADC3_Init+0x98>)
 800085e:	f004 f919 	bl	8004a94 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000868:	f001 f93e 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001fc 	.word	0x200001fc
 8000878:	40012200 	.word	0x40012200
 800087c:	0f000001 	.word	0x0f000001

08000880 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_CRC_Init+0x3c>)
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <MX_CRC_Init+0x40>)
 8000888:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_CRC_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_CRC_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_CRC_Init+0x3c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_CRC_Init+0x3c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_CRC_Init+0x3c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_CRC_Init+0x3c>)
 80008aa:	f004 fdb3 	bl	8005414 <HAL_CRC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008b4:	f001 f918 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000244 	.word	0x20000244
 80008c0:	40023000 	.word	0x40023000

080008c4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_DFSDM1_Init+0x6c>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008dc:	2202      	movs	r2, #2
 80008de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_DFSDM1_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_DFSDM1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_DFSDM1_Init+0x68>)
 8000908:	2201      	movs	r2, #1
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_DFSDM1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_DFSDM1_Init+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_DFSDM1_Init+0x68>)
 800091a:	f004 fe6d 	bl	80055f8 <HAL_DFSDM_ChannelInit>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000924:	f001 f8e0 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000268 	.word	0x20000268
 8000930:	40017400 	.word	0x40017400

08000934 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_DMA2D_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <MX_DMA2D_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_DMA2D_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_DMA2D_Init+0x68>)
 800095e:	2200      	movs	r2, #0
 8000960:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_DMA2D_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000976:	f005 f909 	bl	8005b8c <HAL_DMA2D_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000980:	f001 f8b2 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000984:	2101      	movs	r1, #1
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_DMA2D_Init+0x68>)
 8000988:	f005 fb7e 	bl	8006088 <HAL_DMA2D_ConfigLayer>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000992:	f001 f8a9 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002a0 	.word	0x200002a0
 80009a0:	4002b000 	.word	0x4002b000

080009a4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0aa      	sub	sp, #168	@ 0xa8
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80009aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009b6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80009ba:	2224      	movs	r2, #36	@ 0x24
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00e f9d9 	bl	800ed76 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80009d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009da:	2234      	movs	r2, #52	@ 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00e f9c9 	bl	800ed76 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	222c      	movs	r2, #44	@ 0x2c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00e f9c3 	bl	800ed76 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80009f0:	4b6a      	ldr	r3, [pc, #424]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f2:	4a6b      	ldr	r2, [pc, #428]	@ (8000ba0 <MX_DSIHOST_DSI_Init+0x1fc>)
 80009f4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009f6:	4b69      	ldr	r3, [pc, #420]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009fc:	4b67      	ldr	r3, [pc, #412]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a02:	4b66      	ldr	r3, [pc, #408]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000a08:	2314      	movs	r3, #20
 8000a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	485e      	ldr	r0, [pc, #376]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a22:	f005 fcb3 	bl	800638c <HAL_DSI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f001 f85c 	bl	8001ae8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a62:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a66:	4619      	mov	r1, r3
 8000a68:	484c      	ldr	r0, [pc, #304]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a6a:	f006 fc19 	bl	80072a0 <HAL_DSI_ConfigHostTimeouts>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000a74:	f001 f838 	bl	8001ae8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000a78:	231c      	movs	r3, #28
 8000a7a:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a7c:	2321      	movs	r3, #33	@ 0x21
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000a80:	230f      	movs	r3, #15
 8000a82:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a84:	2319      	movs	r3, #25
 8000a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a90:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a94:	4619      	mov	r1, r3
 8000a96:	4841      	ldr	r0, [pc, #260]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a98:	f006 fb98 	bl	80071cc <HAL_DSI_ConfigPhyTimer>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000aa2:	f001 f821 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	483c      	ldr	r0, [pc, #240]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aaa:	f006 fb67 	bl	800717c <HAL_DSI_ConfigFlowControl>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000ab4:	f001 f818 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000ab8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000abc:	4837      	ldr	r0, [pc, #220]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000abe:	f006 fead 	bl	800781c <HAL_DSI_SetLowPowerRXFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000ac8:	f001 f80e 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4833      	ldr	r0, [pc, #204]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ad0:	f005 fe50 	bl	8006774 <HAL_DSI_ConfigErrorMonitor>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000ada:	f001 f805 	bl	8001ae8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000af0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b00:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b06:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b18:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b1a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b1e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b32:	f006 fac5 	bl	80070c0 <HAL_DSI_ConfigCommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000b3c:	f000 ffd4 	bl	8001ae8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000b44:	2305      	movs	r3, #5
 8000b46:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000b48:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b4c:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000b56:	2304      	movs	r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000b66:	2340      	movs	r3, #64	@ 0x40
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b74:	f006 f9ca 	bl	8006f0c <HAL_DSI_ConfigAdaptedCommandMode>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000b7e:	f000 ffb3 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b86:	f005 ff98 	bl	8006aba <HAL_DSI_SetGenericVCID>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000b90:	f000 ffaa 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	37a8      	adds	r7, #168	@ 0xa8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200002f8 	.word	0x200002f8
 8000ba0:	40016c00 	.word	0x40016c00

08000ba4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000baa:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_ETH_Init+0x88>)
 8000bac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bbc:	22e1      	movs	r2, #225	@ 0xe1
 8000bbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bd4:	4a16      	ldr	r2, [pc, #88]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bde:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <MX_ETH_Init+0x90>)
 8000be4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_ETH_Init+0x94>)
 8000bea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000bf2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bf6:	f006 fe3f 	bl	8007878 <HAL_ETH_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c00:	f000 ff72 	bl	8001ae8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c04:	2238      	movs	r2, #56	@ 0x38
 8000c06:	2100      	movs	r1, #0
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c0a:	f00e f8b4 	bl	800ed76 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c10:	2221      	movs	r2, #33	@ 0x21
 8000c12:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c16:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c1a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000314 	.word	0x20000314
 8000c2c:	40028000 	.word	0x40028000
 8000c30:	20001038 	.word	0x20001038
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	20000020 	.word	0x20000020
 8000c3c:	2000017c 	.word	0x2000017c

08000c40 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <MX_HDMI_CEC_Init+0x60>)
 8000c48:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c7a:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <MX_HDMI_CEC_Init+0x64>)
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_HDMI_CEC_Init+0x5c>)
 8000c8a:	f004 f953 	bl	8004f34 <HAL_CEC_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000c94:	f000 ff28 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200003c4 	.word	0x200003c4
 8000ca0:	40006c00 	.word	0x40006c00
 8000ca4:	20001028 	.word	0x20001028

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f007 fbe8 	bl	80084b8 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 fefb 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f007 fc7b 	bl	80085f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fef2 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f007 fcbd 	bl	8008686 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fee9 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000408 	.word	0x20000408
 8000d20:	40005400 	.word	0x40005400
 8000d24:	20404768 	.word	0x20404768

08000d28 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <MX_I2C4_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <MX_I2C4_Init+0x7c>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d62:	480e      	ldr	r0, [pc, #56]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d64:	f007 fba8 	bl	80084b8 <HAL_I2C_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d6e:	f000 febb 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d76:	f007 fc3b 	bl	80085f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d80:	f000 feb2 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_I2C4_Init+0x74>)
 8000d88:	f007 fc7d 	bl	8008686 <HAL_I2CEx_ConfigDigitalFilter>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 fea9 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000045c 	.word	0x2000045c
 8000da0:	40006000 	.word	0x40006000
 8000da4:	20404768 	.word	0x20404768

08000da8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	@ 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2234      	movs	r2, #52	@ 0x34
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00d ffde 	bl	800ed76 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dba:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dc6:	4b36      	ldr	r3, [pc, #216]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000dde:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000df2:	f240 3221 	movw	r2, #801	@ 0x321
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dfa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 802;
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e02:	f240 3222 	movw	r2, #802	@ 0x322
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e0a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e28:	481d      	ldr	r0, [pc, #116]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e2a:	f007 fc79 	bl	8008720 <HAL_LTDC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 fe58 	bl	8001ae8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000e3c:	23c8      	movs	r3, #200	@ 0xc8
 8000e3e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000e44:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e48:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e4e:	23ff      	movs	r3, #255	@ 0xff
 8000e50:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e5a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000e60:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000e66:	23c8      	movs	r3, #200	@ 0xc8
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000e6a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e8a:	f007 fddb 	bl	8008a44 <HAL_LTDC_ConfigLayer>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000e94:	f000 fe28 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200004b0 	.word	0x200004b0
 8000ea4:	40016800 	.word	0x40016800

08000ea8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000eae:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <MX_QUADSPI_Init+0x54>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000eba:	2210      	movs	r2, #16
 8000ebc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ec6:	221a      	movs	r2, #26
 8000ec8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ecc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ed0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_QUADSPI_Init+0x50>)
 8000ee6:	f009 f8ab 	bl	800a040 <HAL_QSPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ef0:	f000 fdfa 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000558 	.word	0x20000558
 8000efc:	a0001000 	.word	0xa0001000

08000f00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b090      	sub	sp, #64	@ 0x40
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2228      	movs	r2, #40	@ 0x28
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00d ff28 	bl	800ed76 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f28:	4a42      	ldr	r2, [pc, #264]	@ (8001034 <MX_RTC_Init+0x134>)
 8000f2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f2c:	4b40      	ldr	r3, [pc, #256]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f32:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f34:	227f      	movs	r2, #127	@ 0x7f
 8000f36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f38:	4b3d      	ldr	r3, [pc, #244]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f3a:	22ff      	movs	r2, #255	@ 0xff
 8000f3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f46:	4b3a      	ldr	r3, [pc, #232]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f4c:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f52:	4837      	ldr	r0, [pc, #220]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f54:	f00a fbf6 	bl	800b744 <HAL_RTC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000f5e:	f000 fdc3 	bl	8001ae8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f80:	2201      	movs	r2, #1
 8000f82:	4619      	mov	r1, r3
 8000f84:	482a      	ldr	r0, [pc, #168]	@ (8001030 <MX_RTC_Init+0x130>)
 8000f86:	f00a fc61 	bl	800b84c <HAL_RTC_SetTime>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000f90:	f000 fdaa 	bl	8001ae8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481e      	ldr	r0, [pc, #120]	@ (8001030 <MX_RTC_Init+0x130>)
 8000fb6:	f00a fce3 	bl	800b980 <HAL_RTC_SetDate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000fc0:	f000 fd92 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_RTC_Init+0x130>)
 8000ffc:	f00a fd44 	bl	800ba88 <HAL_RTC_SetAlarm>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001006:	f000 fd6f 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800100a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <MX_RTC_Init+0x130>)
 8001018:	f00a fd36 	bl	800ba88 <HAL_RTC_SetAlarm>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001022:	f000 fd61 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3740      	adds	r7, #64	@ 0x40
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200005a4 	.word	0x200005a4
 8001034:	40002800 	.word	0x40002800

08001038 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800103c:	4b4d      	ldr	r3, [pc, #308]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800103e:	4a4e      	ldr	r2, [pc, #312]	@ (8001178 <MX_SAI1_Init+0x140>)
 8001040:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001042:	4b4c      	ldr	r3, [pc, #304]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001048:	4b4a      	ldr	r3, [pc, #296]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800104e:	4b49      	ldr	r3, [pc, #292]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001050:	2240      	movs	r2, #64	@ 0x40
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001054:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001056:	2200      	movs	r2, #0
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001060:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001066:	4b43      	ldr	r3, [pc, #268]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800106c:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001072:	4b40      	ldr	r3, [pc, #256]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001078:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800107a:	4a40      	ldr	r2, [pc, #256]	@ (800117c <MX_SAI1_Init+0x144>)
 800107c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001084:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800108a:	4b3a      	ldr	r3, [pc, #232]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001090:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001096:	4b37      	ldr	r3, [pc, #220]	@ (8001174 <MX_SAI1_Init+0x13c>)
 8001098:	2208      	movs	r2, #8
 800109a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <MX_SAI1_Init+0x13c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010a8:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80010b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80010cc:	4829      	ldr	r0, [pc, #164]	@ (8001174 <MX_SAI1_Init+0x13c>)
 80010ce:	f00a fea5 	bl	800be1c <HAL_SAI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80010d8:	f000 fd06 	bl	8001ae8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010de:	4a29      	ldr	r2, [pc, #164]	@ (8001184 <MX_SAI1_Init+0x14c>)
 80010e0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010f0:	2240      	movs	r2, #64	@ 0x40
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_SAI1_Init+0x148>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001102:	2201      	movs	r2, #1
 8001104:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_SAI1_Init+0x148>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_SAI1_Init+0x148>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_SAI1_Init+0x148>)
 800112c:	2208      	movs	r2, #8
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001132:	2201      	movs	r2, #1
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001138:	2200      	movs	r2, #0
 800113a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_SAI1_Init+0x148>)
 800113e:	2200      	movs	r2, #0
 8001140:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001144:	2200      	movs	r2, #0
 8001146:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_SAI1_Init+0x148>)
 800114a:	2200      	movs	r2, #0
 800114c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001150:	2200      	movs	r2, #0
 8001152:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001156:	2201      	movs	r2, #1
 8001158:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_SAI1_Init+0x148>)
 800115c:	2200      	movs	r2, #0
 800115e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001160:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_SAI1_Init+0x148>)
 8001162:	f00a fe5b 	bl	800be1c <HAL_SAI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800116c:	f000 fcbc 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200005c4 	.word	0x200005c4
 8001178:	40015804 	.word	0x40015804
 800117c:	0002ee00 	.word	0x0002ee00
 8001180:	20000648 	.word	0x20000648
 8001184:	40015824 	.word	0x40015824

08001188 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_SAI2_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_SAI2_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_SAI2_Init+0x50>)
 8001194:	2204      	movs	r2, #4
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_SAI2_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011b2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80011b6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_SAI2_Init+0x50>)
 80011c6:	f00a fe29 	bl	800be1c <HAL_SAI_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 fc8a 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200006cc 	.word	0x200006cc
 80011dc:	40015c04 	.word	0x40015c04

080011e0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 80011e6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80011ea:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 80011ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011f2:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_SPDIFRX_Init+0x60>)
 800122c:	f00b f83e 	bl	800c2ac <HAL_SPDIFRX_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8001236:	f000 fc57 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000750 	.word	0x20000750

08001244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800124a:	4a1b      	ldr	r2, [pc, #108]	@ (80012b8 <MX_SPI2_Init+0x74>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800125e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001262:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001290:	2207      	movs	r2, #7
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_SPI2_Init+0x70>)
 8001296:	2200      	movs	r2, #0
 8001298:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_SPI2_Init+0x70>)
 800129c:	2208      	movs	r2, #8
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_SPI2_Init+0x70>)
 80012a2:	f00b f85f 	bl	800c364 <HAL_SPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 80012ac:	f000 fc1c 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000079c 	.word	0x2000079c
 80012b8:	40003800 	.word	0x40003800

080012bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012dc:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <MX_TIM1_Init+0xa4>)
 80012de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_TIM1_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_TIM1_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001306:	4815      	ldr	r0, [pc, #84]	@ (800135c <MX_TIM1_Init+0xa0>)
 8001308:	f00b f8d7 	bl	800c4ba <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fbe9 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480e      	ldr	r0, [pc, #56]	@ (800135c <MX_TIM1_Init+0xa0>)
 8001324:	f00b fc0a 	bl	800cb3c <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800132e:	f000 fbdb 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_TIM1_Init+0xa0>)
 8001344:	f00c f890 	bl	800d468 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800134e:	f000 fbcb 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000800 	.word	0x20000800
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001388:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_TIM3_Init+0xac>)
 800138a:	4a22      	ldr	r2, [pc, #136]	@ (8001414 <MX_TIM3_Init+0xb0>)
 800138c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <MX_TIM3_Init+0xac>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <MX_TIM3_Init+0xac>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <MX_TIM3_Init+0xac>)
 800139c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_TIM3_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM3_Init+0xac>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ae:	4818      	ldr	r0, [pc, #96]	@ (8001410 <MX_TIM3_Init+0xac>)
 80013b0:	f00b f952 	bl	800c658 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013ba:	f000 fb95 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <MX_TIM3_Init+0xac>)
 80013ce:	f00c f84b 	bl	800d468 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80013d8:	f000 fb86 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	@ 0x60
 80013de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2208      	movs	r2, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	@ (8001410 <MX_TIM3_Init+0xac>)
 80013f4:	f00b fa8e 	bl	800c914 <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80013fe:	f000 fb73 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <MX_TIM3_Init+0xac>)
 8001404:	f001 f9aa 	bl	800275c <HAL_TIM_MspPostInit>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000084c 	.word	0x2000084c
 8001414:	40000400 	.word	0x40000400

08001418 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <MX_TIM10_Init+0x98>)
 8001434:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_TIM10_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001448:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_TIM10_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001456:	4815      	ldr	r0, [pc, #84]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001458:	f00b f82f 	bl	800c4ba <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001462:	f000 fb41 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001466:	4811      	ldr	r0, [pc, #68]	@ (80014ac <MX_TIM10_Init+0x94>)
 8001468:	f00b f8f6 	bl	800c658 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001472:	f000 fb39 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	@ 0x60
 8001478:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM10_Init+0x94>)
 800148e:	f00b fa41 	bl	800c914 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001498:	f000 fb26 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM10_Init+0x94>)
 800149e:	f001 f95d 	bl	800275c <HAL_TIM_MspPostInit>

}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000898 	.word	0x20000898
 80014b0:	40014400 	.word	0x40014400

080014b4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <MX_TIM11_Init+0x98>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014f2:	4815      	ldr	r0, [pc, #84]	@ (8001548 <MX_TIM11_Init+0x94>)
 80014f4:	f00a ffe1 	bl	800c4ba <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80014fe:	f000 faf3 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001502:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_TIM11_Init+0x94>)
 8001504:	f00b f8a8 	bl	800c658 <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800150e:	f000 faeb 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	@ 0x60
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <MX_TIM11_Init+0x94>)
 800152a:	f00b f9f3 	bl	800c914 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001534:	f000 fad8 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <MX_TIM11_Init+0x94>)
 800153a:	f001 f90f 	bl	800275c <HAL_TIM_MspPostInit>

}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200008e4 	.word	0x200008e4
 800154c:	40014800 	.word	0x40014800

08001550 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_TIM12_Init+0x84>)
 800156a:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <MX_TIM12_Init+0x88>)
 800156c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_TIM12_Init+0x84>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_TIM12_Init+0x84>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_TIM12_Init+0x84>)
 800157c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_TIM12_Init+0x84>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_TIM12_Init+0x84>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800158e:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <MX_TIM12_Init+0x84>)
 8001590:	f00b f862 	bl	800c658 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800159a:	f000 faa5 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	@ 0x60
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <MX_TIM12_Init+0x84>)
 80015b6:	f00b f9ad 	bl	800c914 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015c0:	f000 fa92 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <MX_TIM12_Init+0x84>)
 80015c6:	f001 f8c9 	bl	800275c <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000930 	.word	0x20000930
 80015d8:	40001800 	.word	0x40001800

080015dc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_UART5_Init+0x58>)
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <MX_UART5_Init+0x5c>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <MX_UART5_Init+0x58>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_UART5_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_UART5_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_UART5_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_UART5_Init+0x58>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_UART5_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_UART5_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_UART5_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_UART5_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_UART5_Init+0x58>)
 8001620:	f00b ffce 	bl	800d5c0 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800162a:	f000 fa5d 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000097c 	.word	0x2000097c
 8001638:	40005000 	.word	0x40005000

0800163c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001642:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <MX_USART1_UART_Init+0x5c>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_USART1_UART_Init+0x58>)
 8001680:	f00b ff9e 	bl	800d5c0 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800168a:	f000 fa2d 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000a04 	.word	0x20000a04
 8001698:	40011000 	.word	0x40011000

0800169c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <MX_USART6_UART_Init+0x5c>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART6_UART_Init+0x58>)
 80016e0:	f00b ff6e 	bl	800d5c0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016ea:	f000 f9fd 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000a8c 	.word	0x20000a8c
 80016f8:	40011400 	.word	0x40011400

080016fc <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001704:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001708:	2209      	movs	r2, #9
 800170a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001714:	2200      	movs	r2, #0
 8001716:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800171a:	2201      	movs	r2, #1
 800171c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001720:	2200      	movs	r2, #0
 8001722:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001726:	2200      	movs	r2, #0
 8001728:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800172c:	2200      	movs	r2, #0
 800172e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001732:	2200      	movs	r2, #0
 8001734:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001738:	2200      	movs	r2, #0
 800173a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800173e:	2200      	movs	r2, #0
 8001740:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001744:	f007 fba6 	bl	8008e94 <HAL_PCD_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 800174e:	f000 f9cb 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000b14 	.word	0x20000b14
 800175c:	40040000 	.word	0x40040000

08001760 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <MX_FMC_Init+0x98>)
 800177a:	4a20      	ldr	r2, [pc, #128]	@ (80017fc <MX_FMC_Init+0x9c>)
 800177c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <MX_FMC_Init+0x98>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001784:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <MX_FMC_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <MX_FMC_Init+0x98>)
 800178c:	2204      	movs	r2, #4
 800178e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_FMC_Init+0x98>)
 8001792:	2220      	movs	r2, #32
 8001794:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <MX_FMC_Init+0x98>)
 8001798:	2240      	movs	r2, #64	@ 0x40
 800179a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <MX_FMC_Init+0x98>)
 800179e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017a4:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <MX_FMC_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <MX_FMC_Init+0x98>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <MX_FMC_Init+0x98>)
 80017b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <MX_FMC_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_FMC_Init+0x98>)
 80017e2:	f00a fcd1 	bl	800c188 <HAL_SDRAM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017ec:	f000 f97c 	bl	8001ae8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000ff4 	.word	0x20000ff4
 80017fc:	a0000140 	.word	0xa0000140

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b090      	sub	sp, #64	@ 0x40
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4ba2      	ldr	r3, [pc, #648]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4aa1      	ldr	r2, [pc, #644]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b9f      	ldr	r3, [pc, #636]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4b9c      	ldr	r3, [pc, #624]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a9b      	ldr	r2, [pc, #620]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b99      	ldr	r3, [pc, #612]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b96      	ldr	r3, [pc, #600]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a95      	ldr	r2, [pc, #596]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b93      	ldr	r3, [pc, #588]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	4b90      	ldr	r3, [pc, #576]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a8f      	ldr	r2, [pc, #572]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a89      	ldr	r2, [pc, #548]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b87      	ldr	r3, [pc, #540]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b84      	ldr	r3, [pc, #528]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a83      	ldr	r2, [pc, #524]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b81      	ldr	r3, [pc, #516]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018be:	4b78      	ldr	r3, [pc, #480]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b75      	ldr	r3, [pc, #468]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018d6:	4b72      	ldr	r3, [pc, #456]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a71      	ldr	r2, [pc, #452]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ee:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b69      	ldr	r3, [pc, #420]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	4b66      	ldr	r3, [pc, #408]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a65      	ldr	r2, [pc, #404]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <MX_GPIO_Init+0x2a0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f24a 0120 	movw	r1, #40992	@ 0xa020
 8001924:	485f      	ldr	r0, [pc, #380]	@ (8001aa4 <MX_GPIO_Init+0x2a4>)
 8001926:	f006 fdad 	bl	8008484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 800192a:	2318      	movs	r3, #24
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800193a:	230a      	movs	r3, #10
 800193c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	4858      	ldr	r0, [pc, #352]	@ (8001aa8 <MX_GPIO_Init+0x2a8>)
 8001946:	f006 fae5 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800195a:	230b      	movs	r3, #11
 800195c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001962:	4619      	mov	r1, r3
 8001964:	4851      	ldr	r0, [pc, #324]	@ (8001aac <MX_GPIO_Init+0x2ac>)
 8001966:	f006 fad5 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin DSI_RESET_Pin LD_USER2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|DSI_RESET_Pin|LD_USER2_Pin;
 800196a:	f24a 0320 	movw	r3, #40992	@ 0xa020
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	4848      	ldr	r0, [pc, #288]	@ (8001aa4 <MX_GPIO_Init+0x2a4>)
 8001984:	f006 fac6 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin ARD_D7_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin|ARD_D7_Pin
 8001988:	f245 031b 	movw	r3, #20507	@ 0x501b
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	4841      	ldr	r0, [pc, #260]	@ (8001aa4 <MX_GPIO_Init+0x2a4>)
 800199e:	f006 fab9 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 80019a2:	f44f 4351 	mov.w	r3, #53504	@ 0xd100
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	483e      	ldr	r0, [pc, #248]	@ (8001ab0 <MX_GPIO_Init+0x2b0>)
 80019b8:	f006 faac 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 80019bc:	23f8      	movs	r3, #248	@ 0xf8
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4839      	ldr	r0, [pc, #228]	@ (8001ab4 <MX_GPIO_Init+0x2b4>)
 80019d0:	f006 faa0 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80019d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80019e6:	230b      	movs	r3, #11
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	4831      	ldr	r0, [pc, #196]	@ (8001ab8 <MX_GPIO_Init+0x2b8>)
 80019f2:	f006 fa8f 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 80019f6:	2330      	movs	r3, #48	@ 0x30
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4828      	ldr	r0, [pc, #160]	@ (8001aac <MX_GPIO_Init+0x2ac>)
 8001a0a:	f006 fa83 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4824      	ldr	r0, [pc, #144]	@ (8001abc <MX_GPIO_Init+0x2bc>)
 8001a2c:	f006 fa72 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	481a      	ldr	r0, [pc, #104]	@ (8001ab0 <MX_GPIO_Init+0x2b0>)
 8001a48:	f006 fa64 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001a4c:	2348      	movs	r3, #72	@ 0x48
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4816      	ldr	r0, [pc, #88]	@ (8001ab8 <MX_GPIO_Init+0x2b8>)
 8001a60:	f006 fa58 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001a64:	2301      	movs	r3, #1
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a76:	4619      	mov	r1, r3
 8001a78:	4810      	ldr	r0, [pc, #64]	@ (8001abc <MX_GPIO_Init+0x2bc>)
 8001a7a:	f006 fa4b 	bl	8007f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <MX_GPIO_Init+0x2c0>)
 8001a92:	f006 fa3f 	bl	8007f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a96:	bf00      	nop
 8001a98:	3740      	adds	r7, #64	@ 0x40
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40022400 	.word	0x40022400
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40022800 	.word	0x40022800
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40021c00 	.word	0x40021c00

08001ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad6:	f002 ff55 	bl	8004984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40001000 	.word	0x40001000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <Error_Handler+0x8>

08001af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a0e      	ldr	r2, [pc, #56]	@ (8001b38 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_MspInit+0x44>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_MspInit+0x44>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_MspInit+0x44>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a36      	ldr	r2, [pc, #216]	@ (8001c34 <HAL_ADC_MspInit+0xf8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d13c      	bne.n	8001bd8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5e:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	4a35      	ldr	r2, [pc, #212]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a29      	ldr	r2, [pc, #164]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <HAL_ADC_MspInit+0x100>)
 8001bba:	f006 f9ab 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001bbe:	2350      	movs	r3, #80	@ 0x50
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <HAL_ADC_MspInit+0x104>)
 8001bd2:	f006 f99f 	bl	8007f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bd6:	e029      	b.n	8001c2c <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_ADC_MspInit+0x108>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d124      	bne.n	8001c2c <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001be8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_ADC_MspInit+0xfc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001c12:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	@ (8001c48 <HAL_ADC_MspInit+0x10c>)
 8001c28:	f006 f974 	bl	8007f14 <HAL_GPIO_Init>
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	@ 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40012200 	.word	0x40012200
 8001c48:	40021400 	.word	0x40021400

08001c4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_CRC_MspInit+0x38>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10b      	bne.n	8001c76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_CRC_MspInit+0x3c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_CRC_MspInit+0x3c>)
 8001c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_CRC_MspInit+0x3c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023000 	.word	0x40023000
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2290      	movs	r2, #144	@ 0x90
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00d f862 	bl	800ed76 <memset>
  if(DFSDM1_Init == 0)
 8001cb2:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d163      	bne.n	8001d82 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 ffa4 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001cd6:	f7ff ff07 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a2c      	ldr	r2, [pc, #176]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001ce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a26      	ldr	r2, [pc, #152]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001d4a:	f006 f8e3 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001d74:	f006 f8ce 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d80:	6013      	str	r3, [r2, #0]
  }

}
 8001d82:	bf00      	nop
 8001d84:	37b8      	adds	r7, #184	@ 0xb8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001040 	.word	0x20001040
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00

08001d9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <HAL_DMA2D_MspInit+0x44>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d113      	bne.n	8001dd6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_DMA2D_MspInit+0x48>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a0c      	ldr	r2, [pc, #48]	@ (8001de4 <HAL_DMA2D_MspInit+0x48>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_DMA2D_MspInit+0x48>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	205a      	movs	r0, #90	@ 0x5a
 8001dcc:	f003 faea 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dd0:	205a      	movs	r0, #90	@ 0x5a
 8001dd2:	f003 fb03 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	4002b000 	.word	0x4002b000
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <HAL_DSI_MspInit+0x8c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12f      	bne.n	8001e6a <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_DSI_MspInit+0x90>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001e4a:	230d      	movs	r3, #13
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <HAL_DSI_MspInit+0x94>)
 8001e56:	f006 f85d 	bl	8007f14 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2062      	movs	r0, #98	@ 0x62
 8001e60:	f003 faa0 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e64:	2062      	movs	r0, #98	@ 0x62
 8001e66:	f003 fab9 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	@ 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40016c00 	.word	0x40016c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40022400 	.word	0x40022400

08001e80 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_DSI_MspDeInit+0x34>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10c      	bne.n	8001eac <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_DSI_MspDeInit+0x38>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_DSI_MspDeInit+0x38>)
 8001e98:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <HAL_DSI_MspDeInit+0x3c>)
 8001ea2:	f006 f9e3 	bl	800826c <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8001ea6:	2062      	movs	r0, #98	@ 0x62
 8001ea8:	f003 faa6 	bl	80053f8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40016c00 	.word	0x40016c00
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40022400 	.word	0x40022400

08001ec0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3f      	ldr	r2, [pc, #252]	@ (8001fdc <HAL_ETH_MspInit+0x11c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d178      	bne.n	8001fd4 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a38      	ldr	r2, [pc, #224]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a32      	ldr	r2, [pc, #200]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a26      	ldr	r2, [pc, #152]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a20      	ldr	r2, [pc, #128]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <HAL_ETH_MspInit+0x120>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f72:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f84:	230b      	movs	r3, #11
 8001f86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4815      	ldr	r0, [pc, #84]	@ (8001fe4 <HAL_ETH_MspInit+0x124>)
 8001f90:	f005 ffc0 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f94:	2332      	movs	r3, #50	@ 0x32
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa4:	230b      	movs	r3, #11
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	480e      	ldr	r0, [pc, #56]	@ (8001fe8 <HAL_ETH_MspInit+0x128>)
 8001fb0:	f005 ffb0 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fb4:	2386      	movs	r3, #134	@ 0x86
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	@ (8001fec <HAL_ETH_MspInit+0x12c>)
 8001fd0:	f005 ffa0 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3738      	adds	r7, #56	@ 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40028000 	.word	0x40028000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2290      	movs	r2, #144	@ 0x90
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f00c feb0 	bl	800ed76 <memset>
  if(hcec->Instance==CEC)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_CEC_MspInit+0xc8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d146      	bne.n	80020ae <HAL_CEC_MspInit+0xbe>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8002020:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002024:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 8002026:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4618      	mov	r0, r3
 8002034:	f008 fdf0 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 800203e:	f7ff fd53 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 8002048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_CEC_MspInit+0xcc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 8002072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207a:	2312      	movs	r3, #18
 800207c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 800208c:	2304      	movs	r3, #4
 800208e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002096:	4619      	mov	r1, r3
 8002098:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <HAL_CEC_MspInit+0xd0>)
 800209a:	f005 ff3b 	bl	8007f14 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	205e      	movs	r0, #94	@ 0x5e
 80020a4:	f003 f97e 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 80020a8:	205e      	movs	r0, #94	@ 0x5e
 80020aa:	f003 f997 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END CEC_MspInit 1 */

  }

}
 80020ae:	bf00      	nop
 80020b0:	37b8      	adds	r7, #184	@ 0xb8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40006c00 	.word	0x40006c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0b0      	sub	sp, #192	@ 0xc0
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2290      	movs	r2, #144	@ 0x90
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00c fe46 	bl	800ed76 <memset>
  if(hi2c->Instance==I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a55      	ldr	r2, [pc, #340]	@ (8002244 <HAL_I2C_MspInit+0x180>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d13e      	bne.n	8002172 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	4618      	mov	r0, r3
 8002106:	f008 fd87 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002110:	f7ff fcea 	bl	8001ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b4c      	ldr	r3, [pc, #304]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	4a4b      	ldr	r2, [pc, #300]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002120:	4b49      	ldr	r3, [pc, #292]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800212c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002130:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002134:	2312      	movs	r3, #18
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213a:	2301      	movs	r3, #1
 800213c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002146:	2304      	movs	r3, #4
 8002148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002150:	4619      	mov	r1, r3
 8002152:	483e      	ldr	r0, [pc, #248]	@ (800224c <HAL_I2C_MspInit+0x188>)
 8002154:	f005 fede 	bl	8007f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	4a3a      	ldr	r2, [pc, #232]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 800215e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002162:	6413      	str	r3, [r2, #64]	@ 0x40
 8002164:	4b38      	ldr	r3, [pc, #224]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002170:	e063      	b.n	800223a <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a36      	ldr	r2, [pc, #216]	@ (8002250 <HAL_I2C_MspInit+0x18c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d15e      	bne.n	800223a <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800217c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002180:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4618      	mov	r0, r3
 800218e:	f008 fd43 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002198:	f7ff fca6 	bl	8001ae8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c0:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d8:	2301      	movs	r3, #1
 80021da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80021e4:	230b      	movs	r3, #11
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80021ee:	4619      	mov	r1, r3
 80021f0:	4816      	ldr	r0, [pc, #88]	@ (800224c <HAL_I2C_MspInit+0x188>)
 80021f2:	f005 fe8f 	bl	8007f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80021f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fe:	2312      	movs	r3, #18
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002210:	2304      	movs	r3, #4
 8002212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800221a:	4619      	mov	r1, r3
 800221c:	480d      	ldr	r0, [pc, #52]	@ (8002254 <HAL_I2C_MspInit+0x190>)
 800221e:	f005 fe79 	bl	8007f14 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_I2C_MspInit+0x184>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
}
 800223a:	bf00      	nop
 800223c:	37c0      	adds	r7, #192	@ 0xc0
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40005400 	.word	0x40005400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400
 8002250:	40006000 	.word	0x40006000
 8002254:	40020c00 	.word	0x40020c00

08002258 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_LTDC_MspInit+0x44>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d113      	bne.n	8002292 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <HAL_LTDC_MspInit+0x48>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <HAL_LTDC_MspInit+0x48>)
 8002270:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_LTDC_MspInit+0x48>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2058      	movs	r0, #88	@ 0x58
 8002288:	f003 f88c 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800228c:	2058      	movs	r0, #88	@ 0x58
 800228e:	f003 f8a5 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40016800 	.word	0x40016800
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a4a      	ldr	r2, [pc, #296]	@ (80023ec <HAL_QSPI_MspInit+0x148>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f040 808e 	bne.w	80023e4 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022c8:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022cc:	4a48      	ldr	r2, [pc, #288]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80022d4:	4b46      	ldr	r3, [pc, #280]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e0:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	4a42      	ldr	r2, [pc, #264]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ec:	4b40      	ldr	r3, [pc, #256]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	4a3c      	ldr	r2, [pc, #240]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	6313      	str	r3, [r2, #48]	@ 0x30
 8002304:	4b3a      	ldr	r3, [pc, #232]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	4a36      	ldr	r2, [pc, #216]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6313      	str	r3, [r2, #48]	@ 0x30
 800231c:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	4a30      	ldr	r2, [pc, #192]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6313      	str	r3, [r2, #48]	@ 0x30
 8002334:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <HAL_QSPI_MspInit+0x14c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002340:	2304      	movs	r3, #4
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002350:	2309      	movs	r3, #9
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4826      	ldr	r0, [pc, #152]	@ (80023f4 <HAL_QSPI_MspInit+0x150>)
 800235c:	f005 fdda 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002360:	2340      	movs	r3, #64	@ 0x40
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002370:	230a      	movs	r3, #10
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	481f      	ldr	r0, [pc, #124]	@ (80023f8 <HAL_QSPI_MspInit+0x154>)
 800237c:	f005 fdca 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002380:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002392:	2309      	movs	r3, #9
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4817      	ldr	r0, [pc, #92]	@ (80023fc <HAL_QSPI_MspInit+0x158>)
 800239e:	f005 fdb9 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023a2:	2304      	movs	r3, #4
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023b2:	2309      	movs	r3, #9
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	480e      	ldr	r0, [pc, #56]	@ (80023f8 <HAL_QSPI_MspInit+0x154>)
 80023be:	f005 fda9 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 80023c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023d4:	2309      	movs	r3, #9
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4808      	ldr	r0, [pc, #32]	@ (8002400 <HAL_QSPI_MspInit+0x15c>)
 80023e0:	f005 fd98 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80023e4:	bf00      	nop
 80023e6:	3730      	adds	r7, #48	@ 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	a0001000 	.word	0xa0001000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00

08002404 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0ac      	sub	sp, #176	@ 0xb0
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2290      	movs	r2, #144	@ 0x90
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00c fca6 	bl	800ed76 <memset>
  if(hrtc->Instance==RTC)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <HAL_RTC_MspInit+0xa0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d133      	bne.n	800249c <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002434:	2320      	movs	r3, #32
 8002436:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800243c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4618      	mov	r0, r3
 8002444:	f008 fbe8 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 800244e:	f7ff fb4b 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_RTC_MspInit+0xa4>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <HAL_RTC_MspInit+0xa4>)
 8002458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800245c:	6713      	str	r3, [r2, #112]	@ 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_RTC_MspInit+0xa4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_RTC_MspInit+0xa4>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_RTC_MspInit+0xa4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800247a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002490:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002494:	4619      	mov	r1, r3
 8002496:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_RTC_MspInit+0xa8>)
 8002498:	f005 fd3c 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800249c:	bf00      	nop
 800249e:	37b0      	adds	r7, #176	@ 0xb0
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40002800 	.word	0x40002800
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020800 	.word	0x40020800

080024b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0ae      	sub	sp, #184	@ 0xb8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2290      	movs	r2, #144	@ 0x90
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00c fc50 	bl	800ed76 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80024de:	d144      	bne.n	800256a <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80024e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80024e6:	23c0      	movs	r3, #192	@ 0xc0
 80024e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80024ea:	2302      	movs	r3, #2
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80024f2:	2302      	movs	r3, #2
 80024f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4618      	mov	r0, r3
 8002500:	f008 fb8a 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800250a:	f7ff faed 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6413      	str	r3, [r2, #64]	@ 0x40
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 800252c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <HAL_SPDIFRX_MspInit+0xc4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 800253e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002558:	2307      	movs	r3, #7
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002562:	4619      	mov	r1, r3
 8002564:	4804      	ldr	r0, [pc, #16]	@ (8002578 <HAL_SPDIFRX_MspInit+0xc8>)
 8002566:	f005 fcd5 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 800256a:	bf00      	nop
 800256c:	37b8      	adds	r7, #184	@ 0xb8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40021800 	.word	0x40021800

0800257c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_SPI_MspInit+0xd8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d156      	bne.n	800264c <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800259e:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <HAL_SPI_MspInit+0xdc>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80025e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025f8:	2305      	movs	r3, #5
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4816      	ldr	r0, [pc, #88]	@ (800265c <HAL_SPI_MspInit+0xe0>)
 8002604:	f005 fc86 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002608:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800261a:	2305      	movs	r3, #5
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	480d      	ldr	r0, [pc, #52]	@ (800265c <HAL_SPI_MspInit+0xe0>)
 8002626:	f005 fc75 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800262a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800262e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800263c:	2305      	movs	r3, #5
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <HAL_SPI_MspInit+0xe4>)
 8002648:	f005 fc64 	bl	8007f14 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	@ 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40003800 	.word	0x40003800
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_TIM_Base_MspInit+0x80>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10c      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800268e:	e022      	b.n	80026d6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <HAL_TIM_Base_MspInit+0x88>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
}
 80026b2:	e010      	b.n	80026d6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_TIM_Base_MspInit+0x8c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10b      	bne.n	80026d6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_TIM_Base_MspInit+0x84>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40014800 	.word	0x40014800

080026f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	@ (8002750 <HAL_TIM_PWM_MspInit+0x5c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002706:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6413      	str	r3, [r2, #64]	@ 0x40
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800271e:	e010      	b.n	8002742 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <HAL_TIM_PWM_MspInit+0x64>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10b      	bne.n	8002742 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 8002730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <HAL_TIM_PWM_MspInit+0x60>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40000400 	.word	0x40000400
 8002754:	40023800 	.word	0x40023800
 8002758:	40001800 	.word	0x40001800

0800275c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	@ 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <HAL_TIM_MspPostInit+0x130>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d11d      	bne.n	80027ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	4b44      	ldr	r3, [pc, #272]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8002796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027a8:	2302      	movs	r3, #2
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4619      	mov	r1, r3
 80027b2:	4838      	ldr	r0, [pc, #224]	@ (8002894 <HAL_TIM_MspPostInit+0x138>)
 80027b4:	f005 fbae 	bl	8007f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80027b8:	e064      	b.n	8002884 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a36      	ldr	r2, [pc, #216]	@ (8002898 <HAL_TIM_MspPostInit+0x13c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d11c      	bne.n	80027fe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a31      	ldr	r2, [pc, #196]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80027dc:	2340      	movs	r3, #64	@ 0x40
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80027ec:	2303      	movs	r3, #3
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	4829      	ldr	r0, [pc, #164]	@ (800289c <HAL_TIM_MspPostInit+0x140>)
 80027f8:	f005 fb8c 	bl	8007f14 <HAL_GPIO_Init>
}
 80027fc:	e042      	b.n	8002884 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_TIM_MspPostInit+0x144>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d11c      	bne.n	8002842 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	6313      	str	r3, [r2, #48]	@ 0x30
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002830:	2303      	movs	r3, #3
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	4818      	ldr	r0, [pc, #96]	@ (800289c <HAL_TIM_MspPostInit+0x140>)
 800283c:	f005 fb6a 	bl	8007f14 <HAL_GPIO_Init>
}
 8002840:	e020      	b.n	8002884 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_TIM_MspPostInit+0x148>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800284c:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	4a0f      	ldr	r2, [pc, #60]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 8002852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002856:	6313      	str	r3, [r2, #48]	@ 0x30
 8002858:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_TIM_MspPostInit+0x134>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002864:	2340      	movs	r3, #64	@ 0x40
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002874:	2309      	movs	r3, #9
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	480a      	ldr	r0, [pc, #40]	@ (80028a8 <HAL_TIM_MspPostInit+0x14c>)
 8002880:	f005 fb48 	bl	8007f14 <HAL_GPIO_Init>
}
 8002884:	bf00      	nop
 8002886:	3730      	adds	r7, #48	@ 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40000400 	.word	0x40000400
 8002890:	40023800 	.word	0x40023800
 8002894:	40020800 	.word	0x40020800
 8002898:	40014400 	.word	0x40014400
 800289c:	40021400 	.word	0x40021400
 80028a0:	40014800 	.word	0x40014800
 80028a4:	40001800 	.word	0x40001800
 80028a8:	40021c00 	.word	0x40021c00

080028ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0b2      	sub	sp, #200	@ 0xc8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	2290      	movs	r2, #144	@ 0x90
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00c fa52 	bl	800ed76 <memset>
  if(huart->Instance==UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad4 <HAL_UART_MspInit+0x228>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d15e      	bne.n	800299a <HAL_UART_MspInit+0xee>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80028dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80028e2:	2300      	movs	r3, #0
 80028e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f008 f994 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028f6:	f7ff f8f7 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028fa:	4b77      	ldr	r3, [pc, #476]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a76      	ldr	r2, [pc, #472]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002904:	6413      	str	r3, [r2, #64]	@ 0x40
 8002906:	4b74      	ldr	r3, [pc, #464]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	4b71      	ldr	r3, [pc, #452]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a70      	ldr	r2, [pc, #448]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800295c:	2308      	movs	r3, #8
 800295e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002966:	4619      	mov	r1, r3
 8002968:	485c      	ldr	r0, [pc, #368]	@ (8002adc <HAL_UART_MspInit+0x230>)
 800296a:	f005 fad3 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800296e:	2304      	movs	r3, #4
 8002970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002986:	2308      	movs	r3, #8
 8002988:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002990:	4619      	mov	r1, r3
 8002992:	4853      	ldr	r0, [pc, #332]	@ (8002ae0 <HAL_UART_MspInit+0x234>)
 8002994:	f005 fabe 	bl	8007f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002998:	e098      	b.n	8002acc <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a51      	ldr	r2, [pc, #324]	@ (8002ae4 <HAL_UART_MspInit+0x238>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d152      	bne.n	8002a4a <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029a4:	2340      	movs	r3, #64	@ 0x40
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029a8:	2300      	movs	r3, #0
 80029aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f008 f931 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80029bc:	f7ff f894 	bl	8001ae8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c0:	4b45      	ldr	r3, [pc, #276]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	4a44      	ldr	r2, [pc, #272]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80029cc:	4b42      	ldr	r3, [pc, #264]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	4a3e      	ldr	r2, [pc, #248]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80029f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4834      	ldr	r0, [pc, #208]	@ (8002ae8 <HAL_UART_MspInit+0x23c>)
 8002a18:	f005 fa7c 	bl	8007f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a36:	2307      	movs	r3, #7
 8002a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4829      	ldr	r0, [pc, #164]	@ (8002ae8 <HAL_UART_MspInit+0x23c>)
 8002a44:	f005 fa66 	bl	8007f14 <HAL_GPIO_Init>
}
 8002a48:	e040      	b.n	8002acc <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <HAL_UART_MspInit+0x240>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d13b      	bne.n	8002acc <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f008 f8d8 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002a6e:	f7ff f83b 	bl	8001ae8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a72:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	4a18      	ldr	r2, [pc, #96]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_UART_MspInit+0x22c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002aa2:	23c0      	movs	r3, #192	@ 0xc0
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002aba:	2308      	movs	r3, #8
 8002abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <HAL_UART_MspInit+0x230>)
 8002ac8:	f005 fa24 	bl	8007f14 <HAL_GPIO_Init>
}
 8002acc:	bf00      	nop
 8002ace:	37c8      	adds	r7, #200	@ 0xc8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40005000 	.word	0x40005000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40011400 	.word	0x40011400

08002af0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	@ 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002c78 <HAL_PCD_MspInit+0x188>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 80ae 	bne.w	8002c70 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b14:	4b59      	ldr	r3, [pc, #356]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	4a58      	ldr	r2, [pc, #352]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b20:	4b56      	ldr	r3, [pc, #344]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	4a52      	ldr	r2, [pc, #328]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b38:	4b50      	ldr	r3, [pc, #320]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b44:	4b4d      	ldr	r3, [pc, #308]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	4a4c      	ldr	r2, [pc, #304]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b50:	4b4a      	ldr	r3, [pc, #296]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5c:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	4a46      	ldr	r2, [pc, #280]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b68:	4b44      	ldr	r3, [pc, #272]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	4a40      	ldr	r2, [pc, #256]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b80:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002b8c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4835      	ldr	r0, [pc, #212]	@ (8002c80 <HAL_PCD_MspInit+0x190>)
 8002baa:	f005 f9b3 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002bae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bc0:	230a      	movs	r3, #10
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	482e      	ldr	r0, [pc, #184]	@ (8002c84 <HAL_PCD_MspInit+0x194>)
 8002bcc:	f005 f9a2 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002be0:	230a      	movs	r3, #10
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4827      	ldr	r0, [pc, #156]	@ (8002c88 <HAL_PCD_MspInit+0x198>)
 8002bec:	f005 f992 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c00:	230a      	movs	r3, #10
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4820      	ldr	r0, [pc, #128]	@ (8002c8c <HAL_PCD_MspInit+0x19c>)
 8002c0c:	f005 f982 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c10:	2328      	movs	r3, #40	@ 0x28
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c20:	230a      	movs	r3, #10
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4819      	ldr	r0, [pc, #100]	@ (8002c90 <HAL_PCD_MspInit+0x1a0>)
 8002c2c:	f005 f972 	bl	8007f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002c30:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_PCD_MspInit+0x18c>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	204d      	movs	r0, #77	@ 0x4d
 8002c66:	f002 fb9d 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002c6a:	204d      	movs	r0, #77	@ 0x4d
 8002c6c:	f002 fbb6 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002c70:	bf00      	nop
 8002c72:	3738      	adds	r7, #56	@ 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40040000 	.word	0x40040000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <HAL_FMC_MspInit+0x104>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d16f      	bne.n	8002d90 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002cb0:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <HAL_FMC_MspInit+0x104>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cb6:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <HAL_FMC_MspInit+0x108>)
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	4a38      	ldr	r2, [pc, #224]	@ (8002d9c <HAL_FMC_MspInit+0x108>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002cc2:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_FMC_MspInit+0x108>)
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002cce:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002cd2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	482d      	ldr	r0, [pc, #180]	@ (8002da0 <HAL_FMC_MspInit+0x10c>)
 8002cea:	f005 f913 	bl	8007f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8002cee:	f248 1337 	movw	r3, #33079	@ 0x8137
 8002cf2:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d00:	230c      	movs	r3, #12
 8002d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4826      	ldr	r0, [pc, #152]	@ (8002da4 <HAL_FMC_MspInit+0x110>)
 8002d0a:	f005 f903 	bl	8007f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002d0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002d12:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d20:	230c      	movs	r3, #12
 8002d22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	481f      	ldr	r0, [pc, #124]	@ (8002da8 <HAL_FMC_MspInit+0x114>)
 8002d2a:	f005 f8f3 	bl	8007f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002d2e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002d32:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d40:	230c      	movs	r3, #12
 8002d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4818      	ldr	r0, [pc, #96]	@ (8002dac <HAL_FMC_MspInit+0x118>)
 8002d4a:	f005 f8e3 	bl	8007f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002d4e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002d52:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d60:	230c      	movs	r3, #12
 8002d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4811      	ldr	r0, [pc, #68]	@ (8002db0 <HAL_FMC_MspInit+0x11c>)
 8002d6a:	f005 f8d3 	bl	8007f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8002d6e:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8002d72:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d80:	230c      	movs	r3, #12
 8002d82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	480a      	ldr	r0, [pc, #40]	@ (8002db4 <HAL_FMC_MspInit+0x120>)
 8002d8a:	f005 f8c3 	bl	8007f14 <HAL_GPIO_Init>
 8002d8e:	e000      	b.n	8002d92 <HAL_FMC_MspInit+0xfe>
    return;
 8002d90:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20001044 	.word	0x20001044
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021c00 	.word	0x40021c00

08002db8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002dc0:	f7ff ff68 	bl	8002c94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a48      	ldr	r2, [pc, #288]	@ (8002efc <HAL_SAI_MspInit+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d134      	bne.n	8002e48 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002dde:	4b48      	ldr	r3, [pc, #288]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002de6:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	4a46      	ldr	r2, [pc, #280]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002dec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df2:	4b44      	ldr	r3, [pc, #272]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002dfe:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a3e      	ldr	r2, [pc, #248]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002e06:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8002e08:	2370      	movs	r3, #112	@ 0x70
 8002e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e18:	2306      	movs	r3, #6
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	4839      	ldr	r0, [pc, #228]	@ (8002f08 <HAL_SAI_MspInit+0x13c>)
 8002e24:	f005 f876 	bl	8007f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e38:	2306      	movs	r3, #6
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	4832      	ldr	r0, [pc, #200]	@ (8002f0c <HAL_SAI_MspInit+0x140>)
 8002e44:	f005 f866 	bl	8007f14 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <HAL_SAI_MspInit+0x144>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d124      	bne.n	8002e9c <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e66:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <HAL_SAI_MspInit+0x134>)
 8002e7a:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e8c:	2306      	movs	r3, #6
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	481c      	ldr	r0, [pc, #112]	@ (8002f08 <HAL_SAI_MspInit+0x13c>)
 8002e98:	f005 f83c 	bl	8007f14 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_SAI_MspInit+0x148>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d125      	bne.n	8002ef2 <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <HAL_SAI_MspInit+0x14c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002eb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eba:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_SAI_MspInit+0x138>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002ec6:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_SAI_MspInit+0x14c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <HAL_SAI_MspInit+0x14c>)
 8002ece:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8002ed0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	480b      	ldr	r0, [pc, #44]	@ (8002f1c <HAL_SAI_MspInit+0x150>)
 8002eee:	f005 f811 	bl	8007f14 <HAL_GPIO_Init>

    }
}
 8002ef2:	bf00      	nop
 8002ef4:	3728      	adds	r7, #40	@ 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40015804 	.word	0x40015804
 8002f00:	20001048 	.word	0x20001048
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40015824 	.word	0x40015824
 8002f14:	40015c04 	.word	0x40015c04
 8002f18:	2000104c 	.word	0x2000104c
 8002f1c:	40020c00 	.word	0x40020c00

08002f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	@ 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f30:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <HAL_InitTick+0xe0>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <HAL_InitTick+0xe0>)
 8002f36:	f043 0310 	orr.w	r3, r3, #16
 8002f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3c:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <HAL_InitTick+0xe0>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f48:	f107 0210 	add.w	r2, r7, #16
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f007 fe2e 	bl	800abb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f62:	f007 fdff 	bl	800ab64 <HAL_RCC_GetPCLK1Freq>
 8002f66:	6378      	str	r0, [r7, #52]	@ 0x34
 8002f68:	e004      	b.n	8002f74 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f6a:	f007 fdfb 	bl	800ab64 <HAL_RCC_GetPCLK1Freq>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	4a23      	ldr	r2, [pc, #140]	@ (8003004 <HAL_InitTick+0xe4>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f82:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_InitTick+0xe8>)
 8002f84:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_InitTick+0xec>)
 8002f86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <HAL_InitTick+0xe8>)
 8002f8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_InitTick+0xe8>)
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <HAL_InitTick+0xe8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <HAL_InitTick+0xe8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa2:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_InitTick+0xe8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002fa8:	4817      	ldr	r0, [pc, #92]	@ (8003008 <HAL_InitTick+0xe8>)
 8002faa:	f009 fa86 	bl	800c4ba <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11b      	bne.n	8002ff4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002fbc:	4812      	ldr	r0, [pc, #72]	@ (8003008 <HAL_InitTick+0xe8>)
 8002fbe:	f009 fad3 	bl	800c568 <HAL_TIM_Base_Start_IT>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002fc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fd0:	2036      	movs	r0, #54	@ 0x36
 8002fd2:	f002 fa03 	bl	80053dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d808      	bhi.n	8002fee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	2036      	movs	r0, #54	@ 0x36
 8002fe2:	f002 f9df 	bl	80053a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_InitTick+0xf0>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e002      	b.n	8002ff4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3738      	adds	r7, #56	@ 0x38
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	431bde83 	.word	0x431bde83
 8003008:	20001050 	.word	0x20001050
 800300c:	40001000 	.word	0x40001000
 8003010:	20000018 	.word	0x20000018

08003014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <NMI_Handler+0x4>

0800301c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <MemManage_Handler+0x4>

0800302c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <UsageFault_Handler+0x4>

0800303c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <TIM6_DAC_IRQHandler+0x10>)
 800307a:	f009 fb44 	bl	800c706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20001050 	.word	0x20001050

08003088 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <OTG_HS_IRQHandler+0x10>)
 800308e:	f006 f817 	bl	80090c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000b14 	.word	0x20000b14

0800309c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80030a0:	4802      	ldr	r0, [pc, #8]	@ (80030ac <LTDC_IRQHandler+0x10>)
 80030a2:	f005 fc0d 	bl	80088c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200004b0 	.word	0x200004b0

080030b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80030b4:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <DMA2D_IRQHandler+0x10>)
 80030b6:	f002 fed7 	bl	8005e68 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200002a0 	.word	0x200002a0

080030c4 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 80030c8:	4802      	ldr	r0, [pc, #8]	@ (80030d4 <CEC_IRQHandler+0x10>)
 80030ca:	f001 ff94 	bl	8004ff6 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200003c4 	.word	0x200003c4

080030d8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80030dc:	4802      	ldr	r0, [pc, #8]	@ (80030e8 <DSI_IRQHandler+0x10>)
 80030de:	f003 fc05 	bl	80068ec <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200002f8 	.word	0x200002f8

080030ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <SystemInit+0x20>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	4a05      	ldr	r2, [pc, #20]	@ (800310c <SystemInit+0x20>)
 80030f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003148 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003114:	f7ff ffea 	bl	80030ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003118:	480c      	ldr	r0, [pc, #48]	@ (800314c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800311a:	490d      	ldr	r1, [pc, #52]	@ (8003150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800311c:	4a0d      	ldr	r2, [pc, #52]	@ (8003154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003120:	e002      	b.n	8003128 <LoopCopyDataInit>

08003122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003126:	3304      	adds	r3, #4

08003128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800312a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800312c:	d3f9      	bcc.n	8003122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800312e:	4a0a      	ldr	r2, [pc, #40]	@ (8003158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003130:	4c0a      	ldr	r4, [pc, #40]	@ (800315c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003134:	e001      	b.n	800313a <LoopFillZerobss>

08003136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003138:	3204      	adds	r2, #4

0800313a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800313a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800313c:	d3fb      	bcc.n	8003136 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800313e:	f00b fe23 	bl	800ed88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003142:	f7fd f9f1 	bl	8000528 <main>
  bx  lr    
 8003146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003148:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800314c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003150:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003154:	08010b38 	.word	0x08010b38
  ldr r2, =_sbss
 8003158:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800315c:	200013bc 	.word	0x200013bc

08003160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003160:	e7fe      	b.n	8003160 <ADC_IRQHandler>
	...

08003164 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b0b2      	sub	sp, #200	@ 0xc8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 800316e:	2078      	movs	r0, #120	@ 0x78
 8003170:	f000 fc73 	bl	8003a5a <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8003174:	4ac8      	ldr	r2, [pc, #800]	@ (8003498 <NT35510_Init+0x334>)
 8003176:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800317a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800317e:	6018      	str	r0, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8003184:	4bc5      	ldr	r3, [pc, #788]	@ (800349c <NT35510_Init+0x338>)
 8003186:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800318a:	4bc5      	ldr	r3, [pc, #788]	@ (80034a0 <NT35510_Init+0x33c>)
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8003190:	4bc4      	ldr	r3, [pc, #784]	@ (80034a4 <NT35510_Init+0x340>)
 8003192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8003196:	4bc4      	ldr	r3, [pc, #784]	@ (80034a8 <NT35510_Init+0x344>)
 8003198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 800319c:	4bc3      	ldr	r3, [pc, #780]	@ (80034ac <NT35510_Init+0x348>)
 800319e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80031a2:	4bc3      	ldr	r3, [pc, #780]	@ (80034b0 <NT35510_Init+0x34c>)
 80031a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80031a8:	f240 13bf 	movw	r3, #447	@ 0x1bf
 80031ac:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80031b0:	4bc0      	ldr	r3, [pc, #768]	@ (80034b4 <NT35510_Init+0x350>)
 80031b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80031b6:	4bc0      	ldr	r3, [pc, #768]	@ (80034b8 <NT35510_Init+0x354>)
 80031b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80031bc:	4bbf      	ldr	r3, [pc, #764]	@ (80034bc <NT35510_Init+0x358>)
 80031be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80031c2:	4bbf      	ldr	r3, [pc, #764]	@ (80034c0 <NT35510_Init+0x35c>)
 80031c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 80031c8:	4bbe      	ldr	r3, [pc, #760]	@ (80034c4 <NT35510_Init+0x360>)
 80031ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 80031ce:	4bbe      	ldr	r3, [pc, #760]	@ (80034c8 <NT35510_Init+0x364>)
 80031d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 80031d4:	4abd      	ldr	r2, [pc, #756]	@ (80034cc <NT35510_Init+0x368>)
 80031d6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	4611      	mov	r1, r2
 80031de:	8019      	strh	r1, [r3, #0]
 80031e0:	3302      	adds	r3, #2
 80031e2:	0c12      	lsrs	r2, r2, #16
 80031e4:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 80031e6:	4aba      	ldr	r2, [pc, #744]	@ (80034d0 <NT35510_Init+0x36c>)
 80031e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80031ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f0:	6018      	str	r0, [r3, #0]
 80031f2:	3304      	adds	r3, #4
 80031f4:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 80031f6:	4ab7      	ldr	r2, [pc, #732]	@ (80034d4 <NT35510_Init+0x370>)
 80031f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4611      	mov	r1, r2
 8003200:	8019      	strh	r1, [r3, #0]
 8003202:	3302      	adds	r3, #2
 8003204:	0c12      	lsrs	r2, r2, #16
 8003206:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8003208:	f240 33b6 	movw	r3, #950	@ 0x3b6
 800320c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x50};
 8003210:	f245 03b5 	movw	r3, #20661	@ 0x50b5
 8003214:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8003218:	4aaf      	ldr	r2, [pc, #700]	@ (80034d8 <NT35510_Init+0x374>)
 800321a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4611      	mov	r1, r2
 8003222:	8019      	strh	r1, [r3, #0]
 8003224:	3302      	adds	r3, #2
 8003226:	0c12      	lsrs	r2, r2, #16
 8003228:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 800322a:	4aac      	ldr	r2, [pc, #688]	@ (80034dc <NT35510_Init+0x378>)
 800322c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	3304      	adds	r3, #4
 8003238:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 800323a:	f04f 433c 	mov.w	r3, #3154116608	@ 0xbc000000
 800323e:	667b      	str	r3, [r7, #100]	@ 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8003240:	4ba7      	ldr	r3, [pc, #668]	@ (80034e0 <NT35510_Init+0x37c>)
 8003242:	663b      	str	r3, [r7, #96]	@ 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8003244:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 8003248:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 800324c:	2336      	movs	r3, #54	@ 0x36
 800324e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8003252:	4aa4      	ldr	r2, [pc, #656]	@ (80034e4 <NT35510_Init+0x380>)
 8003254:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800325c:	6018      	str	r0, [r3, #0]
 800325e:	3304      	adds	r3, #4
 8003260:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8003262:	4aa1      	ldr	r2, [pc, #644]	@ (80034e8 <NT35510_Init+0x384>)
 8003264:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800326c:	6018      	str	r0, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8003272:	f246 0336 	movw	r3, #24630	@ 0x6036
 8003276:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 800327a:	4a9c      	ldr	r2, [pc, #624]	@ (80034ec <NT35510_Init+0x388>)
 800327c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003284:	6018      	str	r0, [r3, #0]
 8003286:	3304      	adds	r3, #4
 8003288:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 800328a:	4a99      	ldr	r2, [pc, #612]	@ (80034f0 <NT35510_Init+0x38c>)
 800328c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003294:	6018      	str	r0, [r3, #0]
 8003296:	3304      	adds	r3, #4
 8003298:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 800329a:	2335      	movs	r3, #53	@ 0x35
 800329c:	863b      	strh	r3, [r7, #48]	@ 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 800329e:	2311      	movs	r3, #17
 80032a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80032a2:	2329      	movs	r3, #41	@ 0x29
 80032a4:	853b      	strh	r3, [r7, #40]	@ 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80032a6:	f647 7351 	movw	r3, #32593	@ 0x7f51
 80032aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80032ac:	f642 4353 	movw	r3, #11347	@ 0x2c53
 80032b0:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80032b2:	f240 2355 	movw	r3, #597	@ 0x255
 80032b6:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 80032b8:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 80032bc:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 80032be:	232c      	movs	r3, #44	@ 0x2c
 80032c0:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 80032c2:	f245 533a 	movw	r3, #21818	@ 0x553a
 80032c6:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 80032c8:	f247 733a 	movw	r3, #30522	@ 0x773a
 80032cc:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 80032ce:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80032d2:	4619      	mov	r1, r3
 80032d4:	2005      	movs	r0, #5
 80032d6:	f000 ff9d 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 80032da:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80032de:	4619      	mov	r1, r3
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 ff97 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 80032e6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80032ea:	4619      	mov	r1, r3
 80032ec:	2003      	movs	r0, #3
 80032ee:	f000 ff91 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 80032f2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80032f6:	4619      	mov	r1, r3
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 ff8b 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 80032fe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003302:	4619      	mov	r1, r3
 8003304:	2003      	movs	r0, #3
 8003306:	f000 ff85 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 800330a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800330e:	4619      	mov	r1, r3
 8003310:	2003      	movs	r0, #3
 8003312:	f000 ff7f 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8003316:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800331a:	4619      	mov	r1, r3
 800331c:	2003      	movs	r0, #3
 800331e:	f000 ff79 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8003322:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003326:	4619      	mov	r1, r3
 8003328:	2001      	movs	r0, #1
 800332a:	f000 ff73 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800332e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003332:	4619      	mov	r1, r3
 8003334:	2003      	movs	r0, #3
 8003336:	f000 ff6d 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 800333a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800333e:	4619      	mov	r1, r3
 8003340:	2003      	movs	r0, #3
 8003342:	f000 ff67 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8003346:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800334a:	4619      	mov	r1, r3
 800334c:	2003      	movs	r0, #3
 800334e:	f000 ff61 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8003352:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003356:	4619      	mov	r1, r3
 8003358:	2003      	movs	r0, #3
 800335a:	f000 ff5b 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800335e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003362:	4619      	mov	r1, r3
 8003364:	2003      	movs	r0, #3
 8003366:	f000 ff55 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 800336a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800336e:	4619      	mov	r1, r3
 8003370:	2003      	movs	r0, #3
 8003372:	f000 ff4f 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8003376:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800337a:	4619      	mov	r1, r3
 800337c:	2002      	movs	r0, #2
 800337e:	f000 ff49 	bl	8004214 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8003382:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003386:	4619      	mov	r1, r3
 8003388:	2005      	movs	r0, #5
 800338a:	f000 ff43 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800338e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003392:	4619      	mov	r1, r3
 8003394:	2002      	movs	r0, #2
 8003396:	f000 ff3d 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 800339a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800339e:	4619      	mov	r1, r3
 80033a0:	2001      	movs	r0, #1
 80033a2:	f000 ff37 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80033a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80033aa:	4619      	mov	r1, r3
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 ff31 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80033b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80033b6:	4619      	mov	r1, r3
 80033b8:	2002      	movs	r0, #2
 80033ba:	f000 ff2b 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80033be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80033c2:	4619      	mov	r1, r3
 80033c4:	2004      	movs	r0, #4
 80033c6:	f000 ff25 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80033ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033ce:	4619      	mov	r1, r3
 80033d0:	2003      	movs	r0, #3
 80033d2:	f000 ff1f 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80033d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80033da:	4619      	mov	r1, r3
 80033dc:	2003      	movs	r0, #3
 80033de:	f000 ff19 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80033e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033e6:	4619      	mov	r1, r3
 80033e8:	2001      	movs	r0, #1
 80033ea:	f000 ff13 	bl	8004214 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80033ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033f2:	4619      	mov	r1, r3
 80033f4:	2000      	movs	r0, #0
 80033f6:	f000 ff0d 	bl	8004214 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4619      	mov	r1, r3
 8003400:	2000      	movs	r0, #0
 8003402:	f000 ff07 	bl	8004214 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8003406:	20c8      	movs	r0, #200	@ 0xc8
 8003408:	f000 fb27 	bl	8003a5a <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d112      	bne.n	8003438 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8003412:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003416:	4619      	mov	r1, r3
 8003418:	2001      	movs	r0, #1
 800341a:	f000 fefb 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800341e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003422:	4619      	mov	r1, r3
 8003424:	2004      	movs	r0, #4
 8003426:	f000 fef5 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 800342a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800342e:	4619      	mov	r1, r3
 8003430:	2004      	movs	r0, #4
 8003432:	f000 feef 	bl	8004214 <DSI_IO_WriteCmd>
 8003436:	e011      	b.n	800345c <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8003438:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800343c:	4619      	mov	r1, r3
 800343e:	2001      	movs	r0, #1
 8003440:	f000 fee8 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8003444:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003448:	4619      	mov	r1, r3
 800344a:	2004      	movs	r0, #4
 800344c:	f000 fee2 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8003450:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003454:	4619      	mov	r1, r3
 8003456:	2004      	movs	r0, #4
 8003458:	f000 fedc 	bl	8004214 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 800345c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	2000      	movs	r0, #0
 8003464:	f000 fed6 	bl	8004214 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8003468:	2078      	movs	r0, #120	@ 0x78
 800346a:	f000 faf6 	bl	8003a5a <NT35510_IO_Delay>

  switch(ColorCoding)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <NT35510_Init+0x324>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d13c      	bne.n	80034f4 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	4619      	mov	r1, r3
 8003480:	2001      	movs	r0, #1
 8003482:	f000 fec7 	bl	8004214 <DSI_IO_WriteCmd>
      break;
 8003486:	e03c      	b.n	8003502 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	2001      	movs	r0, #1
 8003490:	f000 fec0 	bl	8004214 <DSI_IO_WriteCmd>
      break;
 8003494:	e035      	b.n	8003502 <NT35510_Init+0x39e>
 8003496:	bf00      	nop
 8003498:	0800edf8 	.word	0x0800edf8
 800349c:	b0030303 	.word	0xb0030303
 80034a0:	b6464646 	.word	0xb6464646
 80034a4:	b1030303 	.word	0xb1030303
 80034a8:	b7363636 	.word	0xb7363636
 80034ac:	b2020000 	.word	0xb2020000
 80034b0:	b8262626 	.word	0xb8262626
 80034b4:	b3090909 	.word	0xb3090909
 80034b8:	b9363636 	.word	0xb9363636
 80034bc:	b5080808 	.word	0xb5080808
 80034c0:	ba262626 	.word	0xba262626
 80034c4:	bc008000 	.word	0xbc008000
 80034c8:	bd008000 	.word	0xbd008000
 80034cc:	0800ee00 	.word	0x0800ee00
 80034d0:	0800ee04 	.word	0x0800ee04
 80034d4:	0800ee0c 	.word	0x0800ee0c
 80034d8:	0800ee10 	.word	0x0800ee10
 80034dc:	0800ee14 	.word	0x0800ee14
 80034e0:	cc000003 	.word	0xcc000003
 80034e4:	0800ee1c 	.word	0x0800ee1c
 80034e8:	0800ee24 	.word	0x0800ee24
 80034ec:	0800ee2c 	.word	0x0800ee2c
 80034f0:	0800ee34 	.word	0x0800ee34
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	4619      	mov	r1, r3
 80034fa:	2001      	movs	r0, #1
 80034fc:	f000 fe8a 	bl	8004214 <DSI_IO_WriteCmd>
      break;
 8003500:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8003502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	2001      	movs	r0, #1
 800350a:	f000 fe83 	bl	8004214 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	4619      	mov	r1, r3
 8003514:	2001      	movs	r0, #1
 8003516:	f000 fe7d 	bl	8004214 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	4619      	mov	r1, r3
 8003520:	2001      	movs	r0, #1
 8003522:	f000 fe77 	bl	8004214 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8003526:	f107 0318 	add.w	r3, r7, #24
 800352a:	4619      	mov	r1, r3
 800352c:	2001      	movs	r0, #1
 800352e:	f000 fe71 	bl	8004214 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8003532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003536:	4619      	mov	r1, r3
 8003538:	2000      	movs	r0, #0
 800353a:	f000 fe6b 	bl	8004214 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	2000      	movs	r0, #0
 8003546:	f000 fe65 	bl	8004214 <DSI_IO_WriteCmd>

  return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	37c8      	adds	r7, #200	@ 0xc8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <NT35510_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t NT35510_ReadID(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 800355a:	2300      	movs	r3, #0
 800355c:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(NT35510_CMD_RDID2, &pData, 1);
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	2201      	movs	r2, #1
 8003562:	4619      	mov	r1, r3
 8003564:	20db      	movs	r0, #219	@ 0xdb
 8003566:	f000 fe7f 	bl	8004268 <DSI_IO_ReadCmd>
  return pData;
 800356a:	79fb      	ldrb	r3, [r7, #7]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800357e:	49c1      	ldr	r1, [pc, #772]	@ (8003884 <OTM8009A_Init+0x310>)
 8003580:	2000      	movs	r0, #0
 8003582:	f000 fe47 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8003586:	49c0      	ldr	r1, [pc, #768]	@ (8003888 <OTM8009A_Init+0x314>)
 8003588:	2003      	movs	r0, #3
 800358a:	f000 fe43 	bl	8004214 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800358e:	49bf      	ldr	r1, [pc, #764]	@ (800388c <OTM8009A_Init+0x318>)
 8003590:	2000      	movs	r0, #0
 8003592:	f000 fe3f 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8003596:	49be      	ldr	r1, [pc, #760]	@ (8003890 <OTM8009A_Init+0x31c>)
 8003598:	2002      	movs	r0, #2
 800359a:	f000 fe3b 	bl	8004214 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800359e:	49bb      	ldr	r1, [pc, #748]	@ (800388c <OTM8009A_Init+0x318>)
 80035a0:	2000      	movs	r0, #0
 80035a2:	f000 fe37 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80035a6:	49bb      	ldr	r1, [pc, #748]	@ (8003894 <OTM8009A_Init+0x320>)
 80035a8:	2000      	movs	r0, #0
 80035aa:	f000 fe33 	bl	8004214 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80035ae:	200a      	movs	r0, #10
 80035b0:	f000 fa48 	bl	8003a44 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80035b4:	49b8      	ldr	r1, [pc, #736]	@ (8003898 <OTM8009A_Init+0x324>)
 80035b6:	2000      	movs	r0, #0
 80035b8:	f000 fe2c 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80035bc:	49b7      	ldr	r1, [pc, #732]	@ (800389c <OTM8009A_Init+0x328>)
 80035be:	2000      	movs	r0, #0
 80035c0:	f000 fe28 	bl	8004214 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80035c4:	200a      	movs	r0, #10
 80035c6:	f000 fa3d 	bl	8003a44 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80035ca:	49b5      	ldr	r1, [pc, #724]	@ (80038a0 <OTM8009A_Init+0x32c>)
 80035cc:	2000      	movs	r0, #0
 80035ce:	f000 fe21 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80035d2:	49b4      	ldr	r1, [pc, #720]	@ (80038a4 <OTM8009A_Init+0x330>)
 80035d4:	2000      	movs	r0, #0
 80035d6:	f000 fe1d 	bl	8004214 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80035da:	49b3      	ldr	r1, [pc, #716]	@ (80038a8 <OTM8009A_Init+0x334>)
 80035dc:	2000      	movs	r0, #0
 80035de:	f000 fe19 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80035e2:	49b2      	ldr	r1, [pc, #712]	@ (80038ac <OTM8009A_Init+0x338>)
 80035e4:	2000      	movs	r0, #0
 80035e6:	f000 fe15 	bl	8004214 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80035ea:	49b1      	ldr	r1, [pc, #708]	@ (80038b0 <OTM8009A_Init+0x33c>)
 80035ec:	2000      	movs	r0, #0
 80035ee:	f000 fe11 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80035f2:	49b0      	ldr	r1, [pc, #704]	@ (80038b4 <OTM8009A_Init+0x340>)
 80035f4:	2000      	movs	r0, #0
 80035f6:	f000 fe0d 	bl	8004214 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80035fa:	49a2      	ldr	r1, [pc, #648]	@ (8003884 <OTM8009A_Init+0x310>)
 80035fc:	2000      	movs	r0, #0
 80035fe:	f000 fe09 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8003602:	49ad      	ldr	r1, [pc, #692]	@ (80038b8 <OTM8009A_Init+0x344>)
 8003604:	2000      	movs	r0, #0
 8003606:	f000 fe05 	bl	8004214 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800360a:	49ac      	ldr	r1, [pc, #688]	@ (80038bc <OTM8009A_Init+0x348>)
 800360c:	2000      	movs	r0, #0
 800360e:	f000 fe01 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8003612:	49ab      	ldr	r1, [pc, #684]	@ (80038c0 <OTM8009A_Init+0x34c>)
 8003614:	2000      	movs	r0, #0
 8003616:	f000 fdfd 	bl	8004214 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800361a:	49aa      	ldr	r1, [pc, #680]	@ (80038c4 <OTM8009A_Init+0x350>)
 800361c:	2000      	movs	r0, #0
 800361e:	f000 fdf9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8003622:	49a9      	ldr	r1, [pc, #676]	@ (80038c8 <OTM8009A_Init+0x354>)
 8003624:	2000      	movs	r0, #0
 8003626:	f000 fdf5 	bl	8004214 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800362a:	49a8      	ldr	r1, [pc, #672]	@ (80038cc <OTM8009A_Init+0x358>)
 800362c:	2000      	movs	r0, #0
 800362e:	f000 fdf1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8003632:	49a7      	ldr	r1, [pc, #668]	@ (80038d0 <OTM8009A_Init+0x35c>)
 8003634:	2000      	movs	r0, #0
 8003636:	f000 fded 	bl	8004214 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800363a:	49a6      	ldr	r1, [pc, #664]	@ (80038d4 <OTM8009A_Init+0x360>)
 800363c:	2000      	movs	r0, #0
 800363e:	f000 fde9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8003642:	499a      	ldr	r1, [pc, #616]	@ (80038ac <OTM8009A_Init+0x338>)
 8003644:	2000      	movs	r0, #0
 8003646:	f000 fde5 	bl	8004214 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800364a:	498e      	ldr	r1, [pc, #568]	@ (8003884 <OTM8009A_Init+0x310>)
 800364c:	2000      	movs	r0, #0
 800364e:	f000 fde1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8003652:	49a1      	ldr	r1, [pc, #644]	@ (80038d8 <OTM8009A_Init+0x364>)
 8003654:	2002      	movs	r0, #2
 8003656:	f000 fddd 	bl	8004214 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800365a:	49a0      	ldr	r1, [pc, #640]	@ (80038dc <OTM8009A_Init+0x368>)
 800365c:	2000      	movs	r0, #0
 800365e:	f000 fdd9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8003662:	499f      	ldr	r1, [pc, #636]	@ (80038e0 <OTM8009A_Init+0x36c>)
 8003664:	2000      	movs	r0, #0
 8003666:	f000 fdd5 	bl	8004214 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800366a:	499e      	ldr	r1, [pc, #632]	@ (80038e4 <OTM8009A_Init+0x370>)
 800366c:	2000      	movs	r0, #0
 800366e:	f000 fdd1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8003672:	499d      	ldr	r1, [pc, #628]	@ (80038e8 <OTM8009A_Init+0x374>)
 8003674:	2000      	movs	r0, #0
 8003676:	f000 fdcd 	bl	8004214 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800367a:	499c      	ldr	r1, [pc, #624]	@ (80038ec <OTM8009A_Init+0x378>)
 800367c:	2000      	movs	r0, #0
 800367e:	f000 fdc9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8003682:	499b      	ldr	r1, [pc, #620]	@ (80038f0 <OTM8009A_Init+0x37c>)
 8003684:	2000      	movs	r0, #0
 8003686:	f000 fdc5 	bl	8004214 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800368a:	498c      	ldr	r1, [pc, #560]	@ (80038bc <OTM8009A_Init+0x348>)
 800368c:	2000      	movs	r0, #0
 800368e:	f000 fdc1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8003692:	4998      	ldr	r1, [pc, #608]	@ (80038f4 <OTM8009A_Init+0x380>)
 8003694:	2000      	movs	r0, #0
 8003696:	f000 fdbd 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800369a:	498a      	ldr	r1, [pc, #552]	@ (80038c4 <OTM8009A_Init+0x350>)
 800369c:	2000      	movs	r0, #0
 800369e:	f000 fdb9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80036a2:	4995      	ldr	r1, [pc, #596]	@ (80038f8 <OTM8009A_Init+0x384>)
 80036a4:	2000      	movs	r0, #0
 80036a6:	f000 fdb5 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80036aa:	4994      	ldr	r1, [pc, #592]	@ (80038fc <OTM8009A_Init+0x388>)
 80036ac:	2000      	movs	r0, #0
 80036ae:	f000 fdb1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80036b2:	4993      	ldr	r1, [pc, #588]	@ (8003900 <OTM8009A_Init+0x38c>)
 80036b4:	2002      	movs	r0, #2
 80036b6:	f000 fdad 	bl	8004214 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80036ba:	4974      	ldr	r1, [pc, #464]	@ (800388c <OTM8009A_Init+0x318>)
 80036bc:	2000      	movs	r0, #0
 80036be:	f000 fda9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80036c2:	4990      	ldr	r1, [pc, #576]	@ (8003904 <OTM8009A_Init+0x390>)
 80036c4:	2006      	movs	r0, #6
 80036c6:	f000 fda5 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80036ca:	498f      	ldr	r1, [pc, #572]	@ (8003908 <OTM8009A_Init+0x394>)
 80036cc:	2000      	movs	r0, #0
 80036ce:	f000 fda1 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80036d2:	498e      	ldr	r1, [pc, #568]	@ (800390c <OTM8009A_Init+0x398>)
 80036d4:	200e      	movs	r0, #14
 80036d6:	f000 fd9d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80036da:	498d      	ldr	r1, [pc, #564]	@ (8003910 <OTM8009A_Init+0x39c>)
 80036dc:	2000      	movs	r0, #0
 80036de:	f000 fd99 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80036e2:	498c      	ldr	r1, [pc, #560]	@ (8003914 <OTM8009A_Init+0x3a0>)
 80036e4:	200e      	movs	r0, #14
 80036e6:	f000 fd95 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80036ea:	498b      	ldr	r1, [pc, #556]	@ (8003918 <OTM8009A_Init+0x3a4>)
 80036ec:	2000      	movs	r0, #0
 80036ee:	f000 fd91 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80036f2:	498a      	ldr	r1, [pc, #552]	@ (800391c <OTM8009A_Init+0x3a8>)
 80036f4:	200a      	movs	r0, #10
 80036f6:	f000 fd8d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80036fa:	4989      	ldr	r1, [pc, #548]	@ (8003920 <OTM8009A_Init+0x3ac>)
 80036fc:	2000      	movs	r0, #0
 80036fe:	f000 fd89 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8003702:	4988      	ldr	r1, [pc, #544]	@ (8003924 <OTM8009A_Init+0x3b0>)
 8003704:	2000      	movs	r0, #0
 8003706:	f000 fd85 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800370a:	4960      	ldr	r1, [pc, #384]	@ (800388c <OTM8009A_Init+0x318>)
 800370c:	2000      	movs	r0, #0
 800370e:	f000 fd81 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8003712:	4985      	ldr	r1, [pc, #532]	@ (8003928 <OTM8009A_Init+0x3b4>)
 8003714:	200a      	movs	r0, #10
 8003716:	f000 fd7d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800371a:	4984      	ldr	r1, [pc, #528]	@ (800392c <OTM8009A_Init+0x3b8>)
 800371c:	2000      	movs	r0, #0
 800371e:	f000 fd79 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8003722:	4983      	ldr	r1, [pc, #524]	@ (8003930 <OTM8009A_Init+0x3bc>)
 8003724:	200f      	movs	r0, #15
 8003726:	f000 fd75 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800372a:	4977      	ldr	r1, [pc, #476]	@ (8003908 <OTM8009A_Init+0x394>)
 800372c:	2000      	movs	r0, #0
 800372e:	f000 fd71 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8003732:	4980      	ldr	r1, [pc, #512]	@ (8003934 <OTM8009A_Init+0x3c0>)
 8003734:	200f      	movs	r0, #15
 8003736:	f000 fd6d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800373a:	4975      	ldr	r1, [pc, #468]	@ (8003910 <OTM8009A_Init+0x39c>)
 800373c:	2000      	movs	r0, #0
 800373e:	f000 fd69 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8003742:	497d      	ldr	r1, [pc, #500]	@ (8003938 <OTM8009A_Init+0x3c4>)
 8003744:	200a      	movs	r0, #10
 8003746:	f000 fd65 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800374a:	4973      	ldr	r1, [pc, #460]	@ (8003918 <OTM8009A_Init+0x3a4>)
 800374c:	2000      	movs	r0, #0
 800374e:	f000 fd61 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8003752:	497a      	ldr	r1, [pc, #488]	@ (800393c <OTM8009A_Init+0x3c8>)
 8003754:	200f      	movs	r0, #15
 8003756:	f000 fd5d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800375a:	4971      	ldr	r1, [pc, #452]	@ (8003920 <OTM8009A_Init+0x3ac>)
 800375c:	2000      	movs	r0, #0
 800375e:	f000 fd59 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8003762:	4977      	ldr	r1, [pc, #476]	@ (8003940 <OTM8009A_Init+0x3cc>)
 8003764:	200f      	movs	r0, #15
 8003766:	f000 fd55 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800376a:	4976      	ldr	r1, [pc, #472]	@ (8003944 <OTM8009A_Init+0x3d0>)
 800376c:	2000      	movs	r0, #0
 800376e:	f000 fd51 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8003772:	4975      	ldr	r1, [pc, #468]	@ (8003948 <OTM8009A_Init+0x3d4>)
 8003774:	200a      	movs	r0, #10
 8003776:	f000 fd4d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800377a:	4974      	ldr	r1, [pc, #464]	@ (800394c <OTM8009A_Init+0x3d8>)
 800377c:	2000      	movs	r0, #0
 800377e:	f000 fd49 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8003782:	4973      	ldr	r1, [pc, #460]	@ (8003950 <OTM8009A_Init+0x3dc>)
 8003784:	200a      	movs	r0, #10
 8003786:	f000 fd45 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800378a:	4940      	ldr	r1, [pc, #256]	@ (800388c <OTM8009A_Init+0x318>)
 800378c:	2000      	movs	r0, #0
 800378e:	f000 fd41 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8003792:	4970      	ldr	r1, [pc, #448]	@ (8003954 <OTM8009A_Init+0x3e0>)
 8003794:	200a      	movs	r0, #10
 8003796:	f000 fd3d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800379a:	4964      	ldr	r1, [pc, #400]	@ (800392c <OTM8009A_Init+0x3b8>)
 800379c:	2000      	movs	r0, #0
 800379e:	f000 fd39 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80037a2:	496d      	ldr	r1, [pc, #436]	@ (8003958 <OTM8009A_Init+0x3e4>)
 80037a4:	200f      	movs	r0, #15
 80037a6:	f000 fd35 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80037aa:	4957      	ldr	r1, [pc, #348]	@ (8003908 <OTM8009A_Init+0x394>)
 80037ac:	2000      	movs	r0, #0
 80037ae:	f000 fd31 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80037b2:	496a      	ldr	r1, [pc, #424]	@ (800395c <OTM8009A_Init+0x3e8>)
 80037b4:	200f      	movs	r0, #15
 80037b6:	f000 fd2d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80037ba:	4955      	ldr	r1, [pc, #340]	@ (8003910 <OTM8009A_Init+0x39c>)
 80037bc:	2000      	movs	r0, #0
 80037be:	f000 fd29 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80037c2:	4967      	ldr	r1, [pc, #412]	@ (8003960 <OTM8009A_Init+0x3ec>)
 80037c4:	200a      	movs	r0, #10
 80037c6:	f000 fd25 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80037ca:	4953      	ldr	r1, [pc, #332]	@ (8003918 <OTM8009A_Init+0x3a4>)
 80037cc:	2000      	movs	r0, #0
 80037ce:	f000 fd21 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80037d2:	4964      	ldr	r1, [pc, #400]	@ (8003964 <OTM8009A_Init+0x3f0>)
 80037d4:	200f      	movs	r0, #15
 80037d6:	f000 fd1d 	bl	8004214 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80037da:	4951      	ldr	r1, [pc, #324]	@ (8003920 <OTM8009A_Init+0x3ac>)
 80037dc:	2000      	movs	r0, #0
 80037de:	f000 fd19 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80037e2:	4961      	ldr	r1, [pc, #388]	@ (8003968 <OTM8009A_Init+0x3f4>)
 80037e4:	200f      	movs	r0, #15
 80037e6:	f000 fd15 	bl	8004214 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80037ea:	4934      	ldr	r1, [pc, #208]	@ (80038bc <OTM8009A_Init+0x348>)
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 fd11 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80037f2:	495e      	ldr	r1, [pc, #376]	@ (800396c <OTM8009A_Init+0x3f8>)
 80037f4:	2000      	movs	r0, #0
 80037f6:	f000 fd0d 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80037fa:	495d      	ldr	r1, [pc, #372]	@ (8003970 <OTM8009A_Init+0x3fc>)
 80037fc:	2000      	movs	r0, #0
 80037fe:	f000 fd09 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8003802:	495c      	ldr	r1, [pc, #368]	@ (8003974 <OTM8009A_Init+0x400>)
 8003804:	2000      	movs	r0, #0
 8003806:	f000 fd05 	bl	8004214 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800380a:	495b      	ldr	r1, [pc, #364]	@ (8003978 <OTM8009A_Init+0x404>)
 800380c:	2000      	movs	r0, #0
 800380e:	f000 fd01 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8003812:	495a      	ldr	r1, [pc, #360]	@ (800397c <OTM8009A_Init+0x408>)
 8003814:	2000      	movs	r0, #0
 8003816:	f000 fcfd 	bl	8004214 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800381a:	491a      	ldr	r1, [pc, #104]	@ (8003884 <OTM8009A_Init+0x310>)
 800381c:	2000      	movs	r0, #0
 800381e:	f000 fcf9 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8003822:	4957      	ldr	r1, [pc, #348]	@ (8003980 <OTM8009A_Init+0x40c>)
 8003824:	2003      	movs	r0, #3
 8003826:	f000 fcf5 	bl	8004214 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800382a:	4916      	ldr	r1, [pc, #88]	@ (8003884 <OTM8009A_Init+0x310>)
 800382c:	2000      	movs	r0, #0
 800382e:	f000 fcf1 	bl	8004214 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003832:	4914      	ldr	r1, [pc, #80]	@ (8003884 <OTM8009A_Init+0x310>)
 8003834:	2000      	movs	r0, #0
 8003836:	f000 fced 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800383a:	4952      	ldr	r1, [pc, #328]	@ (8003984 <OTM8009A_Init+0x410>)
 800383c:	2010      	movs	r0, #16
 800383e:	f000 fce9 	bl	8004214 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003842:	4910      	ldr	r1, [pc, #64]	@ (8003884 <OTM8009A_Init+0x310>)
 8003844:	2000      	movs	r0, #0
 8003846:	f000 fce5 	bl	8004214 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800384a:	494f      	ldr	r1, [pc, #316]	@ (8003988 <OTM8009A_Init+0x414>)
 800384c:	2010      	movs	r0, #16
 800384e:	f000 fce1 	bl	8004214 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8003852:	494e      	ldr	r1, [pc, #312]	@ (800398c <OTM8009A_Init+0x418>)
 8003854:	2000      	movs	r0, #0
 8003856:	f000 fcdd 	bl	8004214 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800385a:	2078      	movs	r0, #120	@ 0x78
 800385c:	f000 f8f2 	bl	8003a44 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <OTM8009A_Init+0x304>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b02      	cmp	r3, #2
 800386a:	f040 8095 	bne.w	8003998 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800386e:	4948      	ldr	r1, [pc, #288]	@ (8003990 <OTM8009A_Init+0x41c>)
 8003870:	2000      	movs	r0, #0
 8003872:	f000 fccf 	bl	8004214 <DSI_IO_WriteCmd>
    break;
 8003876:	e090      	b.n	800399a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8003878:	4946      	ldr	r1, [pc, #280]	@ (8003994 <OTM8009A_Init+0x420>)
 800387a:	2000      	movs	r0, #0
 800387c:	f000 fcca 	bl	8004214 <DSI_IO_WriteCmd>
    break;
 8003880:	e08b      	b.n	800399a <OTM8009A_Init+0x426>
 8003882:	bf00      	nop
 8003884:	0800ef9c 	.word	0x0800ef9c
 8003888:	0800ee54 	.word	0x0800ee54
 800388c:	0800efa0 	.word	0x0800efa0
 8003890:	0800ee58 	.word	0x0800ee58
 8003894:	0800efa4 	.word	0x0800efa4
 8003898:	0800efa8 	.word	0x0800efa8
 800389c:	0800efac 	.word	0x0800efac
 80038a0:	0800efb0 	.word	0x0800efb0
 80038a4:	0800efb4 	.word	0x0800efb4
 80038a8:	0800efb8 	.word	0x0800efb8
 80038ac:	0800efbc 	.word	0x0800efbc
 80038b0:	0800efc0 	.word	0x0800efc0
 80038b4:	0800efc4 	.word	0x0800efc4
 80038b8:	0800efc8 	.word	0x0800efc8
 80038bc:	0800efcc 	.word	0x0800efcc
 80038c0:	0800efd0 	.word	0x0800efd0
 80038c4:	0800efd4 	.word	0x0800efd4
 80038c8:	0800efd8 	.word	0x0800efd8
 80038cc:	0800efdc 	.word	0x0800efdc
 80038d0:	0800efe0 	.word	0x0800efe0
 80038d4:	0800efe4 	.word	0x0800efe4
 80038d8:	0800ee84 	.word	0x0800ee84
 80038dc:	0800efe8 	.word	0x0800efe8
 80038e0:	0800efec 	.word	0x0800efec
 80038e4:	0800eff0 	.word	0x0800eff0
 80038e8:	0800eff4 	.word	0x0800eff4
 80038ec:	0800eff8 	.word	0x0800eff8
 80038f0:	0800effc 	.word	0x0800effc
 80038f4:	0800f000 	.word	0x0800f000
 80038f8:	0800f004 	.word	0x0800f004
 80038fc:	0800f008 	.word	0x0800f008
 8003900:	0800ee88 	.word	0x0800ee88
 8003904:	0800ee8c 	.word	0x0800ee8c
 8003908:	0800f00c 	.word	0x0800f00c
 800390c:	0800ee94 	.word	0x0800ee94
 8003910:	0800f010 	.word	0x0800f010
 8003914:	0800eea4 	.word	0x0800eea4
 8003918:	0800f014 	.word	0x0800f014
 800391c:	0800eeb4 	.word	0x0800eeb4
 8003920:	0800f018 	.word	0x0800f018
 8003924:	0800f050 	.word	0x0800f050
 8003928:	0800eec0 	.word	0x0800eec0
 800392c:	0800f01c 	.word	0x0800f01c
 8003930:	0800eecc 	.word	0x0800eecc
 8003934:	0800eedc 	.word	0x0800eedc
 8003938:	0800eeec 	.word	0x0800eeec
 800393c:	0800eef8 	.word	0x0800eef8
 8003940:	0800ef08 	.word	0x0800ef08
 8003944:	0800f020 	.word	0x0800f020
 8003948:	0800ef18 	.word	0x0800ef18
 800394c:	0800f024 	.word	0x0800f024
 8003950:	0800ef24 	.word	0x0800ef24
 8003954:	0800ef30 	.word	0x0800ef30
 8003958:	0800ef3c 	.word	0x0800ef3c
 800395c:	0800ef4c 	.word	0x0800ef4c
 8003960:	0800ef5c 	.word	0x0800ef5c
 8003964:	0800ef68 	.word	0x0800ef68
 8003968:	0800ef78 	.word	0x0800ef78
 800396c:	0800f054 	.word	0x0800f054
 8003970:	0800f058 	.word	0x0800f058
 8003974:	0800f05c 	.word	0x0800f05c
 8003978:	0800f060 	.word	0x0800f060
 800397c:	0800f064 	.word	0x0800f064
 8003980:	0800ef88 	.word	0x0800ef88
 8003984:	0800ee5c 	.word	0x0800ee5c
 8003988:	0800ee70 	.word	0x0800ee70
 800398c:	0800f028 	.word	0x0800f028
 8003990:	0800f02c 	.word	0x0800f02c
 8003994:	0800f030 	.word	0x0800f030
  default :
    break;
 8003998:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10b      	bne.n	80039b8 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80039a0:	4916      	ldr	r1, [pc, #88]	@ (80039fc <OTM8009A_Init+0x488>)
 80039a2:	2000      	movs	r0, #0
 80039a4:	f000 fc36 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80039a8:	4915      	ldr	r1, [pc, #84]	@ (8003a00 <OTM8009A_Init+0x48c>)
 80039aa:	2004      	movs	r0, #4
 80039ac:	f000 fc32 	bl	8004214 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80039b0:	4914      	ldr	r1, [pc, #80]	@ (8003a04 <OTM8009A_Init+0x490>)
 80039b2:	2004      	movs	r0, #4
 80039b4:	f000 fc2e 	bl	8004214 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80039b8:	4913      	ldr	r1, [pc, #76]	@ (8003a08 <OTM8009A_Init+0x494>)
 80039ba:	2000      	movs	r0, #0
 80039bc:	f000 fc2a 	bl	8004214 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80039c0:	4912      	ldr	r1, [pc, #72]	@ (8003a0c <OTM8009A_Init+0x498>)
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 fc26 	bl	8004214 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80039c8:	4911      	ldr	r1, [pc, #68]	@ (8003a10 <OTM8009A_Init+0x49c>)
 80039ca:	2000      	movs	r0, #0
 80039cc:	f000 fc22 	bl	8004214 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80039d0:	4910      	ldr	r1, [pc, #64]	@ (8003a14 <OTM8009A_Init+0x4a0>)
 80039d2:	2000      	movs	r0, #0
 80039d4:	f000 fc1e 	bl	8004214 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80039d8:	490f      	ldr	r1, [pc, #60]	@ (8003a18 <OTM8009A_Init+0x4a4>)
 80039da:	2000      	movs	r0, #0
 80039dc:	f000 fc1a 	bl	8004214 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <OTM8009A_Init+0x4a8>)
 80039e2:	2000      	movs	r0, #0
 80039e4:	f000 fc16 	bl	8004214 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80039e8:	490d      	ldr	r1, [pc, #52]	@ (8003a20 <OTM8009A_Init+0x4ac>)
 80039ea:	2000      	movs	r0, #0
 80039ec:	f000 fc12 	bl	8004214 <DSI_IO_WriteCmd>

  return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	0800f034 	.word	0x0800f034
 8003a00:	0800ef8c 	.word	0x0800ef8c
 8003a04:	0800ef94 	.word	0x0800ef94
 8003a08:	0800f038 	.word	0x0800f038
 8003a0c:	0800f03c 	.word	0x0800f03c
 8003a10:	0800f040 	.word	0x0800f040
 8003a14:	0800f044 	.word	0x0800f044
 8003a18:	0800f048 	.word	0x0800f048
 8003a1c:	0800ef9c 	.word	0x0800ef9c
 8003a20:	0800f04c 	.word	0x0800f04c

08003a24 <OTM8009A_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t OTM8009A_ReadID(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(OTM8009A_CMD_ID1, &pData, 1);
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	2201      	movs	r2, #1
 8003a32:	4619      	mov	r1, r3
 8003a34:	20da      	movs	r0, #218	@ 0xda
 8003a36:	f000 fc17 	bl	8004268 <DSI_IO_ReadCmd>
  return pData;
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 ffb9 	bl	80049c4 <HAL_Delay>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ffae 	bl	80049c4 <HAL_Delay>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003a74:	2001      	movs	r0, #1
 8003a76:	f000 f803 	bl	8003a80 <BSP_LCD_InitEx>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	@ 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8003a8a:	f646 3325 	movw	r3, #27429	@ 0x6b25
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t read_id = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	847b      	strh	r3, [r7, #34]	@ 0x22

  uint32_t laneByteClk_kHz = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8003a98:	f000 f968 	bl	8003d6c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8003a9c:	f000 fc04 	bl	80042a8 <LCD_IO_GetID>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	847b      	strh	r3, [r7, #34]	@ 0x22
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8003aa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003aa6:	2b11      	cmp	r3, #17
 8003aa8:	d001      	beq.n	8003aae <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e15a      	b.n	8003d64 <BSP_LCD_InitEx+0x2e4>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8003aae:	f000 fc03 	bl	80042b8 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8003ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003ab4:	4a9e      	ldr	r2, [pc, #632]	@ (8003d30 <BSP_LCD_InitEx+0x2b0>)
 8003ab6:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8003ab8:	489c      	ldr	r0, [pc, #624]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003aba:	f002 fde7 	bl	800668c <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8003abe:	2364      	movs	r3, #100	@ 0x64
 8003ac0:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8003aca:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003ace:	61fb      	str	r3, [r7, #28]

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003ad0:	4b96      	ldr	r3, [pc, #600]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	4a96      	ldr	r2, [pc, #600]	@ (8003d34 <BSP_LCD_InitEx+0x2b4>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	0a9b      	lsrs	r3, r3, #10
 8003ae2:	4a92      	ldr	r2, [pc, #584]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003ae4:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4619      	mov	r1, r3
 8003aec:	488f      	ldr	r0, [pc, #572]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003aee:	f002 fc4d 	bl	800638c <HAL_DSI_Init>

  /* Enable the DSI module */
  HAL_DSI_Start(&(hdsi_discovery));
 8003af2:	488e      	ldr	r0, [pc, #568]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003af4:	f003 fc9c 	bl	8007430 <HAL_DSI_Start>

  /* Enable the DSI BTW for read operations */
  HAL_DSI_ConfigFlowControl(&(hdsi_discovery), DSI_FLOW_CONTROL_BTA);
 8003af8:	2104      	movs	r1, #4
 8003afa:	488c      	ldr	r0, [pc, #560]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003afc:	f003 fb3e 	bl	800717c <HAL_DSI_ConfigFlowControl>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003b00:	488d      	ldr	r0, [pc, #564]	@ (8003d38 <BSP_LCD_InitEx+0x2b8>)
 8003b02:	f000 fa25 	bl	8003f50 <BSP_LCD_SetFont>

  Lcd_Driver_Type = Driver_Type(Lcd_Driver_Type);
 8003b06:	4b8d      	ldr	r3, [pc, #564]	@ (8003d3c <BSP_LCD_InitEx+0x2bc>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fd54 	bl	80045b8 <Driver_Type>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b89      	ldr	r3, [pc, #548]	@ (8003d3c <BSP_LCD_InitEx+0x2bc>)
 8003b16:	701a      	strb	r2, [r3, #0]

  /* Stop the DSI module */
  HAL_DSI_Stop(&(hdsi_discovery));
 8003b18:	4884      	ldr	r0, [pc, #528]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003b1a:	f003 fcc5 	bl	80074a8 <HAL_DSI_Stop>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <BSP_LCD_InitEx+0xb6>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8003b24:	4b86      	ldr	r3, [pc, #536]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003b26:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003b2a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8003b2c:	4b85      	ldr	r3, [pc, #532]	@ (8003d44 <BSP_LCD_InitEx+0x2c4>)
 8003b2e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <BSP_LCD_InitEx+0xc6>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8003b36:	4b82      	ldr	r3, [pc, #520]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003b38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b3c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8003b3e:	4b81      	ldr	r3, [pc, #516]	@ (8003d44 <BSP_LCD_InitEx+0x2c4>)
 8003b40:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003b44:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8003b46:	4b7e      	ldr	r3, [pc, #504]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61bb      	str	r3, [r7, #24]
  VACT = lcd_y_size;
 8003b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8003d44 <BSP_LCD_InitEx+0x2c4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	617b      	str	r3, [r7, #20]

  /* The following values are same for portrait and landscape orientations */
  if(Lcd_Driver_Type == LCD_CTRL_OTM8009A)
 8003b52:	4b7a      	ldr	r3, [pc, #488]	@ (8003d3c <BSP_LCD_InitEx+0x2bc>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10c      	bne.n	8003b74 <BSP_LCD_InitEx+0xf4>
  {
    VSA  = OTM8009A_480X800_VSYNC;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VBP  = OTM8009A_480X800_VBP;
 8003b5e:	230f      	movs	r3, #15
 8003b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    VFP  = OTM8009A_480X800_VFP;
 8003b62:	2310      	movs	r3, #16
 8003b64:	637b      	str	r3, [r7, #52]	@ 0x34
    HSA  = OTM8009A_480X800_HSYNC;
 8003b66:	2302      	movs	r3, #2
 8003b68:	633b      	str	r3, [r7, #48]	@ 0x30
    HBP  = OTM8009A_480X800_HBP;
 8003b6a:	2322      	movs	r3, #34	@ 0x22
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HFP  = OTM8009A_480X800_HFP;
 8003b6e:	2322      	movs	r3, #34	@ 0x22
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b72:	e00b      	b.n	8003b8c <BSP_LCD_InitEx+0x10c>
  }
  else
  {
    VSA  = NT35510_480X800_VSYNC;
 8003b74:	2378      	movs	r3, #120	@ 0x78
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VBP  = NT35510_480X800_VBP;
 8003b78:	2396      	movs	r3, #150	@ 0x96
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    VFP  = NT35510_480X800_VFP;
 8003b7c:	2396      	movs	r3, #150	@ 0x96
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HSA  = NT35510_480X800_HSYNC;
 8003b80:	2302      	movs	r3, #2
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
    HBP  = NT35510_480X800_HBP;
 8003b84:	2322      	movs	r3, #34	@ 0x22
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HFP  = NT35510_480X800_HFP;
 8003b88:	2322      	movs	r3, #34	@ 0x22
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  
  hdsivideo_handle.VirtualChannelID = LCD_Driver_ID;
 8003b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8003b92:	4b6d      	ldr	r3, [pc, #436]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003b94:	2205      	movs	r2, #5
 8003b96:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8003b98:	4b6b      	ldr	r3, [pc, #428]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8003b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8003ba4:	4b68      	ldr	r3, [pc, #416]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8003baa:	4b67      	ldr	r3, [pc, #412]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003bac:	2202      	movs	r2, #2
 8003bae:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8003bb0:	4b65      	ldr	r3, [pc, #404]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003bb2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003bb6:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8003bbe:	4a62      	ldr	r2, [pc, #392]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003bd4:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8003bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	fb03 f202 	mul.w	r2, r3, r2
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	4a58      	ldr	r2, [pc, #352]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	441a      	add	r2, r3
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	441a      	add	r2, r3
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	4413      	add	r3, r2
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	fb03 f202 	mul.w	r2, r3, r2
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	4a51      	ldr	r2, [pc, #324]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8003c06:	4a50      	ldr	r2, [pc, #320]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8003c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8003c12:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c16:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8003c18:	4a4b      	ldr	r2, [pc, #300]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8003c26:	4b48      	ldr	r3, [pc, #288]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c28:	2210      	movs	r2, #16
 8003c2a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8003c2c:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8003c32:	4b45      	ldr	r3, [pc, #276]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c38:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8003c3a:	4b43      	ldr	r3, [pc, #268]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8003c42:	4b41      	ldr	r3, [pc, #260]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c48:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8003c52:	4b3d      	ldr	r3, [pc, #244]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8003c62:	4939      	ldr	r1, [pc, #228]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003c64:	4831      	ldr	r0, [pc, #196]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003c66:	f002 ff51 	bl	8006b0c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4a37      	ldr	r2, [pc, #220]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003c70:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8003c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	4413      	add	r3, r2
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	4a34      	ldr	r2, [pc, #208]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003c7c:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8003c7e:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	441a      	add	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	4413      	add	r3, r2
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003c8e:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8003c90:	4b2b      	ldr	r3, [pc, #172]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	441a      	add	r2, r3
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	441a      	add	r2, r3
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <BSP_LCD_InitEx+0x2c0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a28      	ldr	r2, [pc, #160]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cac:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8003cae:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <BSP_LCD_InitEx+0x2c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cb4:	6653      	str	r3, [r2, #100]	@ 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	@ (8003d50 <BSP_LCD_InitEx+0x2d0>)
 8003cb8:	2208      	movs	r2, #8
 8003cba:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003cbc:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <BSP_LCD_InitEx+0x2d0>)
 8003cbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003cc2:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8003cc4:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <BSP_LCD_InitEx+0x2d0>)
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <BSP_LCD_InitEx+0x2d0>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003cd0:	481f      	ldr	r0, [pc, #124]	@ (8003d50 <BSP_LCD_InitEx+0x2d0>)
 8003cd2:	f006 ffa1 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8003cde:	4b1b      	ldr	r3, [pc, #108]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8003ce6:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003cee:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <BSP_LCD_InitEx+0x2d4>)
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8003cfa:	4913      	ldr	r1, [pc, #76]	@ (8003d48 <BSP_LCD_InitEx+0x2c8>)
 8003cfc:	4813      	ldr	r0, [pc, #76]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003cfe:	f005 f879 	bl	8008df4 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8003d02:	4812      	ldr	r0, [pc, #72]	@ (8003d4c <BSP_LCD_InitEx+0x2cc>)
 8003d04:	f004 fd0c 	bl	8008720 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8003d08:	4808      	ldr	r0, [pc, #32]	@ (8003d2c <BSP_LCD_InitEx+0x2ac>)
 8003d0a:	f003 fb91 	bl	8007430 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d0e:	f000 fc73 	bl	80045f8 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d12:	4809      	ldr	r0, [pc, #36]	@ (8003d38 <BSP_LCD_InitEx+0x2b8>)
 8003d14:	f000 f91c 	bl	8003f50 <BSP_LCD_SetFont>

/************************End LTDC Initialization*******************************/

 if(Lcd_Driver_Type==LCD_CTRL_NT35510 )
 8003d18:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <BSP_LCD_InitEx+0x2bc>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11b      	bne.n	8003d58 <BSP_LCD_InitEx+0x2d8>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	4619      	mov	r1, r3
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff fa1d 	bl	8003164 <NT35510_Init>
 8003d2a:	e01a      	b.n	8003d62 <BSP_LCD_InitEx+0x2e2>
 8003d2c:	20001208 	.word	0x20001208
 8003d30:	40016c00 	.word	0x40016c00
 8003d34:	43215e57 	.word	0x43215e57
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	20001224 	.word	0x20001224
 8003d40:	2000000c 	.word	0x2000000c
 8003d44:	20000010 	.word	0x20000010
 8003d48:	2000109c 	.word	0x2000109c
 8003d4c:	20001160 	.word	0x20001160
 8003d50:	20001244 	.word	0x20001244
 8003d54:	40016800 	.word	0x40016800
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7ff fc09 	bl	8003574 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 
 }

  return LCD_OK; 
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3740      	adds	r7, #64	@ 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d72:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <BSP_LCD_Reset+0x68>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	4a17      	ldr	r2, [pc, #92]	@ (8003dd4 <BSP_LCD_Reset+0x68>)
 8003d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <BSP_LCD_Reset+0x68>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8e:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003d90:	2301      	movs	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8003d94:	2301      	movs	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480d      	ldr	r0, [pc, #52]	@ (8003dd8 <BSP_LCD_Reset+0x6c>)
 8003da2:	f004 f8b7 	bl	8007f14 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dac:	480a      	ldr	r0, [pc, #40]	@ (8003dd8 <BSP_LCD_Reset+0x6c>)
 8003dae:	f004 fb69 	bl	8008484 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8003db2:	2014      	movs	r0, #20
 8003db4:	f000 fe06 	bl	80049c4 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8003db8:	2201      	movs	r2, #1
 8003dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dbe:	4806      	ldr	r0, [pc, #24]	@ (8003dd8 <BSP_LCD_Reset+0x6c>)
 8003dc0:	f004 fb60 	bl	8008484 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	f000 fdfd 	bl	80049c4 <HAL_Delay>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40022400 	.word	0x40022400

08003ddc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8003de0:	4b03      	ldr	r3, [pc, #12]	@ (8003df0 <BSP_LCD_GetXSize+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <BSP_LCD_GetYSize+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000010 	.word	0x20000010

08003e0c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b090      	sub	sp, #64	@ 0x40
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003e1c:	f7ff ffde 	bl	8003ddc <BSP_LCD_GetXSize>
 8003e20:	4603      	mov	r3, r0
 8003e22:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003e28:	f7ff ffe4 	bl	8003df4 <BSP_LCD_GetYSize>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003e38:	23ff      	movs	r3, #255	@ 0xff
 8003e3a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003e52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003e5c:	f7ff ffbe 	bl	8003ddc <BSP_LCD_GetXSize>
 8003e60:	4603      	mov	r3, r0
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003e64:	f7ff ffc6 	bl	8003df4 <BSP_LCD_GetYSize>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	4619      	mov	r1, r3
 8003e74:	4812      	ldr	r0, [pc, #72]	@ (8003ec0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e76:	f004 fde5 	bl	8008a44 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	4911      	ldr	r1, [pc, #68]	@ (8003ec4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3304      	adds	r3, #4
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	490c      	ldr	r1, [pc, #48]	@ (8003ec4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003ea2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	4907      	ldr	r1, [pc, #28]	@ (8003ec4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003eb6:	601a      	str	r2, [r3, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	3740      	adds	r7, #64	@ 0x40
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20001160 	.word	0x20001160
 8003ec4:	2000122c 	.word	0x2000122c
 8003ec8:	20000004 	.word	0x20000004

08003ecc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ed4:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <BSP_LCD_SelectLayer+0x1c>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20001228 	.word	0x20001228

08003eec <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003ef4:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <BSP_LCD_SetTextColor+0x28>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4907      	ldr	r1, [pc, #28]	@ (8003f18 <BSP_LCD_SetTextColor+0x2c>)
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	20001228 	.word	0x20001228
 8003f18:	2000122c 	.word	0x2000122c

08003f1c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003f24:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <BSP_LCD_SetBackColor+0x2c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4908      	ldr	r1, [pc, #32]	@ (8003f4c <BSP_LCD_SetBackColor+0x30>)
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3304      	adds	r3, #4
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20001228 	.word	0x20001228
 8003f4c:	2000122c 	.word	0x2000122c

08003f50 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003f58:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <BSP_LCD_SetFont+0x2c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4908      	ldr	r1, [pc, #32]	@ (8003f80 <BSP_LCD_SetFont+0x30>)
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3308      	adds	r3, #8
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20001228 	.word	0x20001228
 8003f80:	2000122c 	.word	0x2000122c

08003f84 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <BSP_LCD_Clear+0x48>)
 8003f8e:	681c      	ldr	r4, [r3, #0]
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <BSP_LCD_Clear+0x48>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <BSP_LCD_Clear+0x4c>)
 8003f96:	2134      	movs	r1, #52	@ 0x34
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	335c      	adds	r3, #92	@ 0x5c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461e      	mov	r6, r3
 8003fa4:	f7ff ff1a 	bl	8003ddc <BSP_LCD_GetXSize>
 8003fa8:	4605      	mov	r5, r0
 8003faa:	f7ff ff23 	bl	8003df4 <BSP_LCD_GetYSize>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	462a      	mov	r2, r5
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 fac2 	bl	8004548 <LL_FillBuffer>
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	20001228 	.word	0x20001228
 8003fd0:	20001160 	.word	0x20001160

08003fd4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	80bb      	strh	r3, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <BSP_LCD_DisplayChar+0x80>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	491b      	ldr	r1, [pc, #108]	@ (8004058 <BSP_LCD_DisplayChar+0x84>)
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004002:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <BSP_LCD_DisplayChar+0x80>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4c14      	ldr	r4, [pc, #80]	@ (8004058 <BSP_LCD_DisplayChar+0x84>)
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4423      	add	r3, r4
 8004012:	3308      	adds	r3, #8
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004018:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800401c:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <BSP_LCD_DisplayChar+0x80>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4c0d      	ldr	r4, [pc, #52]	@ (8004058 <BSP_LCD_DisplayChar+0x84>)
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4423      	add	r3, r4
 800402c:	3308      	adds	r3, #8
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	889b      	ldrh	r3, [r3, #4]
 8004032:	3307      	adds	r3, #7
 8004034:	2b00      	cmp	r3, #0
 8004036:	da00      	bge.n	800403a <BSP_LCD_DisplayChar+0x66>
 8004038:	3307      	adds	r3, #7
 800403a:	10db      	asrs	r3, r3, #3
 800403c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004040:	18ca      	adds	r2, r1, r3
 8004042:	88b9      	ldrh	r1, [r7, #4]
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9c6 	bl	80043d8 <DrawChar>
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}
 8004054:	20001228 	.word	0x20001228
 8004058:	2000122c 	.word	0x2000122c

0800405c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60ba      	str	r2, [r7, #8]
 8004064:	461a      	mov	r2, r3
 8004066:	4603      	mov	r3, r0
 8004068:	81fb      	strh	r3, [r7, #14]
 800406a:	460b      	mov	r3, r1
 800406c:	81bb      	strh	r3, [r7, #12]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004072:	2301      	movs	r3, #1
 8004074:	83fb      	strh	r3, [r7, #30]
 8004076:	2300      	movs	r3, #0
 8004078:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8004086:	e002      	b.n	800408e <BSP_LCD_DisplayStringAt+0x32>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	3301      	adds	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	617a      	str	r2, [r7, #20]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f6      	bne.n	8004088 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800409a:	f7ff fe9f 	bl	8003ddc <BSP_LCD_GetXSize>
 800409e:	4601      	mov	r1, r0
 80040a0:	4b50      	ldr	r3, [pc, #320]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4850      	ldr	r0, [pc, #320]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	3308      	adds	r3, #8
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	889b      	ldrh	r3, [r3, #4]
 80040b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ba:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d01c      	beq.n	80040fc <BSP_LCD_DisplayStringAt+0xa0>
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	dc33      	bgt.n	800412e <BSP_LCD_DisplayStringAt+0xd2>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d002      	beq.n	80040d0 <BSP_LCD_DisplayStringAt+0x74>
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d019      	beq.n	8004102 <BSP_LCD_DisplayStringAt+0xa6>
 80040ce:	e02e      	b.n	800412e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad1      	subs	r1, r2, r3
 80040d6:	4b43      	ldr	r3, [pc, #268]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4843      	ldr	r0, [pc, #268]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	3308      	adds	r3, #8
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	889b      	ldrh	r3, [r3, #4]
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	4413      	add	r3, r2
 80040f8:	83fb      	strh	r3, [r7, #30]
      break;
 80040fa:	e01b      	b.n	8004134 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	83fb      	strh	r3, [r7, #30]
      break;
 8004100:	e018      	b.n	8004134 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	b299      	uxth	r1, r3
 800410a:	4b36      	ldr	r3, [pc, #216]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4836      	ldr	r0, [pc, #216]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4403      	add	r3, r0
 800411a:	3308      	adds	r3, #8
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	889b      	ldrh	r3, [r3, #4]
 8004120:	fb11 f303 	smulbb	r3, r1, r3
 8004124:	b29a      	uxth	r2, r3
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	83fb      	strh	r3, [r7, #30]
      break;
 800412c:	e002      	b.n	8004134 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 800412e:	89fb      	ldrh	r3, [r7, #14]
 8004130:	83fb      	strh	r3, [r7, #30]
      break;
 8004132:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8004134:	8bfb      	ldrh	r3, [r7, #30]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <BSP_LCD_DisplayStringAt+0xe6>
 800413a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800413e:	2b00      	cmp	r3, #0
 8004140:	da1d      	bge.n	800417e <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004146:	e01a      	b.n	800417e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	89b9      	ldrh	r1, [r7, #12]
 800414e:	8bfb      	ldrh	r3, [r7, #30]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff3f 	bl	8003fd4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004156:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3308      	adds	r3, #8
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	889a      	ldrh	r2, [r3, #4]
 800416c:	8bfb      	ldrh	r3, [r7, #30]
 800416e:	4413      	add	r3, r2
 8004170:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3301      	adds	r3, #1
 8004176:	60bb      	str	r3, [r7, #8]
    i++;
 8004178:	8bbb      	ldrh	r3, [r7, #28]
 800417a:	3301      	adds	r3, #1
 800417c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2dc      	uxtb	r4, r3
 800418c:	f7ff fe26 	bl	8003ddc <BSP_LCD_GetXSize>
 8004190:	8bb9      	ldrh	r1, [r7, #28]
 8004192:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4d14      	ldr	r5, [pc, #80]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	442b      	add	r3, r5
 80041a2:	3308      	adds	r3, #8
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	1ac3      	subs	r3, r0, r3
 80041ae:	b299      	uxth	r1, r3
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <BSP_LCD_DisplayStringAt+0x188>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	480c      	ldr	r0, [pc, #48]	@ (80041e8 <BSP_LCD_DisplayStringAt+0x18c>)
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4403      	add	r3, r0
 80041c0:	3308      	adds	r3, #8
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	889b      	ldrh	r3, [r3, #4]
 80041c6:	4299      	cmp	r1, r3
 80041c8:	bf2c      	ite	cs
 80041ca:	2301      	movcs	r3, #1
 80041cc:	2300      	movcc	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4023      	ands	r3, r4
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1b7      	bne.n	8004148 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20001228 	.word	0x20001228
 80041e8:	2000122c 	.word	0x2000122c

080041ec <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af02      	add	r7, sp, #8
  }
  else
#endif /* USE_LCD_HDMI */    
  {  
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <BSP_LCD_DisplayOn+0x20>)
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2329      	movs	r3, #41	@ 0x29
 80041fc:	2215      	movs	r2, #21
 80041fe:	4804      	ldr	r0, [pc, #16]	@ (8004210 <BSP_LCD_DisplayOn+0x24>)
 8004200:	f003 f98e 	bl	8007520 <HAL_DSI_ShortWrite>
                       hdsivideo_handle.VirtualChannelID,
                       DSI_DCS_SHORT_PKT_WRITE_P1,
                       OTM8009A_CMD_DISPON,
                       0x00);
  }  
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	2000109c 	.word	0x2000109c
 8004210:	20001208 	.word	0x20001208

08004214 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af02      	add	r7, sp, #8
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d80d      	bhi.n	8004240 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_Driver_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	2215      	movs	r2, #21
 8004236:	2100      	movs	r1, #0
 8004238:	480a      	ldr	r0, [pc, #40]	@ (8004264 <DSI_IO_WriteCmd+0x50>)
 800423a:	f003 f971 	bl	8007520 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800423e:	e00d      	b.n	800425c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	9200      	str	r2, [sp, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2239      	movs	r2, #57	@ 0x39
 8004254:	2100      	movs	r1, #0
 8004256:	4803      	ldr	r0, [pc, #12]	@ (8004264 <DSI_IO_WriteCmd+0x50>)
 8004258:	f003 f984 	bl	8007564 <HAL_DSI_LongWrite>
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20001208 	.word	0x20001208

08004268 <DSI_IO_ReadCmd>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
int32_t DSI_IO_ReadCmd(uint32_t Reg, uint8_t *pData, uint32_t Size)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	@ 0x28
 800426c:	af04      	add	r7, sp, #16
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  int32_t ret = LCD_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
  
  if(HAL_DSI_Read(&hdsi_discovery, LCD_Driver_ID, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData)== HAL_OK)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	2306      	movs	r3, #6
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	2100      	movs	r1, #0
 800428a:	4806      	ldr	r0, [pc, #24]	@ (80042a4 <DSI_IO_ReadCmd+0x3c>)
 800428c:	f003 fa02 	bl	8007694 <HAL_DSI_Read>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <DSI_IO_ReadCmd+0x32>
  {
    ret = LCD_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800429a:	697b      	ldr	r3, [r7, #20]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20001208 	.word	0x20001208

080042a8 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80042ac:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80042be:	4b32      	ldr	r3, [pc, #200]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	4a31      	ldr	r2, [pc, #196]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80042d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80042e2:	4b29      	ldr	r3, [pc, #164]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	4a28      	ldr	r2, [pc, #160]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80042ee:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a25      	ldr	r2, [pc, #148]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8004306:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 800430c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004310:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8004312:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4a1c      	ldr	r2, [pc, #112]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004318:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800431c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800431e:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004328:	6453      	str	r3, [r2, #68]	@ 0x44
 800432a:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8004336:	4b14      	ldr	r3, [pc, #80]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 800433c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004340:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8004342:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	4a10      	ldr	r2, [pc, #64]	@ (8004388 <BSP_LCD_MspInit+0xd0>)
 8004348:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800434c:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2103      	movs	r1, #3
 8004352:	2058      	movs	r0, #88	@ 0x58
 8004354:	f001 f826 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004358:	2058      	movs	r0, #88	@ 0x58
 800435a:	f001 f83f 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	2103      	movs	r1, #3
 8004362:	205a      	movs	r0, #90	@ 0x5a
 8004364:	f001 f81e 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004368:	205a      	movs	r0, #90	@ 0x5a
 800436a:	f001 f837 	bl	80053dc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800436e:	2200      	movs	r2, #0
 8004370:	2103      	movs	r1, #3
 8004372:	2062      	movs	r0, #98	@ 0x62
 8004374:	f001 f816 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004378:	2062      	movs	r0, #98	@ 0x62
 800437a:	f001 f82f 	bl	80053dc <HAL_NVIC_EnableIRQ>
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	603a      	str	r2, [r7, #0]
 8004396:	80fb      	strh	r3, [r7, #6]
 8004398:	460b      	mov	r3, r1
 800439a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800439c:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <BSP_LCD_DrawPixel+0x44>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0c      	ldr	r2, [pc, #48]	@ (80043d4 <BSP_LCD_DrawPixel+0x48>)
 80043a2:	2134      	movs	r1, #52	@ 0x34
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	335c      	adds	r3, #92	@ 0x5c
 80043ac:	681c      	ldr	r4, [r3, #0]
 80043ae:	88bd      	ldrh	r5, [r7, #4]
 80043b0:	f7ff fd14 	bl	8003ddc <BSP_LCD_GetXSize>
 80043b4:	4603      	mov	r3, r0
 80043b6:	fb03 f205 	mul.w	r2, r3, r5
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4423      	add	r3, r4
 80043c2:	461a      	mov	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6013      	str	r3, [r2, #0]
}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}
 80043d0:	20001228 	.word	0x20001228
 80043d4:	20001160 	.word	0x20001160

080043d8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	603a      	str	r2, [r7, #0]
 80043e2:	80fb      	strh	r3, [r7, #6]
 80043e4:	460b      	mov	r3, r1
 80043e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80043f0:	4b53      	ldr	r3, [pc, #332]	@ (8004540 <DrawChar+0x168>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4953      	ldr	r1, [pc, #332]	@ (8004544 <DrawChar+0x16c>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3308      	adds	r3, #8
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	88db      	ldrh	r3, [r3, #6]
 8004406:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004408:	4b4d      	ldr	r3, [pc, #308]	@ (8004540 <DrawChar+0x168>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	494d      	ldr	r1, [pc, #308]	@ (8004544 <DrawChar+0x16c>)
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3308      	adds	r3, #8
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	889b      	ldrh	r3, [r3, #4]
 800441e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8004420:	8a3b      	ldrh	r3, [r7, #16]
 8004422:	3307      	adds	r3, #7
 8004424:	2b00      	cmp	r3, #0
 8004426:	da00      	bge.n	800442a <DrawChar+0x52>
 8004428:	3307      	adds	r3, #7
 800442a:	10db      	asrs	r3, r3, #3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	b2da      	uxtb	r2, r3
 8004432:	8a3b      	ldrh	r3, [r7, #16]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e076      	b.n	800452e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004440:	8a3b      	ldrh	r3, [r7, #16]
 8004442:	3307      	adds	r3, #7
 8004444:	2b00      	cmp	r3, #0
 8004446:	da00      	bge.n	800444a <DrawChar+0x72>
 8004448:	3307      	adds	r3, #7
 800444a:	10db      	asrs	r3, r3, #3
 800444c:	461a      	mov	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4413      	add	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800445a:	8a3b      	ldrh	r3, [r7, #16]
 800445c:	3307      	adds	r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	da00      	bge.n	8004464 <DrawChar+0x8c>
 8004462:	3307      	adds	r3, #7
 8004464:	10db      	asrs	r3, r3, #3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d002      	beq.n	8004470 <DrawChar+0x98>
 800446a:	2b02      	cmp	r3, #2
 800446c:	d004      	beq.n	8004478 <DrawChar+0xa0>
 800446e:	e00c      	b.n	800448a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]
      break;
 8004476:	e016      	b.n	80044a6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	3201      	adds	r2, #1
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
      break;
 8004488:	e00d      	b.n	80044a6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	041a      	lsls	r2, r3, #16
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3301      	adds	r3, #1
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	4313      	orrs	r3, r2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	3202      	adds	r2, #2
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
      break;
 80044a4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e036      	b.n	800451a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80044ac:	8a3a      	ldrh	r2, [r7, #16]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4413      	add	r3, r2
 80044b6:	3b01      	subs	r3, #1
 80044b8:	2201      	movs	r2, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	4413      	add	r3, r2
 80044d0:	b298      	uxth	r0, r3
 80044d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <DrawChar+0x168>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	491b      	ldr	r1, [pc, #108]	@ (8004544 <DrawChar+0x16c>)
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	88bb      	ldrh	r3, [r7, #4]
 80044e6:	4619      	mov	r1, r3
 80044e8:	f7ff ff50 	bl	800438c <BSP_LCD_DrawPixel>
 80044ec:	e012      	b.n	8004514 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	4413      	add	r3, r2
 80044f6:	b298      	uxth	r0, r3
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <DrawChar+0x168>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4911      	ldr	r1, [pc, #68]	@ (8004544 <DrawChar+0x16c>)
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3304      	adds	r3, #4
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	88bb      	ldrh	r3, [r7, #4]
 800450e:	4619      	mov	r1, r3
 8004510:	f7ff ff3c 	bl	800438c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	3301      	adds	r3, #1
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	8a3b      	ldrh	r3, [r7, #16]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3c4      	bcc.n	80044ac <DrawChar+0xd4>
      }
    }
    Ypos++;
 8004522:	88bb      	ldrh	r3, [r7, #4]
 8004524:	3301      	adds	r3, #1
 8004526:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3301      	adds	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	8a7b      	ldrh	r3, [r7, #18]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d384      	bcc.n	8004440 <DrawChar+0x68>
  }
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20001228 	.word	0x20001228
 8004544:	2000122c 	.word	0x2000122c

08004548 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8004556:	4b16      	ldr	r3, [pc, #88]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004558:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800455c:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800455e:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8004564:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <LL_FillBuffer+0x68>)
 800456c:	4a11      	ldr	r2, [pc, #68]	@ (80045b4 <LL_FillBuffer+0x6c>)
 800456e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8004570:	480f      	ldr	r0, [pc, #60]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004572:	f001 fb0b 	bl	8005b8c <HAL_DMA2D_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d115      	bne.n	80045a8 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	480c      	ldr	r0, [pc, #48]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004580:	f001 fd82 	bl	8006088 <HAL_DMA2D_ConfigLayer>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10e      	bne.n	80045a8 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69f9      	ldr	r1, [r7, #28]
 8004594:	4806      	ldr	r0, [pc, #24]	@ (80045b0 <LL_FillBuffer+0x68>)
 8004596:	f001 fb53 	bl	8005c40 <HAL_DMA2D_Start>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80045a0:	210a      	movs	r1, #10
 80045a2:	4803      	ldr	r0, [pc, #12]	@ (80045b0 <LL_FillBuffer+0x68>)
 80045a4:	f001 fb77 	bl	8005c96 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001108 	.word	0x20001108
 80045b4:	4002b000 	.word	0x4002b000

080045b8 <Driver_Type>:
/**
  * @brief  Check if the component ID is correct.
  * @param  Lcd_type Driver Type Control NT35510 or OTM8009A
  */ 
static LCD_Driver_t Driver_Type(LCD_Driver_t Lcd_type)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
  uint16_t read_id;
  /* Read the NT35510 ID */
  read_id = NT35510_ReadID();
 80045c2:	f7fe ffc7 	bl	8003554 <NT35510_ReadID>
 80045c6:	4603      	mov	r3, r0
 80045c8:	81fb      	strh	r3, [r7, #14]
  if(read_id == NT35510_ID)
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	2b80      	cmp	r3, #128	@ 0x80
 80045ce:	d102      	bne.n	80045d6 <Driver_Type+0x1e>
  {
    Lcd_type= LCD_CTRL_NT35510;
 80045d0:	2300      	movs	r3, #0
 80045d2:	71fb      	strb	r3, [r7, #7]
 80045d4:	e00b      	b.n	80045ee <Driver_Type+0x36>
  }
  else 
  {
    /* Read the OTM8009A ID */
    read_id = OTM8009A_ReadID();
 80045d6:	f7ff fa25 	bl	8003a24 <OTM8009A_ReadID>
 80045da:	4603      	mov	r3, r0
 80045dc:	81fb      	strh	r3, [r7, #14]
    if(read_id == OTM8009A_ID)
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d102      	bne.n	80045ea <Driver_Type+0x32>
    {
      Lcd_type= LCD_CTRL_OTM8009A;
 80045e4:	2301      	movs	r3, #1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	e001      	b.n	80045ee <Driver_Type+0x36>
    }
    else
    {
      Lcd_type= LCD_CTRL_NONE;
 80045ea:	2302      	movs	r3, #2
 80045ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return Lcd_type;
 80045ee:	79fb      	ldrb	r3, [r7, #7]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80045fc:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 80045fe:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <BSP_SDRAM_Init+0xb0>)
 8004600:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004602:	4b2a      	ldr	r3, [pc, #168]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004604:	2202      	movs	r2, #2
 8004606:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 800460a:	2207      	movs	r2, #7
 800460c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800460e:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004610:	2204      	movs	r2, #4
 8004612:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004614:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004616:	2207      	movs	r2, #7
 8004618:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800461a:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 800461c:	2202      	movs	r2, #2
 800461e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004620:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004622:	2202      	movs	r2, #2
 8004624:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004626:	4b21      	ldr	r3, [pc, #132]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004628:	2202      	movs	r2, #2
 800462a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800462e:	2200      	movs	r2, #0
 8004630:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004632:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800463a:	2204      	movs	r2, #4
 800463c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800463e:	4b19      	ldr	r3, [pc, #100]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004640:	2220      	movs	r2, #32
 8004642:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004644:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004646:	2240      	movs	r2, #64	@ 0x40
 8004648:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800464a:	4b16      	ldr	r3, [pc, #88]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800464c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004650:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004652:	4b14      	ldr	r3, [pc, #80]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004654:	2200      	movs	r2, #0
 8004656:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800465a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800465e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004660:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004662:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004668:	4b0e      	ldr	r3, [pc, #56]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800466a:	2200      	movs	r2, #0
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800466e:	2100      	movs	r1, #0
 8004670:	480c      	ldr	r0, [pc, #48]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 8004672:	f000 f87f 	bl	8004774 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004676:	490d      	ldr	r1, [pc, #52]	@ (80046ac <BSP_SDRAM_Init+0xb4>)
 8004678:	480a      	ldr	r0, [pc, #40]	@ (80046a4 <BSP_SDRAM_Init+0xac>)
 800467a:	f007 fd85 	bl	800c188 <HAL_SDRAM_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <BSP_SDRAM_Init+0xb8>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e002      	b.n	8004692 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800468c:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <BSP_SDRAM_Init+0xb8>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004692:	f240 6003 	movw	r0, #1539	@ 0x603
 8004696:	f000 f80d 	bl	80046b4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <BSP_SDRAM_Init+0xb8>)
 800469c:	781b      	ldrb	r3, [r3, #0]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200012d4 	.word	0x200012d4
 80046a8:	a0000140 	.word	0xa0000140
 80046ac:	20001308 	.word	0x20001308
 80046b0:	20000014 	.word	0x20000014

080046b4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046c8:	2210      	movs	r2, #16
 80046ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80046d2:	4b26      	ldr	r3, [pc, #152]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80046d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046dc:	4923      	ldr	r1, [pc, #140]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046de:	4824      	ldr	r0, [pc, #144]	@ (8004770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046e0:	f007 fd86 	bl	800c1f0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80046e4:	2001      	movs	r0, #1
 80046e6:	f000 f96d 	bl	80049c4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ec:	2202      	movs	r2, #2
 80046ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046f0:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046f2:	2210      	movs	r2, #16
 80046f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004706:	4919      	ldr	r1, [pc, #100]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004708:	4819      	ldr	r0, [pc, #100]	@ (8004770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800470a:	f007 fd71 	bl	800c1f0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800470e:	4b17      	ldr	r3, [pc, #92]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004710:	2203      	movs	r2, #3
 8004712:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004714:	4b15      	ldr	r3, [pc, #84]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004716:	2210      	movs	r2, #16
 8004718:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800471a:	4b14      	ldr	r3, [pc, #80]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800471c:	2208      	movs	r2, #8
 800471e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004720:	4b12      	ldr	r3, [pc, #72]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004722:	2200      	movs	r2, #0
 8004724:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800472a:	4910      	ldr	r1, [pc, #64]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800472c:	4810      	ldr	r0, [pc, #64]	@ (8004770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800472e:	f007 fd5f 	bl	800c1f0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004732:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004736:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800473a:	2204      	movs	r2, #4
 800473c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800473e:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004740:	2210      	movs	r2, #16
 8004742:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004744:	4b09      	ldr	r3, [pc, #36]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004746:	2201      	movs	r2, #1
 8004748:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a07      	ldr	r2, [pc, #28]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800474e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004754:	4905      	ldr	r1, [pc, #20]	@ (800476c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004756:	4806      	ldr	r0, [pc, #24]	@ (8004770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004758:	f007 fd4a 	bl	800c1f0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4804      	ldr	r0, [pc, #16]	@ (8004770 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004760:	f007 fd7b 	bl	800c25a <HAL_SDRAM_ProgramRefreshRate>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20001324 	.word	0x20001324
 8004770:	200012d4 	.word	0x200012d4

08004774 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004774:	b580      	push	{r7, lr}
 8004776:	b090      	sub	sp, #64	@ 0x40
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800477e:	4b71      	ldr	r3, [pc, #452]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6393      	str	r3, [r2, #56]	@ 0x38
 800478a:	4b6e      	ldr	r3, [pc, #440]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004796:	4b6b      	ldr	r3, [pc, #428]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	4a6a      	ldr	r2, [pc, #424]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 800479c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a2:	4b68      	ldr	r3, [pc, #416]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ae:	4b65      	ldr	r3, [pc, #404]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	4a64      	ldr	r2, [pc, #400]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047b4:	f043 0308 	orr.w	r3, r3, #8
 80047b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ba:	4b62      	ldr	r3, [pc, #392]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047cc:	f043 0310 	orr.w	r3, r3, #16
 80047d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047de:	4b59      	ldr	r3, [pc, #356]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	4a58      	ldr	r2, [pc, #352]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ea:	4b56      	ldr	r3, [pc, #344]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047f6:	4b53      	ldr	r3, [pc, #332]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	4a52      	ldr	r2, [pc, #328]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 80047fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004800:	6313      	str	r3, [r2, #48]	@ 0x30
 8004802:	4b50      	ldr	r3, [pc, #320]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800480e:	4b4d      	ldr	r3, [pc, #308]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	4a4c      	ldr	r2, [pc, #304]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004818:	6313      	str	r3, [r2, #48]	@ 0x30
 800481a:	4b4a      	ldr	r3, [pc, #296]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482a:	4a46      	ldr	r2, [pc, #280]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004830:	6313      	str	r3, [r2, #48]	@ 0x30
 8004832:	4b44      	ldr	r3, [pc, #272]	@ (8004944 <BSP_SDRAM_MspInit+0x1d0>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004842:	2301      	movs	r3, #1
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004846:	2303      	movs	r3, #3
 8004848:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800484a:	230c      	movs	r3, #12
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800484e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004852:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004858:	4619      	mov	r1, r3
 800485a:	483b      	ldr	r0, [pc, #236]	@ (8004948 <BSP_SDRAM_MspInit+0x1d4>)
 800485c:	f003 fb5a 	bl	8007f14 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004860:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004866:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800486a:	4619      	mov	r1, r3
 800486c:	4837      	ldr	r0, [pc, #220]	@ (800494c <BSP_SDRAM_MspInit+0x1d8>)
 800486e:	f003 fb51 	bl	8007f14 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004872:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800487c:	4619      	mov	r1, r3
 800487e:	4834      	ldr	r0, [pc, #208]	@ (8004950 <BSP_SDRAM_MspInit+0x1dc>)
 8004880:	f003 fb48 	bl	8007f14 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8004884:	f248 1337 	movw	r3, #33079	@ 0x8137
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800488a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800488e:	4619      	mov	r1, r3
 8004890:	4830      	ldr	r0, [pc, #192]	@ (8004954 <BSP_SDRAM_MspInit+0x1e0>)
 8004892:	f003 fb3f 	bl	8007f14 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8004896:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800489c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048a0:	4619      	mov	r1, r3
 80048a2:	482d      	ldr	r0, [pc, #180]	@ (8004958 <BSP_SDRAM_MspInit+0x1e4>)
 80048a4:	f003 fb36 	bl	8007f14 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80048a8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80048ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048b2:	4619      	mov	r1, r3
 80048b4:	4829      	ldr	r0, [pc, #164]	@ (800495c <BSP_SDRAM_MspInit+0x1e8>)
 80048b6:	f003 fb2d 	bl	8007f14 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80048ba:	4b29      	ldr	r3, [pc, #164]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80048c0:	4b27      	ldr	r3, [pc, #156]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80048c6:	4b26      	ldr	r3, [pc, #152]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048cc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80048ce:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048d4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048d6:	4b22      	ldr	r3, [pc, #136]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80048dc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80048de:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80048e4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80048e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80048ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048f2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80048f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80048fa:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 80048fc:	2203      	movs	r2, #3
 80048fe:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004900:	4b17      	ldr	r3, [pc, #92]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 8004902:	2200      	movs	r2, #0
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004906:	4b16      	ldr	r3, [pc, #88]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800490c:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 800490e:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <BSP_SDRAM_MspInit+0x1f0>)
 8004910:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
 8004918:	4a11      	ldr	r2, [pc, #68]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800491e:	4810      	ldr	r0, [pc, #64]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 8004920:	f001 f824 	bl	800596c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004924:	480e      	ldr	r0, [pc, #56]	@ (8004960 <BSP_SDRAM_MspInit+0x1ec>)
 8004926:	f000 ff73 	bl	8005810 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	210f      	movs	r1, #15
 800492e:	2038      	movs	r0, #56	@ 0x38
 8004930:	f000 fd38 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004934:	2038      	movs	r0, #56	@ 0x38
 8004936:	f000 fd51 	bl	80053dc <HAL_NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3740      	adds	r7, #64	@ 0x40
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40021000 	.word	0x40021000
 8004950:	40021400 	.word	0x40021400
 8004954:	40021800 	.word	0x40021800
 8004958:	40021c00 	.word	0x40021c00
 800495c:	40022000 	.word	0x40022000
 8004960:	20001334 	.word	0x20001334
 8004964:	40026410 	.word	0x40026410

08004968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800496c:	2003      	movs	r0, #3
 800496e:	f000 fd0e 	bl	800538e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004972:	200f      	movs	r0, #15
 8004974:	f7fe fad4 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004978:	f7fd f8bc 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <HAL_IncTick+0x20>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_IncTick+0x24>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4413      	add	r3, r2
 8004994:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <HAL_IncTick+0x24>)
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	2000001c 	.word	0x2000001c
 80049a8:	20001394 	.word	0x20001394

080049ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return uwTick;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_GetTick+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20001394 	.word	0x20001394

080049c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049cc:	f7ff ffee 	bl	80049ac <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d005      	beq.n	80049ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049de:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <HAL_Delay+0x44>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049ea:	bf00      	nop
 80049ec:	f7ff ffde 	bl	80049ac <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d8f7      	bhi.n	80049ec <HAL_Delay+0x28>
  {
  }
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000001c 	.word	0x2000001c

08004a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e031      	b.n	8004a86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f886 	bl	8001b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <HAL_ADC_Init+0x84>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f970 	bl	8004d40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a76:	e001      	b.n	8004a7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	ffffeefd 	.word	0xffffeefd

08004a94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x1c>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e136      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x28a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b09      	cmp	r3, #9
 8004abe:	d93a      	bls.n	8004b36 <HAL_ADC_ConfigChannel+0xa2>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac8:	d035      	beq.n	8004b36 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68d9      	ldr	r1, [r3, #12]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	3b1e      	subs	r3, #30
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	400a      	ands	r2, r1
 8004aee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a8d      	ldr	r2, [pc, #564]	@ (8004d2c <HAL_ADC_ConfigChannel+0x298>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d10a      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68d9      	ldr	r1, [r3, #12]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b0e:	e035      	b.n	8004b7c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68d9      	ldr	r1, [r3, #12]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4618      	mov	r0, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4403      	add	r3, r0
 8004b28:	3b1e      	subs	r3, #30
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b34:	e022      	b.n	8004b7c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6919      	ldr	r1, [r3, #16]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43da      	mvns	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	400a      	ands	r2, r1
 8004b58:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6919      	ldr	r1, [r3, #16]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4403      	add	r3, r0
 8004b72:	409a      	lsls	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d824      	bhi.n	8004bce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	3b05      	subs	r3, #5
 8004b96:	221f      	movs	r2, #31
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3b05      	subs	r3, #5
 8004bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bcc:	e04c      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d824      	bhi.n	8004c20 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	3b23      	subs	r3, #35	@ 0x23
 8004be8:	221f      	movs	r2, #31
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4618      	mov	r0, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	3b23      	subs	r3, #35	@ 0x23
 8004c12:	fa00 f203 	lsl.w	r2, r0, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c1e:	e023      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	3b41      	subs	r3, #65	@ 0x41
 8004c32:	221f      	movs	r2, #31
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	400a      	ands	r2, r1
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	3b41      	subs	r3, #65	@ 0x41
 8004c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	@ (8004d30 <HAL_ADC_ConfigChannel+0x29c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x1f4>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c7a:	d105      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004c82:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004c86:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <HAL_ADC_ConfigChannel+0x29c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10f      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x21e>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b12      	cmp	r3, #18
 8004c98:	d10b      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004c9a:	4b26      	ldr	r3, [pc, #152]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a25      	ldr	r2, [pc, #148]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ca0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ca4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ca6:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cb0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_ADC_ConfigChannel+0x29c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d12b      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x280>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d2c <HAL_ADC_ConfigChannel+0x298>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <HAL_ADC_ConfigChannel+0x23a>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b11      	cmp	r3, #17
 8004ccc:	d122      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004cce:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cd4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004cd8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004cda:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ce0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ce4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a10      	ldr	r2, [pc, #64]	@ (8004d2c <HAL_ADC_ConfigChannel+0x298>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004cf0:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <HAL_ADC_ConfigChannel+0x2a4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9a      	lsrs	r2, r3, #18
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d06:	e002      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f9      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	10000012 	.word	0x10000012
 8004d30:	40012000 	.word	0x40012000
 8004d34:	40012300 	.word	0x40012300
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	431bde83 	.word	0x431bde83

08004d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004d48:	4b78      	ldr	r3, [pc, #480]	@ (8004f2c <ADC_Init+0x1ec>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a77      	ldr	r2, [pc, #476]	@ (8004f2c <ADC_Init+0x1ec>)
 8004d4e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004d52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004d54:	4b75      	ldr	r3, [pc, #468]	@ (8004f2c <ADC_Init+0x1ec>)
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4973      	ldr	r1, [pc, #460]	@ (8004f2c <ADC_Init+0x1ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6899      	ldr	r1, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	4a58      	ldr	r2, [pc, #352]	@ (8004f30 <ADC_Init+0x1f0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6899      	ldr	r1, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	e00f      	b.n	8004e3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0202 	bic.w	r2, r2, #2
 8004e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6899      	ldr	r1, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	005a      	lsls	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	3b01      	subs	r3, #1
 8004e94:	035a      	lsls	r2, r3, #13
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e007      	b.n	8004eb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	051a      	lsls	r2, r3, #20
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ef2:	025a      	lsls	r2, r3, #9
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6899      	ldr	r1, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	029a      	lsls	r2, r3, #10
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40012300 	.word	0x40012300
 8004f30:	0f000001 	.word	0x0f000001

08004f34 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_CEC_Init+0x16>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e04f      	b.n	8004fee <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd f846 	bl	8001ff0 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2224      	movs	r2, #36	@ 0x24
 8004f68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8004f8e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8004f9a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8004fa0:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8004fb4:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8004fb6:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2280      	movs	r2, #128	@ 0x80
 8005014:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005024:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01c      	beq.n	800506a <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2222      	movs	r2, #34	@ 0x22
 8005034:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800503a:	3301      	adds	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01e      	beq.n	80050b2 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0202 	orr.w	r2, r2, #2
 8005082:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005098:	425b      	negs	r3, r3
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f88b 	bl	80051c2 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d024      	beq.n	8005106 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0204 	orr.w	r2, r2, #4
 80050de:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005104:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510c:	2b00      	cmp	r3, #0
 800510e:	d014      	beq.n	800513a <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511e:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f83a 	bl	80051ae <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02f      	beq.n	80051a6 <HAL_CEC_IRQHandler+0x1b0>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6919      	ldr	r1, [r3, #16]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 800515a:	430b      	orrs	r3, r1
 800515c:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005170:	425b      	negs	r3, r3
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005184:	e00c      	b.n	80051a0 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <HAL_CEC_IRQHandler+0x1aa>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f819 	bl	80051d8 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051fc:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <__NVIC_SetPriorityGrouping+0x40>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <__NVIC_SetPriorityGrouping+0x44>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800521a:	4a04      	ldr	r2, [pc, #16]	@ (800522c <__NVIC_SetPriorityGrouping+0x40>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	60d3      	str	r3, [r2, #12]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000ed00 	.word	0xe000ed00
 8005230:	05fa0000 	.word	0x05fa0000

08005234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005238:	4b04      	ldr	r3, [pc, #16]	@ (800524c <__NVIC_GetPriorityGrouping+0x18>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f003 0307 	and.w	r3, r3, #7
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0b      	blt.n	800527a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	@ (8005288 <__NVIC_EnableIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	2b00      	cmp	r3, #0
 800529c:	db12      	blt.n	80052c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	490a      	ldr	r1, [pc, #40]	@ (80052d0 <__NVIC_DisableIRQ+0x44>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2001      	movs	r0, #1
 80052ae:	fa00 f202 	lsl.w	r2, r0, r2
 80052b2:	3320      	adds	r3, #32
 80052b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80052b8:	f3bf 8f4f 	dsb	sy
}
 80052bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052be:	f3bf 8f6f 	isb	sy
}
 80052c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000e100 	.word	0xe000e100

080052d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db0a      	blt.n	80052fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	490c      	ldr	r1, [pc, #48]	@ (8005320 <__NVIC_SetPriority+0x4c>)
 80052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	440b      	add	r3, r1
 80052f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052fc:	e00a      	b.n	8005314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4908      	ldr	r1, [pc, #32]	@ (8005324 <__NVIC_SetPriority+0x50>)
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	3b04      	subs	r3, #4
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	440b      	add	r3, r1
 8005312:	761a      	strb	r2, [r3, #24]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000e100 	.word	0xe000e100
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	@ 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f1c3 0307 	rsb	r3, r3, #7
 8005342:	2b04      	cmp	r3, #4
 8005344:	bf28      	it	cs
 8005346:	2304      	movcs	r3, #4
 8005348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3304      	adds	r3, #4
 800534e:	2b06      	cmp	r3, #6
 8005350:	d902      	bls.n	8005358 <NVIC_EncodePriority+0x30>
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3b03      	subs	r3, #3
 8005356:	e000      	b.n	800535a <NVIC_EncodePriority+0x32>
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	f04f 32ff 	mov.w	r2, #4294967295
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	401a      	ands	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005370:	f04f 31ff 	mov.w	r1, #4294967295
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	43d9      	mvns	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	4313      	orrs	r3, r2
         );
}
 8005382:	4618      	mov	r0, r3
 8005384:	3724      	adds	r7, #36	@ 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff ff28 	bl	80051ec <__NVIC_SetPriorityGrouping>
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053b6:	f7ff ff3d 	bl	8005234 <__NVIC_GetPriorityGrouping>
 80053ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f7ff ffb1 	bl	8005328 <NVIC_EncodePriority>
 80053c6:	4602      	mov	r2, r0
 80053c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff ff80 	bl	80052d4 <__NVIC_SetPriority>
}
 80053d4:	bf00      	nop
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff ff30 	bl	8005250 <__NVIC_EnableIRQ>
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff ff40 	bl	800528c <__NVIC_DisableIRQ>
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e054      	b.n	80054d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7f5b      	ldrb	r3, [r3, #29]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fc08 	bl	8001c4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a22      	ldr	r2, [pc, #136]	@ (80054d8 <HAL_CRC_Init+0xc4>)
 8005450:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0218 	bic.w	r2, r2, #24
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	e00c      	b.n	800547e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6899      	ldr	r1, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	461a      	mov	r2, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f834 	bl	80054dc <HAL_CRCEx_Polynomial_Set>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e028      	b.n	80054d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	795b      	ldrb	r3, [r3, #5]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	611a      	str	r2, [r3, #16]
 8005490:	e004      	b.n	800549c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6912      	ldr	r2, [r2, #16]
 800549a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	04c11db7 	.word	0x04c11db7

080054dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80054ec:	231f      	movs	r3, #31
 80054ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
 80054fe:	e063      	b.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005500:	bf00      	nop
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	613a      	str	r2, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HAL_CRCEx_Polynomial_Set+0x44>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b18      	cmp	r3, #24
 8005524:	d846      	bhi.n	80055b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005526:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	080055bb 	.word	0x080055bb
 8005530:	080055b5 	.word	0x080055b5
 8005534:	080055b5 	.word	0x080055b5
 8005538:	080055b5 	.word	0x080055b5
 800553c:	080055b5 	.word	0x080055b5
 8005540:	080055b5 	.word	0x080055b5
 8005544:	080055b5 	.word	0x080055b5
 8005548:	080055b5 	.word	0x080055b5
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055b5 	.word	0x080055b5
 8005554:	080055b5 	.word	0x080055b5
 8005558:	080055b5 	.word	0x080055b5
 800555c:	080055b5 	.word	0x080055b5
 8005560:	080055b5 	.word	0x080055b5
 8005564:	080055b5 	.word	0x080055b5
 8005568:	080055b5 	.word	0x080055b5
 800556c:	0800559d 	.word	0x0800559d
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055b5 	.word	0x080055b5
 800557c:	080055b5 	.word	0x080055b5
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055b5 	.word	0x080055b5
 8005588:	080055b5 	.word	0x080055b5
 800558c:	08005591 	.word	0x08005591
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d913      	bls.n	80055be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800559a:	e010      	b.n	80055be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b07      	cmp	r3, #7
 80055a0:	d90f      	bls.n	80055c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80055a6:	e00c      	b.n	80055c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d90b      	bls.n	80055c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80055b2:	e008      	b.n	80055c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75fb      	strb	r3, [r7, #23]
        break;
 80055b8:	e006      	b.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055ba:	bf00      	nop
 80055bc:	e004      	b.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80055c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f023 0118 	bic.w	r1, r3, #24
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0ac      	b.n	8005764 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f8b2 	bl	8005778 <DFSDM_GetChannelFromInstance>
 8005614:	4603      	mov	r3, r0
 8005616:	4a55      	ldr	r2, [pc, #340]	@ (800576c <HAL_DFSDM_ChannelInit+0x174>)
 8005618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e09f      	b.n	8005764 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fc fb31 	bl	8001c8c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800562a:	4b51      	ldr	r3, [pc, #324]	@ (8005770 <HAL_DFSDM_ChannelInit+0x178>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	4a4f      	ldr	r2, [pc, #316]	@ (8005770 <HAL_DFSDM_ChannelInit+0x178>)
 8005632:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8005634:	4b4e      	ldr	r3, [pc, #312]	@ (8005770 <HAL_DFSDM_ChannelInit+0x178>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d125      	bne.n	8005688 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800563c:	4b4d      	ldr	r3, [pc, #308]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a4c      	ldr	r2, [pc, #304]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 8005642:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005646:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005648:	4b4a      	ldr	r3, [pc, #296]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4948      	ldr	r1, [pc, #288]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005656:	4b47      	ldr	r3, [pc, #284]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 800565c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005660:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	791b      	ldrb	r3, [r3, #4]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d108      	bne.n	800567c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800566a:	4b42      	ldr	r3, [pc, #264]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	3b01      	subs	r3, #1
 8005674:	041b      	lsls	r3, r3, #16
 8005676:	493f      	ldr	r1, [pc, #252]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 8005678:	4313      	orrs	r3, r2
 800567a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800567c:	4b3d      	ldr	r3, [pc, #244]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3c      	ldr	r2, [pc, #240]	@ (8005774 <HAL_DFSDM_ChannelInit+0x17c>)
 8005682:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005686:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8005696:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80056a6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80056ac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 020f 	bic.w	r2, r2, #15
 80056c4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80056ec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6899      	ldr	r1, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f002 0207 	and.w	r2, r2, #7
 8005718:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005744:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f810 	bl	8005778 <DFSDM_GetChannelFromInstance>
 8005758:	4602      	mov	r2, r0
 800575a:	4904      	ldr	r1, [pc, #16]	@ (800576c <HAL_DFSDM_ChannelInit+0x174>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	2000139c 	.word	0x2000139c
 8005770:	20001398 	.word	0x20001398
 8005774:	40017400 	.word	0x40017400

08005778 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1c      	ldr	r2, [pc, #112]	@ (80057f4 <DFSDM_GetChannelFromInstance+0x7c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d102      	bne.n	800578e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e02b      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <DFSDM_GetChannelFromInstance+0x80>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d102      	bne.n	800579c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e024      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a17      	ldr	r2, [pc, #92]	@ (80057fc <DFSDM_GetChannelFromInstance+0x84>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d102      	bne.n	80057aa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80057a4:	2302      	movs	r3, #2
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e01d      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a14      	ldr	r2, [pc, #80]	@ (8005800 <DFSDM_GetChannelFromInstance+0x88>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d102      	bne.n	80057b8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80057b2:	2303      	movs	r3, #3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e016      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <DFSDM_GetChannelFromInstance+0x8c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d102      	bne.n	80057c6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80057c0:	2304      	movs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e00f      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005808 <DFSDM_GetChannelFromInstance+0x90>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d102      	bne.n	80057d4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80057ce:	2305      	movs	r3, #5
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e008      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a0d      	ldr	r2, [pc, #52]	@ (800580c <DFSDM_GetChannelFromInstance+0x94>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d102      	bne.n	80057e2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80057dc:	2306      	movs	r3, #6
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e001      	b.n	80057e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80057e2:	2307      	movs	r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40017400 	.word	0x40017400
 80057f8:	40017420 	.word	0x40017420
 80057fc:	40017440 	.word	0x40017440
 8005800:	40017460 	.word	0x40017460
 8005804:	40017480 	.word	0x40017480
 8005808:	400174a0 	.word	0x400174a0
 800580c:	400174c0 	.word	0x400174c0

08005810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800581c:	f7ff f8c6 	bl	80049ac <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e099      	b.n	8005960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800584c:	e00f      	b.n	800586e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800584e:	f7ff f8ad 	bl	80049ac <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b05      	cmp	r3, #5
 800585a:	d908      	bls.n	800586e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2203      	movs	r2, #3
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e078      	b.n	8005960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e8      	bne.n	800584e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4b38      	ldr	r3, [pc, #224]	@ (8005968 <HAL_DMA_Init+0x158>)
 8005888:	4013      	ands	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d107      	bne.n	80058d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d0:	4313      	orrs	r3, r2
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0307 	bic.w	r3, r3, #7
 80058ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d117      	bne.n	8005932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8bd 	bl	8005a94 <DMA_CheckFifoParam>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	@ 0x40
 8005924:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800592e:	2301      	movs	r3, #1
 8005930:	e016      	b.n	8005960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f874 	bl	8005a28 <DMA_CalcBaseAndBitshift>
 8005940:	4603      	mov	r3, r0
 8005942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	223f      	movs	r2, #63	@ 0x3f
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e010803f 	.word	0xe010803f

0800596c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e050      	b.n	8005a20 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d101      	bne.n	800598e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	e048      	b.n	8005a20 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2221      	movs	r2, #33	@ 0x21
 80059cc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f82a 	bl	8005a28 <DMA_CalcBaseAndBitshift>
 80059d4:	4603      	mov	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059dc:	223f      	movs	r2, #63	@ 0x3f
 80059de:	409a      	lsls	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3b10      	subs	r3, #16
 8005a38:	4a13      	ldr	r2, [pc, #76]	@ (8005a88 <DMA_CalcBaseAndBitshift+0x60>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a42:	4a12      	ldr	r2, [pc, #72]	@ (8005a8c <DMA_CalcBaseAndBitshift+0x64>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d908      	bls.n	8005a68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <DMA_CalcBaseAndBitshift+0x68>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	1d1a      	adds	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a66:	e006      	b.n	8005a76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <DMA_CalcBaseAndBitshift+0x68>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	aaaaaaab 	.word	0xaaaaaaab
 8005a8c:	08010b20 	.word	0x08010b20
 8005a90:	fffffc00 	.word	0xfffffc00

08005a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11f      	bne.n	8005aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d856      	bhi.n	8005b62 <DMA_CheckFifoParam+0xce>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <DMA_CheckFifoParam+0x28>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005adf 	.word	0x08005adf
 8005ac4:	08005acd 	.word	0x08005acd
 8005ac8:	08005b63 	.word	0x08005b63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d046      	beq.n	8005b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005adc:	e043      	b.n	8005b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ae6:	d140      	bne.n	8005b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aec:	e03d      	b.n	8005b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	d121      	bne.n	8005b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d837      	bhi.n	8005b6e <DMA_CheckFifoParam+0xda>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <DMA_CheckFifoParam+0x70>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b1b 	.word	0x08005b1b
 8005b0c:	08005b15 	.word	0x08005b15
 8005b10:	08005b2d 	.word	0x08005b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e030      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d025      	beq.n	8005b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2a:	e022      	b.n	8005b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b34:	d11f      	bne.n	8005b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b3a:	e01c      	b.n	8005b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d903      	bls.n	8005b4a <DMA_CheckFifoParam+0xb6>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d003      	beq.n	8005b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b48:	e018      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4e:	e015      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e00b      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b62:	bf00      	nop
 8005b64:	e00a      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b66:	bf00      	nop
 8005b68:	e008      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e006      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop

08005b8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e049      	b.n	8005c32 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fc f8f2 	bl	8001d9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bdc:	f023 0107 	bic.w	r1, r3, #7
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bf2:	4b12      	ldr	r3, [pc, #72]	@ (8005c3c <HAL_DMA2D_Init+0xb0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68d1      	ldr	r1, [r2, #12]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6413      	str	r3, [r2, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c08:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	051a      	lsls	r2, r3, #20
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	055b      	lsls	r3, r3, #21
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	ffffc000 	.word	0xffffc000

08005c40 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_DMA2D_Start+0x1c>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e018      	b.n	8005c8e <HAL_DMA2D_Start+0x4e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 faa4 	bl	80061c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d056      	beq.n	8005d60 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb2:	f7fe fe7b 	bl	80049ac <HAL_GetTick>
 8005cb6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cb8:	e04b      	b.n	8005d52 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d023      	beq.n	8005d14 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cda:	f043 0202 	orr.w	r2, r3, #2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2221      	movs	r2, #33	@ 0x21
 8005cfe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2204      	movs	r2, #4
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0a5      	b.n	8005e60 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d01a      	beq.n	8005d52 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d1c:	f7fe fe46 	bl	80049ac <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d302      	bcc.n	8005d32 <HAL_DMA2D_PollForTransfer+0x9c>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	f043 0220 	orr.w	r2, r3, #32
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e086      	b.n	8005e60 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ac      	beq.n	8005cba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d061      	beq.n	8005e46 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d82:	f7fe fe13 	bl	80049ac <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d88:	e056      	b.n	8005e38 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02e      	beq.n	8005dfa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005daa:	f043 0204 	orr.w	r2, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2229      	movs	r2, #41	@ 0x29
 8005de4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2204      	movs	r2, #4
 8005dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e032      	b.n	8005e60 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d01a      	beq.n	8005e38 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fe fdd3 	bl	80049ac <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <HAL_DMA2D_PollForTransfer+0x182>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2203      	movs	r2, #3
 8005e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e013      	b.n	8005e60 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0a1      	beq.n	8005d8a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2212      	movs	r2, #18
 8005e4c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d026      	beq.n	8005ed8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d021      	beq.n	8005ed8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea8:	f043 0201 	orr.w	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d026      	beq.n	8005f30 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d021      	beq.n	8005f30 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005efa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2220      	movs	r2, #32
 8005f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f043 0202 	orr.w	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d026      	beq.n	8005f88 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d021      	beq.n	8005f88 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f52:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f60:	f043 0204 	orr.w	r2, r3, #4
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005faa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f853 	bl	8006060 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d024      	beq.n	800600e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01f      	beq.n	800600e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01f      	beq.n	8006058 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01a      	beq.n	8006058 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006030:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2210      	movs	r2, #16
 8006038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f80e 	bl	8006074 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_DMA2D_ConfigLayer+0x20>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e084      	b.n	80061b2 <HAL_DMA2D_ConfigLayer+0x12a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	3320      	adds	r3, #32
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060dc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80060e8:	4b35      	ldr	r3, [pc, #212]	@ (80061c0 <HAL_DMA2D_ConfigLayer+0x138>)
 80060ea:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b0a      	cmp	r3, #10
 80060f2:	d003      	beq.n	80060fc <HAL_DMA2D_ConfigLayer+0x74>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b09      	cmp	r3, #9
 80060fa:	d107      	bne.n	800610c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e005      	b.n	8006118 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d120      	bne.n	8006160 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	43db      	mvns	r3, r3
 8006128:	ea02 0103 	and.w	r1, r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	430a      	orrs	r2, r1
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b0a      	cmp	r3, #10
 8006146:	d003      	beq.n	8006150 <HAL_DMA2D_ConfigLayer+0xc8>
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b09      	cmp	r3, #9
 800614e:	d127      	bne.n	80061a0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800615c:	629a      	str	r2, [r3, #40]	@ 0x28
 800615e:	e01f      	b.n	80061a0 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	43db      	mvns	r3, r3
 800616a:	ea02 0103 	and.w	r1, r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	430a      	orrs	r2, r1
 8006176:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b0a      	cmp	r3, #10
 8006188:	d003      	beq.n	8006192 <HAL_DMA2D_ConfigLayer+0x10a>
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b09      	cmp	r3, #9
 8006190:	d106      	bne.n	80061a0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800619e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	ff33000f 	.word	0xff33000f

080061c4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b08b      	sub	sp, #44	@ 0x2c
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	041a      	lsls	r2, r3, #16
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061fc:	d174      	bne.n	80062e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006204:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800620c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006214:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d108      	bne.n	8006236 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	431a      	orrs	r2, r3
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	4313      	orrs	r3, r2
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
 8006234:	e053      	b.n	80062de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4313      	orrs	r3, r2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
 800624a:	e048      	b.n	80062de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d111      	bne.n	8006278 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	0cdb      	lsrs	r3, r3, #19
 8006258:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	0a9b      	lsrs	r3, r3, #10
 800625e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	02db      	lsls	r3, r3, #11
 800626e:	4313      	orrs	r3, r2
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
 8006276:	e032      	b.n	80062de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d117      	bne.n	80062b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	0fdb      	lsrs	r3, r3, #31
 8006284:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	0cdb      	lsrs	r3, r3, #19
 800628a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	0adb      	lsrs	r3, r3, #11
 8006290:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	431a      	orrs	r2, r3
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	03db      	lsls	r3, r3, #15
 80062a6:	4313      	orrs	r3, r2
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ae:	e016      	b.n	80062de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	0f1b      	lsrs	r3, r3, #28
 80062b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	0d1b      	lsrs	r3, r3, #20
 80062ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	0b1b      	lsrs	r3, r3, #12
 80062c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	431a      	orrs	r2, r3
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	4313      	orrs	r3, r2
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80062e6:	e003      	b.n	80062f0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	60da      	str	r2, [r3, #12]
}
 80062f0:	bf00      	nop
 80062f2:	372c      	adds	r7, #44	@ 0x2c
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	019a      	lsls	r2, r3, #6
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	431a      	orrs	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	431a      	orrs	r2, r3
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800633c:	f7fe fb36 	bl	80049ac <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006342:	e009      	b.n	8006358 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006344:	f7fe fb32 	bl	80049ac <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006352:	d901      	bls.n	8006358 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e015      	b.n	8006384 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ee      	beq.n	8006344 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	019a      	lsls	r2, r3, #6
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	431a      	orrs	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	ea42 0103 	orr.w	r1, r2, r3
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	041a      	lsls	r2, r3, #16
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e16c      	b.n	800667a <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7c5b      	ldrb	r3, [r3, #17]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fd1c 	bl	8001de8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2203      	movs	r2, #3
 80063b4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80063ca:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80063d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063de:	f7fe fae5 	bl	80049ac <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80063e4:	e009      	b.n	80063fa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80063e6:	f7fe fae1 	bl	80049ac <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063f4:	d901      	bls.n	80063fa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e13f      	b.n	800667a <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0ed      	beq.n	80063e6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b9b      	ldr	r3, [pc, #620]	@ (8006684 <HAL_DSI_Init+0x2f8>)
 8006418:	400b      	ands	r3, r1
 800641a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006432:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800643a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800646e:	2001      	movs	r0, #1
 8006470:	f7fe faa8 	bl	80049c4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8006474:	f7fe fa9a 	bl	80049ac <HAL_GetTick>
 8006478:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800647a:	e009      	b.n	8006490 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800647c:	f7fe fa96 	bl	80049ac <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800648a:	d901      	bls.n	8006490 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e0f4      	b.n	800667a <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0ed      	beq.n	800647c <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80064d0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6899      	ldr	r1, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0202 	orr.w	r2, r2, #2
 80064f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0204 	orr.w	r2, r2, #4
 8006508:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0203 	bic.w	r2, r2, #3
 800651c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006536:	f7fe fa39 	bl	80049ac <HAL_GetTick>
 800653a:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d123      	bne.n	8006594 <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800654c:	e00c      	b.n	8006568 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800654e:	f7fe fa2d 	bl	80049ac <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800655c:	d904      	bls.n	8006568 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e088      	b.n	800667a <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006570:	f003 0314 	and.w	r3, r3, #20
 8006574:	2b14      	cmp	r3, #20
 8006576:	d1ea      	bne.n	800654e <HAL_DSI_Init+0x1c2>
 8006578:	e014      	b.n	80065a4 <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800657a:	f7fe fa17 	bl	80049ac <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006588:	d904      	bls.n	8006594 <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e072      	b.n	800667a <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800659c:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80065a0:	2b94      	cmp	r3, #148	@ 0x94
 80065a2:	d1ea      	bne.n	800657a <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_DSI_Init+0x226>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	e000      	b.n	80065b4 <HAL_DSI_Init+0x228>
 80065b2:	2301      	movs	r3, #1
 80065b4:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	4a33      	ldr	r2, [pc, #204]	@ (8006688 <HAL_DSI_Init+0x2fc>)
 80065ba:	fb03 f202 	mul.w	r2, r3, r2
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	409a      	lsls	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80065ea:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0203 	bic.w	r2, r2, #3
 800664e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3728      	adds	r7, #40	@ 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	fffc8603 	.word	0xfffc8603
 8006688:	003d0900 	.word	0x003d0900

0800668c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e066      	b.n	800676c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2203      	movs	r2, #3
 80066a2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0208 	bic.w	r2, r2, #8
 80066b8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0206 	bic.w	r2, r2, #6
 80066fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800673e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800674a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fb fb94 	bl	8001e80 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7c1b      	ldrb	r3, [r3, #16]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_DSI_ConfigErrorMonitor+0x16>
 8006786:	2302      	movs	r3, #2
 8006788:	e0aa      	b.n	80068e0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067c4:	430b      	orrs	r3, r1
 80067c6:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80067e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0202 	orr.w	r2, r2, #2
 8006820:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 020c 	orr.w	r2, r2, #12
 800683e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0210 	orr.w	r2, r2, #16
 800685c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0220 	orr.w	r2, r2, #32
 800687a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006898:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068b6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80068d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00f      	beq.n	8006924 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2201      	movs	r2, #1
 800691a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f8ad 	bl	8006a7e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2202      	movs	r2, #2
 800694a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f89f 	bl	8006a92 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 808c 	beq.w	8006a76 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006966:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800697e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4013      	ands	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f043 0202 	orr.w	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f043 0208 	orr.w	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f043 0210 	orr.w	r2, r3, #16
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f818 	bl	8006aa6 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1b      	ldrb	r3, [r3, #16]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_DSI_SetGenericVCID+0x16>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e016      	b.n	8006afe <HAL_DSI_SetGenericVCID+0x44>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0203 	bic.w	r2, r2, #3
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	7c1b      	ldrb	r3, [r3, #16]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_DSI_ConfigVideoMode+0x16>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e1ee      	b.n	8006f00 <HAL_DSI_ConfigVideoMode+0x3f4>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0203 	bic.w	r2, r2, #3
 8006b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4b8b      	ldr	r3, [pc, #556]	@ (8006da8 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006b7a:	400b      	ands	r3, r1
 8006b7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b84      	ldr	r3, [pc, #528]	@ (8006dac <HAL_DSI_ConfigVideoMode+0x2a0>)
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8006dac <HAL_DSI_ConfigVideoMode+0x2a0>)
 8006bbe:	400b      	ands	r3, r1
 8006bc0:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0203 	bic.w	r2, r2, #3
 8006be2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68d9      	ldr	r1, [r3, #12]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0207 	bic.w	r2, r2, #7
 8006c04:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6959      	ldr	r1, [r3, #20]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 020f 	bic.w	r2, r2, #15
 8006c32:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6919      	ldr	r1, [r3, #16]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 020e 	bic.w	r2, r2, #14
 8006c56:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	005a      	lsls	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d110      	bne.n	8006c9c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c88:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6919      	ldr	r1, [r3, #16]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b42      	ldr	r3, [pc, #264]	@ (8006db0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8006ca8:	400b      	ands	r3, r1
 8006caa:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b39      	ldr	r3, [pc, #228]	@ (8006db0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b32      	ldr	r3, [pc, #200]	@ (8006db4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8006cec:	400b      	ands	r3, r1
 8006cee:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006db8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b22      	ldr	r3, [pc, #136]	@ (8006db8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006d30:	400b      	ands	r3, r1
 8006d32:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006d52:	400b      	ands	r3, r1
 8006d54:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006d74:	400b      	ands	r3, r1
 8006d76:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d98:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da4:	e00a      	b.n	8006dbc <HAL_DSI_ConfigVideoMode+0x2b0>
 8006da6:	bf00      	nop
 8006da8:	ffffc000 	.word	0xffffc000
 8006dac:	ffffe000 	.word	0xffffe000
 8006db0:	fffff000 	.word	0xfffff000
 8006db4:	ffff8000 	.word	0xffff8000
 8006db8:	fffffc00 	.word	0xfffffc00
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8006dd2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6999      	ldr	r1, [r3, #24]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dde:	041a      	lsls	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006df6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6999      	ldr	r1, [r3, #24]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e18:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ee4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7c1b      	ldrb	r3, [r3, #16]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0c5      	b.n	80070ae <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0203 	bic.w	r2, r2, #3
 8006f6e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68d9      	ldr	r1, [r3, #12]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0207 	bic.w	r2, r2, #7
 8006f90:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6959      	ldr	r1, [r3, #20]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 020f 	bic.w	r2, r2, #15
 8006fbe:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6919      	ldr	r1, [r3, #16]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 020e 	bic.w	r2, r2, #14
 8006fe2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	005a      	lsls	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	4b2c      	ldr	r3, [pc, #176]	@ (80070bc <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800700a:	400b      	ands	r3, r1
 800700c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007030:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	431a      	orrs	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0202 	orr.w	r2, r2, #2
 80070a2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	ffff0000 	.word	0xffff0000

080070c0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7c1b      	ldrb	r3, [r3, #16]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_DSI_ConfigCommand+0x16>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e049      	b.n	800716a <HAL_DSI_ConfigCommand+0xaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <HAL_DSI_ConfigCommand+0xb8>)
 80070e8:	400b      	ands	r3, r1
 80070ea:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80070fa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8007100:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8007106:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800710c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8007112:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8007118:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800711e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8007124:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800712a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8007130:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8007136:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0202 	bic.w	r2, r2, #2
 800714e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	fef080ff 	.word	0xfef080ff

0800717c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7c1b      	ldrb	r3, [r3, #16]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_DSI_ConfigFlowControl+0x16>
 800718e:	2302      	movs	r3, #2
 8007190:	e016      	b.n	80071c0 <HAL_DSI_ConfigFlowControl+0x44>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 021f 	bic.w	r2, r2, #31
 80071a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7c1b      	ldrb	r3, [r3, #16]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_DSI_ConfigPhyTimer+0x16>
 80071de:	2302      	movs	r3, #2
 80071e0:	e058      	b.n	8007294 <HAL_DSI_ConfigPhyTimer+0xc8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bf38      	it	cc
 80071f4:	4613      	movcc	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007208:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	041a      	lsls	r2, r3, #16
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8007236:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007270:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	021a      	lsls	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	7c1b      	ldrb	r3, [r3, #16]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e0b4      	b.n	8007420 <HAL_DSI_ConfigHostTimeouts+0x180>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80072ca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6899      	ldr	r1, [r3, #8]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	b292      	uxth	r2, r2
 80072ec:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	041a      	lsls	r2, r3, #16
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	4b47      	ldr	r3, [pc, #284]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800730e:	400b      	ands	r3, r1
 8007310:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b3f      	ldr	r3, [pc, #252]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007330:	400b      	ands	r3, r1
 8007332:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b36      	ldr	r3, [pc, #216]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007354:	400b      	ands	r3, r1
 8007356:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4b2b      	ldr	r3, [pc, #172]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800737e:	400b      	ands	r3, r1
 8007380:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695a      	ldr	r2, [r3, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	4b16      	ldr	r3, [pc, #88]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80073d2:	400b      	ands	r3, r1
 80073d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	69da      	ldr	r2, [r3, #28]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80073fc:	400b      	ands	r3, r1
 80073fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6a1a      	ldr	r2, [r3, #32]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	ffff0000 	.word	0xffff0000

08007430 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7c1b      	ldrb	r3, [r3, #16]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_DSI_Start+0x14>
 8007440:	2302      	movs	r3, #2
 8007442:	e02b      	b.n	800749c <HAL_DSI_Start+0x6c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800746c:	2300      	movs	r3, #0
 800746e:	60bb      	str	r3, [r7, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0208 	orr.w	r2, r2, #8
 8007480:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7c1b      	ldrb	r3, [r3, #16]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_DSI_Stop+0x14>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e02b      	b.n	8007514 <HAL_DSI_Stop+0x6c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0201 	bic.w	r2, r2, #1
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80074e4:	2300      	movs	r3, #0
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0208 	bic.w	r2, r2, #8
 80074f8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	7c1b      	ldrb	r3, [r3, #16]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_DSI_ShortWrite+0x1a>
 8007536:	2302      	movs	r3, #2
 8007538:	e010      	b.n	800755c <HAL_DSI_ShortWrite+0x3c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7fe feef 	bl	800632e <DSI_ShortWrite>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	741a      	strb	r2, [r3, #16]

  return status;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	@ 0x30
 8007568:	af02      	add	r7, sp, #8
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 8007572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007574:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	7c1b      	ldrb	r3, [r3, #16]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_DSI_LongWrite+0x1e>
 800757e:	2302      	movs	r3, #2
 8007580:	e084      	b.n	800768c <HAL_DSI_LongWrite+0x128>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007588:	f7fd fa10 	bl	80049ac <HAL_GetTick>
 800758c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800758e:	e00c      	b.n	80075aa <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007590:	f7fd fa0c 	bl	80049ac <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800759e:	d904      	bls.n	80075aa <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e070      	b.n	800768c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0eb      	beq.n	8007590 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	bf28      	it	cs
 80075c2:	2303      	movcs	r3, #3
 80075c4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	623b      	str	r3, [r7, #32]
 80075ca:	e00f      	b.n	80075ec <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	4413      	add	r3, r2
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	3301      	adds	r3, #1
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	3301      	adds	r3, #1
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	6a3a      	ldr	r2, [r7, #32]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3eb      	bcc.n	80075cc <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4413      	add	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800760c:	e028      	b.n	8007660 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	2b04      	cmp	r3, #4
 8007612:	bf28      	it	cs
 8007614:	2304      	movcs	r3, #4
 8007616:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800761c:	2300      	movs	r3, #0
 800761e:	623b      	str	r3, [r7, #32]
 8007620:	e00e      	b.n	8007640 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	4413      	add	r3, r2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	4313      	orrs	r3, r2
 8007638:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	3301      	adds	r3, #1
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d3ec      	bcc.n	8007622 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8007650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d3      	bne.n	800760e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800766e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007676:	b2db      	uxtb	r3, r3
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4613      	mov	r3, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	f7fe fe3c 	bl	80062fc <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3728      	adds	r7, #40	@ 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	@ 0x30
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_DSI_Read+0x22>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e0ae      	b.n	8007814 <HAL_DSI_Read+0x180>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d913      	bls.n	80076ea <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	2237      	movs	r2, #55	@ 0x37
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7fe fe2a 	bl	800632e <DSI_ShortWrite>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e094      	b.n	8007814 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d109      	bne.n	8007704 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	2300      	movs	r3, #0
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	f7fe fdfd 	bl	80062fc <DSI_ConfigPacketHeader>
 8007702:	e033      	b.n	800776c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	2b04      	cmp	r3, #4
 8007708:	d109      	bne.n	800771e <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f7fe fdf0 	bl	80062fc <DSI_ConfigPacketHeader>
 800771c:	e026      	b.n	800776c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	2b14      	cmp	r3, #20
 8007722:	d10c      	bne.n	800773e <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	2300      	movs	r3, #0
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	4613      	mov	r3, r2
 8007734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	f7fe fde0 	bl	80062fc <DSI_ConfigPacketHeader>
 800773c:	e016      	b.n	800776c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	2b24      	cmp	r3, #36	@ 0x24
 8007742:	d10e      	bne.n	8007762 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	3301      	adds	r3, #1
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	f7fe fdce 	bl	80062fc <DSI_ConfigPacketHeader>
 8007760:	e004      	b.n	800776c <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e053      	b.n	8007814 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800776c:	f7fd f91e 	bl	80049ac <HAL_GetTick>
 8007770:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8007772:	e048      	b.n	8007806 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b00      	cmp	r3, #0
 8007780:	d120      	bne.n	80077c4 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007788:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	2b04      	cmp	r3, #4
 800778e:	bf28      	it	cs
 8007790:	2304      	movcs	r3, #4
 8007792:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e010      	b.n	80077bc <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	701a      	strb	r2, [r3, #0]
        pdata++;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	3301      	adds	r3, #1
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3301      	adds	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3ea      	bcc.n	800779a <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80077c4:	f7fd f8f2 	bl	80049ac <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077d2:	d904      	bls.n	80077de <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e01a      	b.n	8007814 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10c      	bne.n	8007806 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d104      	bne.n	8007806 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e006      	b.n	8007814 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dcb3      	bgt.n	8007774 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3728      	adds	r7, #40	@ 0x28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7c1b      	ldrb	r3, [r3, #16]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800782e:	2302      	movs	r3, #2
 8007830:	e01b      	b.n	800786a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8007848:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	065a      	lsls	r2, r3, #25
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e086      	b.n	8007998 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2223      	movs	r2, #35	@ 0x23
 8007898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fa fb0f 	bl	8001ec0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078a2:	4b3f      	ldr	r3, [pc, #252]	@ (80079a0 <HAL_ETH_Init+0x128>)
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	4a3e      	ldr	r2, [pc, #248]	@ (80079a0 <HAL_ETH_Init+0x128>)
 80078a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ae:	4b3c      	ldr	r3, [pc, #240]	@ (80079a0 <HAL_ETH_Init+0x128>)
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80078ba:	4b3a      	ldr	r3, [pc, #232]	@ (80079a4 <HAL_ETH_Init+0x12c>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4a39      	ldr	r2, [pc, #228]	@ (80079a4 <HAL_ETH_Init+0x12c>)
 80078c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80078c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80078c6:	4b37      	ldr	r3, [pc, #220]	@ (80079a4 <HAL_ETH_Init+0x12c>)
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	4935      	ldr	r1, [pc, #212]	@ (80079a4 <HAL_ETH_Init+0x12c>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80078d4:	4b33      	ldr	r3, [pc, #204]	@ (80079a4 <HAL_ETH_Init+0x12c>)
 80078d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f0:	f7fd f85c 	bl	80049ac <HAL_GetTick>
 80078f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80078f6:	e011      	b.n	800791c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80078f8:	f7fd f858 	bl	80049ac <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007906:	d909      	bls.n	800791c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2204      	movs	r2, #4
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	22e0      	movs	r2, #224	@ 0xe0
 8007914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e03d      	b.n	8007998 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e4      	bne.n	80078f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f97a 	bl	8007c28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa25 	bl	8007d84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa7b 	bl	8007e36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	461a      	mov	r2, r3
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9e3 	bl	8007d14 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800795c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b0f      	ldr	r3, [pc, #60]	@ (80079a8 <HAL_ETH_Init+0x130>)
 800796c:	430b      	orrs	r3, r1
 800796e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007982:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2210      	movs	r2, #16
 8007992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40023800 	.word	0x40023800
 80079a4:	40013800 	.word	0x40013800
 80079a8:	00020060 	.word	0x00020060

080079ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4b53      	ldr	r3, [pc, #332]	@ (8007b10 <ETH_SetMACConfig+0x164>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	7b9b      	ldrb	r3, [r3, #14]
 80079ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	7c12      	ldrb	r2, [r2, #16]
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	d102      	bne.n	80079da <ETH_SetMACConfig+0x2e>
 80079d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80079d8:	e000      	b.n	80079dc <ETH_SetMACConfig+0x30>
 80079da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80079dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	7c52      	ldrb	r2, [r2, #17]
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d102      	bne.n	80079ec <ETH_SetMACConfig+0x40>
 80079e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80079ea:	e000      	b.n	80079ee <ETH_SetMACConfig+0x42>
 80079ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80079ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80079f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	7fdb      	ldrb	r3, [r3, #31]
 80079fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80079fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007a02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	7f92      	ldrb	r2, [r2, #30]
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d102      	bne.n	8007a12 <ETH_SetMACConfig+0x66>
 8007a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007a10:	e000      	b.n	8007a14 <ETH_SetMACConfig+0x68>
 8007a12:	2200      	movs	r2, #0
                        macconf->Speed |
 8007a14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	7f1b      	ldrb	r3, [r3, #28]
 8007a1a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007a1c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007a22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	791b      	ldrb	r3, [r3, #4]
 8007a28:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007a2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d102      	bne.n	8007a3c <ETH_SetMACConfig+0x90>
 8007a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a3a:	e000      	b.n	8007a3e <ETH_SetMACConfig+0x92>
 8007a3c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007a3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	7bdb      	ldrb	r3, [r3, #15]
 8007a44:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007a46:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007a4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a54:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007a56:	4313      	orrs	r3, r2
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f7fc ffa8 	bl	80049c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a92:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d101      	bne.n	8007aa2 <ETH_SetMACConfig+0xf6>
 8007a9e:	2280      	movs	r2, #128	@ 0x80
 8007aa0:	e000      	b.n	8007aa4 <ETH_SetMACConfig+0xf8>
 8007aa2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007aa4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007aaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	d101      	bne.n	8007aba <ETH_SetMACConfig+0x10e>
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	e000      	b.n	8007abc <ETH_SetMACConfig+0x110>
 8007aba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007abc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	d101      	bne.n	8007acc <ETH_SetMACConfig+0x120>
 8007ac8:	2204      	movs	r2, #4
 8007aca:	e000      	b.n	8007ace <ETH_SetMACConfig+0x122>
 8007acc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007ad6:	2a01      	cmp	r2, #1
 8007ad8:	d101      	bne.n	8007ade <ETH_SetMACConfig+0x132>
 8007ada:	2202      	movs	r2, #2
 8007adc:	e000      	b.n	8007ae0 <ETH_SetMACConfig+0x134>
 8007ade:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007af8:	2001      	movs	r0, #1
 8007afa:	f7fc ff63 	bl	80049c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	619a      	str	r2, [r3, #24]
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	fd20810f 	.word	0xfd20810f

08007b14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ETH_SetDMAConfig+0x110>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	7b1b      	ldrb	r3, [r3, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <ETH_SetDMAConfig+0x2c>
 8007b3a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007b3e:	e000      	b.n	8007b42 <ETH_SetDMAConfig+0x2e>
 8007b40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	7b5b      	ldrb	r3, [r3, #13]
 8007b46:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007b48:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	7f52      	ldrb	r2, [r2, #29]
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d102      	bne.n	8007b58 <ETH_SetDMAConfig+0x44>
 8007b52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007b56:	e000      	b.n	8007b5a <ETH_SetDMAConfig+0x46>
 8007b58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007b5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	7b9b      	ldrb	r3, [r3, #14]
 8007b60:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007b62:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007b68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	7f1b      	ldrb	r3, [r3, #28]
 8007b6e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007b70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	7f9b      	ldrb	r3, [r3, #30]
 8007b76:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007b78:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007b7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b86:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007baa:	2001      	movs	r0, #1
 8007bac:	f7fc ff0a 	bl	80049c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007bc8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007bce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007bd4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bdc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007bde:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007be6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007bec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bfa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c08:	2001      	movs	r0, #1
 8007c0a:	f7fc fedb 	bl	80049c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6013      	str	r3, [r2, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	f8de3f23 	.word	0xf8de3f23

08007c28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b0a6      	sub	sp, #152	@ 0x98
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007c90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c94:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007c96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007ca2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fe7f 	bl	80079ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ce2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007ce4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007ce8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007cfe:	f107 0308 	add.w	r3, r7, #8
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff05 	bl	8007b14 <ETH_SetDMAConfig>
}
 8007d0a:	bf00      	nop
 8007d0c:	3798      	adds	r7, #152	@ 0x98
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3305      	adds	r3, #5
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	3204      	adds	r2, #4
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <ETH_MACAddressConfig+0x68>)
 8007d36:	4413      	add	r3, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3303      	adds	r3, #3
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	061a      	lsls	r2, r3, #24
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3302      	adds	r3, #2
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	041b      	lsls	r3, r3, #16
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3301      	adds	r3, #1
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4b06      	ldr	r3, [pc, #24]	@ (8007d80 <ETH_MACAddressConfig+0x6c>)
 8007d66:	4413      	add	r3, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6013      	str	r3, [r2, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40028040 	.word	0x40028040
 8007d80:	40028044 	.word	0x40028044

08007d84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e03e      	b.n	8007e10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68d9      	ldr	r1, [r3, #12]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	440b      	add	r3, r1
 8007da2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	3206      	adds	r2, #6
 8007dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d80c      	bhi.n	8007df4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68d9      	ldr	r1, [r3, #12]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	440b      	add	r3, r1
 8007dec:	461a      	mov	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e004      	b.n	8007dfe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d9bd      	bls.n	8007d92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e28:	611a      	str	r2, [r3, #16]
}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e048      	b.n	8007ed6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6919      	ldr	r1, [r3, #16]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	440b      	add	r3, r1
 8007e54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	3212      	adds	r2, #18
 8007ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d80c      	bhi.n	8007ec6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6919      	ldr	r1, [r3, #16]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	440b      	add	r3, r1
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e004      	b.n	8007ed0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d9b3      	bls.n	8007e44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f06:	60da      	str	r2, [r3, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b089      	sub	sp, #36	@ 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	e175      	b.n	8008220 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007f34:	2201      	movs	r2, #1
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4013      	ands	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	f040 8164 	bne.w	800821a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d005      	beq.n	8007f6a <HAL_GPIO_Init+0x56>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d130      	bne.n	8007fcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	2203      	movs	r2, #3
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	091b      	lsrs	r3, r3, #4
 8007fb6:	f003 0201 	and.w	r2, r3, #1
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d017      	beq.n	8008008 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	4013      	ands	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d123      	bne.n	800805c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	08da      	lsrs	r2, r3, #3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3208      	adds	r2, #8
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	220f      	movs	r2, #15
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	43db      	mvns	r3, r3
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	4013      	ands	r3, r2
 8008036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	4313      	orrs	r3, r2
 800804c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	08da      	lsrs	r2, r3, #3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3208      	adds	r2, #8
 8008056:	69b9      	ldr	r1, [r7, #24]
 8008058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	2203      	movs	r2, #3
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4013      	ands	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f003 0203 	and.w	r2, r3, #3
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4313      	orrs	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80be 	beq.w	800821a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800809e:	4b66      	ldr	r3, [pc, #408]	@ (8008238 <HAL_GPIO_Init+0x324>)
 80080a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a2:	4a65      	ldr	r2, [pc, #404]	@ (8008238 <HAL_GPIO_Init+0x324>)
 80080a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80080aa:	4b63      	ldr	r3, [pc, #396]	@ (8008238 <HAL_GPIO_Init+0x324>)
 80080ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80080b6:	4a61      	ldr	r2, [pc, #388]	@ (800823c <HAL_GPIO_Init+0x328>)
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	089b      	lsrs	r3, r3, #2
 80080bc:	3302      	adds	r3, #2
 80080be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	220f      	movs	r2, #15
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43db      	mvns	r3, r3
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	4013      	ands	r3, r2
 80080d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a58      	ldr	r2, [pc, #352]	@ (8008240 <HAL_GPIO_Init+0x32c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d037      	beq.n	8008152 <HAL_GPIO_Init+0x23e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a57      	ldr	r2, [pc, #348]	@ (8008244 <HAL_GPIO_Init+0x330>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d031      	beq.n	800814e <HAL_GPIO_Init+0x23a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a56      	ldr	r2, [pc, #344]	@ (8008248 <HAL_GPIO_Init+0x334>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d02b      	beq.n	800814a <HAL_GPIO_Init+0x236>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a55      	ldr	r2, [pc, #340]	@ (800824c <HAL_GPIO_Init+0x338>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d025      	beq.n	8008146 <HAL_GPIO_Init+0x232>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a54      	ldr	r2, [pc, #336]	@ (8008250 <HAL_GPIO_Init+0x33c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01f      	beq.n	8008142 <HAL_GPIO_Init+0x22e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a53      	ldr	r2, [pc, #332]	@ (8008254 <HAL_GPIO_Init+0x340>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d019      	beq.n	800813e <HAL_GPIO_Init+0x22a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a52      	ldr	r2, [pc, #328]	@ (8008258 <HAL_GPIO_Init+0x344>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <HAL_GPIO_Init+0x226>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a51      	ldr	r2, [pc, #324]	@ (800825c <HAL_GPIO_Init+0x348>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00d      	beq.n	8008136 <HAL_GPIO_Init+0x222>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a50      	ldr	r2, [pc, #320]	@ (8008260 <HAL_GPIO_Init+0x34c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d007      	beq.n	8008132 <HAL_GPIO_Init+0x21e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a4f      	ldr	r2, [pc, #316]	@ (8008264 <HAL_GPIO_Init+0x350>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d101      	bne.n	800812e <HAL_GPIO_Init+0x21a>
 800812a:	2309      	movs	r3, #9
 800812c:	e012      	b.n	8008154 <HAL_GPIO_Init+0x240>
 800812e:	230a      	movs	r3, #10
 8008130:	e010      	b.n	8008154 <HAL_GPIO_Init+0x240>
 8008132:	2308      	movs	r3, #8
 8008134:	e00e      	b.n	8008154 <HAL_GPIO_Init+0x240>
 8008136:	2307      	movs	r3, #7
 8008138:	e00c      	b.n	8008154 <HAL_GPIO_Init+0x240>
 800813a:	2306      	movs	r3, #6
 800813c:	e00a      	b.n	8008154 <HAL_GPIO_Init+0x240>
 800813e:	2305      	movs	r3, #5
 8008140:	e008      	b.n	8008154 <HAL_GPIO_Init+0x240>
 8008142:	2304      	movs	r3, #4
 8008144:	e006      	b.n	8008154 <HAL_GPIO_Init+0x240>
 8008146:	2303      	movs	r3, #3
 8008148:	e004      	b.n	8008154 <HAL_GPIO_Init+0x240>
 800814a:	2302      	movs	r3, #2
 800814c:	e002      	b.n	8008154 <HAL_GPIO_Init+0x240>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <HAL_GPIO_Init+0x240>
 8008152:	2300      	movs	r3, #0
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	f002 0203 	and.w	r2, r2, #3
 800815a:	0092      	lsls	r2, r2, #2
 800815c:	4093      	lsls	r3, r2
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4313      	orrs	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008164:	4935      	ldr	r1, [pc, #212]	@ (800823c <HAL_GPIO_Init+0x328>)
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	089b      	lsrs	r3, r3, #2
 800816a:	3302      	adds	r3, #2
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008172:	4b3d      	ldr	r3, [pc, #244]	@ (8008268 <HAL_GPIO_Init+0x354>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	43db      	mvns	r3, r3
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4013      	ands	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008196:	4a34      	ldr	r2, [pc, #208]	@ (8008268 <HAL_GPIO_Init+0x354>)
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800819c:	4b32      	ldr	r3, [pc, #200]	@ (8008268 <HAL_GPIO_Init+0x354>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4013      	ands	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081c0:	4a29      	ldr	r2, [pc, #164]	@ (8008268 <HAL_GPIO_Init+0x354>)
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80081c6:	4b28      	ldr	r3, [pc, #160]	@ (8008268 <HAL_GPIO_Init+0x354>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	43db      	mvns	r3, r3
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4013      	ands	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008268 <HAL_GPIO_Init+0x354>)
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <HAL_GPIO_Init+0x354>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4013      	ands	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008214:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <HAL_GPIO_Init+0x354>)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	3301      	adds	r3, #1
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	2b0f      	cmp	r3, #15
 8008224:	f67f ae86 	bls.w	8007f34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	3724      	adds	r7, #36	@ 0x24
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40023800 	.word	0x40023800
 800823c:	40013800 	.word	0x40013800
 8008240:	40020000 	.word	0x40020000
 8008244:	40020400 	.word	0x40020400
 8008248:	40020800 	.word	0x40020800
 800824c:	40020c00 	.word	0x40020c00
 8008250:	40021000 	.word	0x40021000
 8008254:	40021400 	.word	0x40021400
 8008258:	40021800 	.word	0x40021800
 800825c:	40021c00 	.word	0x40021c00
 8008260:	40022000 	.word	0x40022000
 8008264:	40022400 	.word	0x40022400
 8008268:	40013c00 	.word	0x40013c00

0800826c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e0d9      	b.n	800843c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008288:	2201      	movs	r2, #1
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4013      	ands	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	429a      	cmp	r2, r3
 80082a0:	f040 80c9 	bne.w	8008436 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80082a4:	4a6b      	ldr	r2, [pc, #428]	@ (8008454 <HAL_GPIO_DeInit+0x1e8>)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	089b      	lsrs	r3, r3, #2
 80082aa:	3302      	adds	r3, #2
 80082ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	220f      	movs	r2, #15
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a63      	ldr	r2, [pc, #396]	@ (8008458 <HAL_GPIO_DeInit+0x1ec>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d037      	beq.n	800833e <HAL_GPIO_DeInit+0xd2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a62      	ldr	r2, [pc, #392]	@ (800845c <HAL_GPIO_DeInit+0x1f0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d031      	beq.n	800833a <HAL_GPIO_DeInit+0xce>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a61      	ldr	r2, [pc, #388]	@ (8008460 <HAL_GPIO_DeInit+0x1f4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d02b      	beq.n	8008336 <HAL_GPIO_DeInit+0xca>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a60      	ldr	r2, [pc, #384]	@ (8008464 <HAL_GPIO_DeInit+0x1f8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d025      	beq.n	8008332 <HAL_GPIO_DeInit+0xc6>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a5f      	ldr	r2, [pc, #380]	@ (8008468 <HAL_GPIO_DeInit+0x1fc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01f      	beq.n	800832e <HAL_GPIO_DeInit+0xc2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a5e      	ldr	r2, [pc, #376]	@ (800846c <HAL_GPIO_DeInit+0x200>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d019      	beq.n	800832a <HAL_GPIO_DeInit+0xbe>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a5d      	ldr	r2, [pc, #372]	@ (8008470 <HAL_GPIO_DeInit+0x204>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <HAL_GPIO_DeInit+0xba>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a5c      	ldr	r2, [pc, #368]	@ (8008474 <HAL_GPIO_DeInit+0x208>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00d      	beq.n	8008322 <HAL_GPIO_DeInit+0xb6>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a5b      	ldr	r2, [pc, #364]	@ (8008478 <HAL_GPIO_DeInit+0x20c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d007      	beq.n	800831e <HAL_GPIO_DeInit+0xb2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a5a      	ldr	r2, [pc, #360]	@ (800847c <HAL_GPIO_DeInit+0x210>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d101      	bne.n	800831a <HAL_GPIO_DeInit+0xae>
 8008316:	2309      	movs	r3, #9
 8008318:	e012      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800831a:	230a      	movs	r3, #10
 800831c:	e010      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800831e:	2308      	movs	r3, #8
 8008320:	e00e      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 8008322:	2307      	movs	r3, #7
 8008324:	e00c      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 8008326:	2306      	movs	r3, #6
 8008328:	e00a      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800832a:	2305      	movs	r3, #5
 800832c:	e008      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800832e:	2304      	movs	r3, #4
 8008330:	e006      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 8008332:	2303      	movs	r3, #3
 8008334:	e004      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 8008336:	2302      	movs	r3, #2
 8008338:	e002      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <HAL_GPIO_DeInit+0xd4>
 800833e:	2300      	movs	r3, #0
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	f002 0203 	and.w	r2, r2, #3
 8008346:	0092      	lsls	r2, r2, #2
 8008348:	4093      	lsls	r3, r2
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	d132      	bne.n	80083b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008350:	4b4b      	ldr	r3, [pc, #300]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	43db      	mvns	r3, r3
 8008358:	4949      	ldr	r1, [pc, #292]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 800835a:	4013      	ands	r3, r2
 800835c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800835e:	4b48      	ldr	r3, [pc, #288]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	43db      	mvns	r3, r3
 8008366:	4946      	ldr	r1, [pc, #280]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 8008368:	4013      	ands	r3, r2
 800836a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800836c:	4b44      	ldr	r3, [pc, #272]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	43db      	mvns	r3, r3
 8008374:	4942      	ldr	r1, [pc, #264]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 8008376:	4013      	ands	r3, r2
 8008378:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800837a:	4b41      	ldr	r3, [pc, #260]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	43db      	mvns	r3, r3
 8008382:	493f      	ldr	r1, [pc, #252]	@ (8008480 <HAL_GPIO_DeInit+0x214>)
 8008384:	4013      	ands	r3, r2
 8008386:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	220f      	movs	r2, #15
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008398:	4a2e      	ldr	r2, [pc, #184]	@ (8008454 <HAL_GPIO_DeInit+0x1e8>)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	089b      	lsrs	r3, r3, #2
 800839e:	3302      	adds	r3, #2
 80083a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	43da      	mvns	r2, r3
 80083a8:	482a      	ldr	r0, [pc, #168]	@ (8008454 <HAL_GPIO_DeInit+0x1e8>)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	089b      	lsrs	r3, r3, #2
 80083ae:	400a      	ands	r2, r1
 80083b0:	3302      	adds	r3, #2
 80083b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	2103      	movs	r1, #3
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	43db      	mvns	r3, r3
 80083c6:	401a      	ands	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	08da      	lsrs	r2, r3, #3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3208      	adds	r2, #8
 80083d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	220f      	movs	r2, #15
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	08d2      	lsrs	r2, r2, #3
 80083ec:	4019      	ands	r1, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3208      	adds	r2, #8
 80083f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	2103      	movs	r1, #3
 8008400:	fa01 f303 	lsl.w	r3, r1, r3
 8008404:	43db      	mvns	r3, r3
 8008406:	401a      	ands	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	2101      	movs	r1, #1
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	43db      	mvns	r3, r3
 800841a:	401a      	ands	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	2103      	movs	r1, #3
 800842a:	fa01 f303 	lsl.w	r3, r1, r3
 800842e:	43db      	mvns	r3, r3
 8008430:	401a      	ands	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	3301      	adds	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b0f      	cmp	r3, #15
 8008440:	f67f af22 	bls.w	8008288 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40013800 	.word	0x40013800
 8008458:	40020000 	.word	0x40020000
 800845c:	40020400 	.word	0x40020400
 8008460:	40020800 	.word	0x40020800
 8008464:	40020c00 	.word	0x40020c00
 8008468:	40021000 	.word	0x40021000
 800846c:	40021400 	.word	0x40021400
 8008470:	40021800 	.word	0x40021800
 8008474:	40021c00 	.word	0x40021c00
 8008478:	40022000 	.word	0x40022000
 800847c:	40022400 	.word	0x40022400
 8008480:	40013c00 	.word	0x40013c00

08008484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]
 8008490:	4613      	mov	r3, r2
 8008492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008494:	787b      	ldrb	r3, [r7, #1]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800849a:	887a      	ldrh	r2, [r7, #2]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80084a0:	e003      	b.n	80084aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	041a      	lsls	r2, r3, #16
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	619a      	str	r2, [r3, #24]
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e08b      	b.n	80085e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f9 fdf0 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2224      	movs	r2, #36	@ 0x24
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0201 	bic.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d107      	bne.n	8008532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e006      	b.n	8008540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800853e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d108      	bne.n	800855a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	e007      	b.n	800856a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b1d      	ldr	r3, [pc, #116]	@ (80085ec <HAL_I2C_Init+0x134>)
 8008576:	430b      	orrs	r3, r1
 8008578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69d9      	ldr	r1, [r3, #28]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0201 	orr.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	02008000 	.word	0x02008000

080085f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b20      	cmp	r3, #32
 8008604:	d138      	bne.n	8008678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008610:	2302      	movs	r3, #2
 8008612:	e032      	b.n	800867a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2224      	movs	r2, #36	@ 0x24
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6819      	ldr	r1, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e000      	b.n	800867a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
  }
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b20      	cmp	r3, #32
 800869a:	d139      	bne.n	8008710 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e033      	b.n	8008712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2224      	movs	r2, #36	@ 0x24
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	e000      	b.n	8008712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
  }
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e0bf      	b.n	80088b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7f9 fd86 	bl	8002258 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008762:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6999      	ldr	r1, [r3, #24]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008778:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6899      	ldr	r1, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b4a      	ldr	r3, [pc, #296]	@ (80088bc <HAL_LTDC_Init+0x19c>)
 8008794:	400b      	ands	r3, r1
 8008796:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6899      	ldr	r1, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68d9      	ldr	r1, [r3, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	4b3e      	ldr	r3, [pc, #248]	@ (80088bc <HAL_LTDC_Init+0x19c>)
 80087c2:	400b      	ands	r3, r1
 80087c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68d9      	ldr	r1, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1a      	ldr	r2, [r3, #32]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6919      	ldr	r1, [r3, #16]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b33      	ldr	r3, [pc, #204]	@ (80088bc <HAL_LTDC_Init+0x19c>)
 80087f0:	400b      	ands	r3, r1
 80087f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6919      	ldr	r1, [r3, #16]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6959      	ldr	r1, [r3, #20]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	4b27      	ldr	r3, [pc, #156]	@ (80088bc <HAL_LTDC_Init+0x19c>)
 800881e:	400b      	ands	r3, r1
 8008820:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6959      	ldr	r1, [r3, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008850:	041b      	lsls	r3, r3, #16
 8008852:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0206 	orr.w	r2, r2, #6
 800888e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	f000f800 	.word	0xf000f800

080088c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f003 0304 	and.w	r3, r3, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d023      	beq.n	800892a <HAL_LTDC_IRQHandler+0x6a>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01e      	beq.n	800892a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0204 	bic.w	r2, r2, #4
 80088fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2204      	movs	r2, #4
 8008902:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800890a:	f043 0201 	orr.w	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2204      	movs	r2, #4
 8008918:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f86f 	bl	8008a08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d023      	beq.n	800897c <HAL_LTDC_IRQHandler+0xbc>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01e      	beq.n	800897c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0202 	bic.w	r2, r2, #2
 800894c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2202      	movs	r2, #2
 8008954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800895c:	f043 0202 	orr.w	r2, r3, #2
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2204      	movs	r2, #4
 800896a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f846 	bl	8008a08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d01b      	beq.n	80089be <HAL_LTDC_IRQHandler+0xfe>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d016      	beq.n	80089be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2201      	movs	r2, #1
 80089a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f82f 	bl	8008a1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01b      	beq.n	8008a00 <HAL_LTDC_IRQHandler+0x140>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d016      	beq.n	8008a00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0208 	bic.w	r2, r2, #8
 80089e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2208      	movs	r2, #8
 80089e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f818 	bl	8008a30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_LTDC_ConfigLayer+0x1a>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e02c      	b.n	8008ab8 <HAL_LTDC_ConfigLayer+0x74>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2134      	movs	r1, #52	@ 0x34
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	4413      	add	r3, r2
 8008a7a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4614      	mov	r4, r2
 8008a82:	461d      	mov	r5, r3
 8008a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f811 	bl	8008ac0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bdb0      	pop	{r4, r5, r7, pc}

08008ac0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b089      	sub	sp, #36	@ 0x24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008adc:	4413      	add	r3, r2
 8008ade:	041b      	lsls	r3, r3, #16
 8008ae0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	01db      	lsls	r3, r3, #7
 8008aec:	4413      	add	r3, r2
 8008aee:	3384      	adds	r3, #132	@ 0x84
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	4611      	mov	r1, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	01d2      	lsls	r2, r2, #7
 8008afc:	440a      	add	r2, r1
 8008afe:	3284      	adds	r2, #132	@ 0x84
 8008b00:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008b04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	01db      	lsls	r3, r3, #7
 8008b24:	440b      	add	r3, r1
 8008b26:	3384      	adds	r3, #132	@ 0x84
 8008b28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b3e:	4413      	add	r3, r2
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	01db      	lsls	r3, r3, #7
 8008b4e:	4413      	add	r3, r2
 8008b50:	3384      	adds	r3, #132	@ 0x84
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	01d2      	lsls	r2, r2, #7
 8008b5e:	440a      	add	r2, r1
 8008b60:	3284      	adds	r2, #132	@ 0x84
 8008b62:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008b66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b76:	4413      	add	r3, r2
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	01db      	lsls	r3, r3, #7
 8008b84:	440b      	add	r3, r1
 8008b86:	3384      	adds	r3, #132	@ 0x84
 8008b88:	4619      	mov	r1, r3
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	01db      	lsls	r3, r3, #7
 8008b9a:	4413      	add	r3, r2
 8008b9c:	3384      	adds	r3, #132	@ 0x84
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	01d2      	lsls	r2, r2, #7
 8008baa:	440a      	add	r2, r1
 8008bac:	3284      	adds	r2, #132	@ 0x84
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	01db      	lsls	r3, r3, #7
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3384      	adds	r3, #132	@ 0x84
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008bda:	041b      	lsls	r3, r3, #16
 8008bdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	061b      	lsls	r3, r3, #24
 8008be4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	01db      	lsls	r3, r3, #7
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3384      	adds	r3, #132	@ 0x84
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	4413      	add	r3, r2
 8008c02:	3384      	adds	r3, #132	@ 0x84
 8008c04:	461a      	mov	r2, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c10:	461a      	mov	r2, r3
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	01db      	lsls	r3, r3, #7
 8008c24:	440b      	add	r3, r1
 8008c26:	3384      	adds	r3, #132	@ 0x84
 8008c28:	4619      	mov	r1, r3
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	01db      	lsls	r3, r3, #7
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3384      	adds	r3, #132	@ 0x84
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	4611      	mov	r1, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	01d2      	lsls	r2, r2, #7
 8008c4a:	440a      	add	r2, r1
 8008c4c:	3284      	adds	r2, #132	@ 0x84
 8008c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	01db      	lsls	r3, r3, #7
 8008c5e:	4413      	add	r3, r2
 8008c60:	3384      	adds	r3, #132	@ 0x84
 8008c62:	461a      	mov	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	01db      	lsls	r3, r3, #7
 8008c74:	4413      	add	r3, r2
 8008c76:	3384      	adds	r3, #132	@ 0x84
 8008c78:	69da      	ldr	r2, [r3, #28]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	01db      	lsls	r3, r3, #7
 8008c84:	440b      	add	r3, r1
 8008c86:	3384      	adds	r3, #132	@ 0x84
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4b58      	ldr	r3, [pc, #352]	@ (8008dec <LTDC_SetConfig+0x32c>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	68f9      	ldr	r1, [r7, #12]
 8008c9a:	6809      	ldr	r1, [r1, #0]
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	01c9      	lsls	r1, r1, #7
 8008ca2:	4401      	add	r1, r0
 8008ca4:	3184      	adds	r1, #132	@ 0x84
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3384      	adds	r3, #132	@ 0x84
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	01db      	lsls	r3, r3, #7
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3384      	adds	r3, #132	@ 0x84
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	01db      	lsls	r3, r3, #7
 8008cd8:	4413      	add	r3, r2
 8008cda:	3384      	adds	r3, #132	@ 0x84
 8008cdc:	461a      	mov	r2, r3
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008cec:	2304      	movs	r3, #4
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	e01b      	b.n	8008d2a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d102      	bne.n	8008d00 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	61fb      	str	r3, [r7, #28]
 8008cfe:	e014      	b.n	8008d2a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d00b      	beq.n	8008d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d007      	beq.n	8008d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d003      	beq.n	8008d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	d102      	bne.n	8008d26 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008d20:	2302      	movs	r3, #2
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	e001      	b.n	8008d2a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008d26:	2301      	movs	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	01db      	lsls	r3, r3, #7
 8008d34:	4413      	add	r3, r2
 8008d36:	3384      	adds	r3, #132	@ 0x84
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	4611      	mov	r1, r2
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	01d2      	lsls	r2, r2, #7
 8008d44:	440a      	add	r2, r1
 8008d46:	3284      	adds	r2, #132	@ 0x84
 8008d48:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6859      	ldr	r1, [r3, #4]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	69f9      	ldr	r1, [r7, #28]
 8008d66:	fb01 f303 	mul.w	r3, r1, r3
 8008d6a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008d6c:	68f9      	ldr	r1, [r7, #12]
 8008d6e:	6809      	ldr	r1, [r1, #0]
 8008d70:	4608      	mov	r0, r1
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	01c9      	lsls	r1, r1, #7
 8008d76:	4401      	add	r1, r0
 8008d78:	3184      	adds	r1, #132	@ 0x84
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	01db      	lsls	r3, r3, #7
 8008d88:	4413      	add	r3, r2
 8008d8a:	3384      	adds	r3, #132	@ 0x84
 8008d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	01db      	lsls	r3, r3, #7
 8008d98:	440b      	add	r3, r1
 8008d9a:	3384      	adds	r3, #132	@ 0x84
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4b14      	ldr	r3, [pc, #80]	@ (8008df0 <LTDC_SetConfig+0x330>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	01db      	lsls	r3, r3, #7
 8008dae:	4413      	add	r3, r2
 8008db0:	3384      	adds	r3, #132	@ 0x84
 8008db2:	461a      	mov	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	01db      	lsls	r3, r3, #7
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3384      	adds	r3, #132	@ 0x84
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	01d2      	lsls	r2, r2, #7
 8008dd4:	440a      	add	r2, r1
 8008dd6:	3284      	adds	r2, #132	@ 0x84
 8008dd8:	f043 0301 	orr.w	r3, r3, #1
 8008ddc:	6013      	str	r3, [r2, #0]
}
 8008dde:	bf00      	nop
 8008de0:	3724      	adds	r7, #36	@ 0x24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	fffff8f8 	.word	0xfffff8f8
 8008df0:	fffff800 	.word	0xfffff800

08008df4 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

#if !defined(POLARITIES_INVERSION_UPDATED)
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8008e06:	2200      	movs	r2, #0
 8008e08:	e001      	b.n	8008e0e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8008e0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8008e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e1e:	e000      	b.n	8008e22 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8008e20:	2200      	movs	r2, #0
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8008e2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e32:	e000      	b.n	8008e36 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8008e34:	2200      	movs	r2, #0
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
  hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29;
#endif /* POLARITIES_INVERSION_UPDATED */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3e:	1e5a      	subs	r2, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	4413      	add	r3, r2
 8008e4e:	1e5a      	subs	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e62:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8008e64:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e72:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e78:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7e:	4413      	add	r3, r2
 8008e80:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e108      	b.n	80090b8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d106      	bne.n	8008ec6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7f9 fe15 	bl	8002af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ed4:	d102      	bne.n	8008edc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f005 fa39 	bl	800e358 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7c1a      	ldrb	r2, [r3, #16]
 8008eee:	f88d 2000 	strb.w	r2, [sp]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ef6:	f005 f933 	bl	800e160 <USB_CoreInit>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e0d5      	b.n	80090b8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f005 fa31 	bl	800e37a <USB_SetCurrentMode>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e0c6      	b.n	80090b8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
 8008f2e:	e04a      	b.n	8008fc6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008f30:	7bfa      	ldrb	r2, [r7, #15]
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	4613      	mov	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	3315      	adds	r3, #21
 8008f40:	2201      	movs	r2, #1
 8008f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008f44:	7bfa      	ldrb	r2, [r7, #15]
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	440b      	add	r3, r1
 8008f52:	3314      	adds	r3, #20
 8008f54:	7bfa      	ldrb	r2, [r7, #15]
 8008f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	b298      	uxth	r0, r3
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	332e      	adds	r3, #46	@ 0x2e
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f70:	7bfa      	ldrb	r2, [r7, #15]
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	3318      	adds	r3, #24
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f84:	7bfa      	ldrb	r2, [r7, #15]
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	331c      	adds	r3, #28
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f98:	7bfa      	ldrb	r2, [r7, #15]
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	3320      	adds	r3, #32
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008fac:	7bfa      	ldrb	r2, [r7, #15]
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3324      	adds	r3, #36	@ 0x24
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	791b      	ldrb	r3, [r3, #4]
 8008fca:	7bfa      	ldrb	r2, [r7, #15]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3af      	bcc.n	8008f30 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
 8008fd4:	e044      	b.n	8009060 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008fd6:	7bfa      	ldrb	r2, [r7, #15]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008fec:	7bfa      	ldrb	r2, [r7, #15]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008ffe:	7bfa      	ldrb	r2, [r7, #15]
 8009000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009002:	7bfa      	ldrb	r2, [r7, #15]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009014:	2200      	movs	r2, #0
 8009016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800902e:	7bfa      	ldrb	r2, [r7, #15]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009044:	7bfa      	ldrb	r2, [r7, #15]
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	4613      	mov	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	3301      	adds	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	7bfa      	ldrb	r2, [r7, #15]
 8009066:	429a      	cmp	r2, r3
 8009068:	d3b5      	bcc.n	8008fd6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7c1a      	ldrb	r2, [r3, #16]
 8009072:	f88d 2000 	strb.w	r2, [sp]
 8009076:	3304      	adds	r3, #4
 8009078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800907a:	f005 f9cb 	bl	800e414 <USB_DevInit>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e013      	b.n	80090b8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7b1b      	ldrb	r3, [r3, #12]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d102      	bne.n	80090ac <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 ff3a 	bl	8009f20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f005 fceb 	bl	800ea8c <USB_DevDisconnect>

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80090c0:	b590      	push	{r4, r7, lr}
 80090c2:	b08d      	sub	sp, #52	@ 0x34
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f005 fd8c 	bl	800ebf4 <USB_GetMode>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f040 84b9 	bne.w	8009a56 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f005 fcf0 	bl	800eace <USB_ReadInterrupts>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 84af 	beq.w	8009a54 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f005 fcdd 	bl	800eace <USB_ReadInterrupts>
 8009114:	4603      	mov	r3, r0
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d107      	bne.n	800912e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	695a      	ldr	r2, [r3, #20]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f002 0202 	and.w	r2, r2, #2
 800912c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f005 fccb 	bl	800eace <USB_ReadInterrupts>
 8009138:	4603      	mov	r3, r0
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b10      	cmp	r3, #16
 8009140:	d161      	bne.n	8009206 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0210 	bic.w	r2, r2, #16
 8009150:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f003 020f 	and.w	r2, r3, #15
 800915e:	4613      	mov	r3, r2
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	0c5b      	lsrs	r3, r3, #17
 8009176:	f003 030f 	and.w	r3, r3, #15
 800917a:	2b02      	cmp	r3, #2
 800917c:	d124      	bne.n	80091c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009184:	4013      	ands	r3, r2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d035      	beq.n	80091f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	091b      	lsrs	r3, r3, #4
 8009192:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009198:	b29b      	uxth	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	6a38      	ldr	r0, [r7, #32]
 800919e:	f005 fc1d 	bl	800e9dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	091b      	lsrs	r3, r3, #4
 80091aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ae:	441a      	add	r2, r3
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	695a      	ldr	r2, [r3, #20]
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	091b      	lsrs	r3, r3, #4
 80091bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091c0:	441a      	add	r2, r3
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	615a      	str	r2, [r3, #20]
 80091c6:	e016      	b.n	80091f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	0c5b      	lsrs	r3, r3, #17
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	d110      	bne.n	80091f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091da:	2208      	movs	r2, #8
 80091dc:	4619      	mov	r1, r3
 80091de:	6a38      	ldr	r0, [r7, #32]
 80091e0:	f005 fbfc 	bl	800e9dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	695a      	ldr	r2, [r3, #20]
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	091b      	lsrs	r3, r3, #4
 80091ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091f0:	441a      	add	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0210 	orr.w	r2, r2, #16
 8009204:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f005 fc5f 	bl	800eace <USB_ReadInterrupts>
 8009210:	4603      	mov	r3, r0
 8009212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009216:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800921a:	f040 80a7 	bne.w	800936c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4618      	mov	r0, r3
 8009228:	f005 fc64 	bl	800eaf4 <USB_ReadDevAllOutEpInterrupt>
 800922c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800922e:	e099      	b.n	8009364 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 808e 	beq.w	8009358 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f005 fc88 	bl	800eb5c <USB_ReadDevOutEPInterrupt>
 800924c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00c      	beq.n	8009272 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009264:	461a      	mov	r2, r3
 8009266:	2301      	movs	r3, #1
 8009268:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800926a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fd29 	bl	8009cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00c      	beq.n	8009296 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009288:	461a      	mov	r2, r3
 800928a:	2308      	movs	r3, #8
 800928c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800928e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fdff 	bl	8009e94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f003 0310 	and.w	r3, r3, #16
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ac:	461a      	mov	r2, r3
 80092ae:	2310      	movs	r3, #16
 80092b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d030      	beq.n	800931e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c4:	2b80      	cmp	r3, #128	@ 0x80
 80092c6:	d109      	bne.n	80092dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80092da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80092dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092de:	4613      	mov	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	3304      	adds	r3, #4
 80092f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	78db      	ldrb	r3, [r3, #3]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d108      	bne.n	800930c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2200      	movs	r2, #0
 80092fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fbf2 	bl	8009af0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009318:	461a      	mov	r2, r3
 800931a:	2302      	movs	r3, #2
 800931c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d008      	beq.n	800933a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	2320      	movs	r3, #32
 8009338:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009350:	461a      	mov	r2, r3
 8009352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009356:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935a:	3301      	adds	r3, #1
 800935c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	2b00      	cmp	r3, #0
 8009368:	f47f af62 	bne.w	8009230 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4618      	mov	r0, r3
 8009372:	f005 fbac 	bl	800eace <USB_ReadInterrupts>
 8009376:	4603      	mov	r3, r0
 8009378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800937c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009380:	f040 80db 	bne.w	800953a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4618      	mov	r0, r3
 800938a:	f005 fbcd 	bl	800eb28 <USB_ReadDevAllInEpInterrupt>
 800938e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009394:	e0cd      	b.n	8009532 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 80c2 	beq.w	8009526 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f005 fbf3 	bl	800eb98 <USB_ReadDevInEPInterrupt>
 80093b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d057      	beq.n	800946e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	2201      	movs	r2, #1
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	43db      	mvns	r3, r3
 80093d8:	69f9      	ldr	r1, [r7, #28]
 80093da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093de:	4013      	ands	r3, r2
 80093e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ee:	461a      	mov	r2, r3
 80093f0:	2301      	movs	r3, #1
 80093f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	799b      	ldrb	r3, [r3, #6]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d132      	bne.n	8009462 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009400:	4613      	mov	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	3320      	adds	r3, #32
 800940c:	6819      	ldr	r1, [r3, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4403      	add	r3, r0
 800941c:	331c      	adds	r3, #28
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4419      	add	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009426:	4613      	mov	r3, r2
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4403      	add	r3, r0
 8009430:	3320      	adds	r3, #32
 8009432:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	d113      	bne.n	8009462 <HAL_PCD_IRQHandler+0x3a2>
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800943e:	4613      	mov	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3324      	adds	r3, #36	@ 0x24
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d108      	bne.n	8009462 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800945a:	461a      	mov	r2, r3
 800945c:	2101      	movs	r1, #1
 800945e:	f005 fbfb 	bl	800ec58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	b2db      	uxtb	r3, r3
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fb03 	bl	8009a74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009484:	461a      	mov	r2, r3
 8009486:	2308      	movs	r3, #8
 8009488:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b00      	cmp	r3, #0
 8009492:	d008      	beq.n	80094a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a0:	461a      	mov	r2, r3
 80094a2:	2310      	movs	r3, #16
 80094a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094bc:	461a      	mov	r2, r3
 80094be:	2340      	movs	r3, #64	@ 0x40
 80094c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d023      	beq.n	8009514 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80094cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094ce:	6a38      	ldr	r0, [r7, #32]
 80094d0:	f005 f8fe 	bl	800e6d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80094d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d6:	4613      	mov	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	3310      	adds	r3, #16
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4413      	add	r3, r2
 80094e4:	3304      	adds	r3, #4
 80094e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	78db      	ldrb	r3, [r3, #3]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d108      	bne.n	8009502 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2200      	movs	r2, #0
 80094f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fb03 	bl	8009b08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800950e:	461a      	mov	r2, r3
 8009510:	2302      	movs	r3, #2
 8009512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800951e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fb42 	bl	8009baa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	3301      	adds	r3, #1
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009534:	2b00      	cmp	r3, #0
 8009536:	f47f af2e 	bne.w	8009396 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f005 fac5 	bl	800eace <USB_ReadInterrupts>
 8009544:	4603      	mov	r3, r0
 8009546:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800954a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800954e:	d122      	bne.n	8009596 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800956a:	2b01      	cmp	r3, #1
 800956c:	d108      	bne.n	8009580 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009576:	2100      	movs	r1, #0
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fcf5 	bl	8009f68 <HAL_PCDEx_LPM_Callback>
 800957e:	e002      	b.n	8009586 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 faab 	bl	8009adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f005 fa97 	bl	800eace <USB_ReadInterrupts>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095aa:	d112      	bne.n	80095d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d102      	bne.n	80095c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa83 	bl	8009ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695a      	ldr	r2, [r3, #20]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80095d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f005 fa79 	bl	800eace <USB_ReadInterrupts>
 80095dc:	4603      	mov	r3, r0
 80095de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e6:	d121      	bne.n	800962c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80095f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d111      	bne.n	8009626 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009610:	089b      	lsrs	r3, r3, #2
 8009612:	f003 020f 	and.w	r2, r3, #15
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800961c:	2101      	movs	r1, #1
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fca2 	bl	8009f68 <HAL_PCDEx_LPM_Callback>
 8009624:	e002      	b.n	800962c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa4e 	bl	8009ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f005 fa4c 	bl	800eace <USB_ReadInterrupts>
 8009636:	4603      	mov	r3, r0
 8009638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800963c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009640:	f040 80b7 	bne.w	80097b2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2110      	movs	r1, #16
 800965e:	4618      	mov	r0, r3
 8009660:	f005 f836 	bl	800e6d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009664:	2300      	movs	r3, #0
 8009666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009668:	e046      	b.n	80096f8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009676:	461a      	mov	r2, r3
 8009678:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800967c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800967e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009698:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800969c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096aa:	461a      	mov	r2, r3
 80096ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80096b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	3301      	adds	r3, #1
 80096f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	791b      	ldrb	r3, [r3, #4]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	4293      	cmp	r3, r2
 8009702:	d3b2      	bcc.n	800966a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	69fa      	ldr	r2, [r7, #28]
 800970e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009712:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009716:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7bdb      	ldrb	r3, [r3, #15]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d016      	beq.n	800974e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009730:	f043 030b 	orr.w	r3, r3, #11
 8009734:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800973e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009746:	f043 030b 	orr.w	r3, r3, #11
 800974a:	6453      	str	r3, [r2, #68]	@ 0x44
 800974c:	e015      	b.n	800977a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009754:	695a      	ldr	r2, [r3, #20]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975c:	4619      	mov	r1, r3
 800975e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009762:	4313      	orrs	r3, r2
 8009764:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009774:	f043 030b 	orr.w	r3, r3, #11
 8009778:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009788:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800978c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800979c:	461a      	mov	r2, r3
 800979e:	f005 fa5b 	bl	800ec58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80097b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f005 f989 	bl	800eace <USB_ReadInterrupts>
 80097bc:	4603      	mov	r3, r0
 80097be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c6:	d123      	bne.n	8009810 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f005 fa1f 	bl	800ec10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f004 fff3 	bl	800e7c2 <USB_GetDevSpeed>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681c      	ldr	r4, [r3, #0]
 80097e8:	f001 f9b0 	bl	800ab4c <HAL_RCC_GetHCLKFreq>
 80097ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80097f2:	461a      	mov	r2, r3
 80097f4:	4620      	mov	r0, r4
 80097f6:	f004 fd0d 	bl	800e214 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f95a 	bl	8009ab4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800980e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f005 f95a 	bl	800eace <USB_ReadInterrupts>
 800981a:	4603      	mov	r3, r0
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b08      	cmp	r3, #8
 8009822:	d10a      	bne.n	800983a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f93b 	bl	8009aa0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f002 0208 	and.w	r2, r2, #8
 8009838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f005 f945 	bl	800eace <USB_ReadInterrupts>
 8009844:	4603      	mov	r3, r0
 8009846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800984a:	2b80      	cmp	r3, #128	@ 0x80
 800984c:	d123      	bne.n	8009896 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800985a:	2301      	movs	r3, #1
 800985c:	627b      	str	r3, [r7, #36]	@ 0x24
 800985e:	e014      	b.n	800988a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009864:	4613      	mov	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d105      	bne.n	8009884 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f962 	bl	8009b48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	3301      	adds	r3, #1
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	461a      	mov	r2, r3
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	4293      	cmp	r3, r2
 8009894:	d3e4      	bcc.n	8009860 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f005 f917 	bl	800eace <USB_ReadInterrupts>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098aa:	d13c      	bne.n	8009926 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098ac:	2301      	movs	r3, #1
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80098b0:	e02b      	b.n	800990a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098c6:	4613      	mov	r3, r2
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	3318      	adds	r3, #24
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d115      	bne.n	8009904 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80098d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80098da:	2b00      	cmp	r3, #0
 80098dc:	da12      	bge.n	8009904 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e2:	4613      	mov	r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	3317      	adds	r3, #23
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f922 	bl	8009b48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	3301      	adds	r3, #1
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	791b      	ldrb	r3, [r3, #4]
 800990e:	461a      	mov	r2, r3
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	4293      	cmp	r3, r2
 8009914:	d3cd      	bcc.n	80098b2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f005 f8cf 	bl	800eace <USB_ReadInterrupts>
 8009930:	4603      	mov	r3, r0
 8009932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800993a:	d156      	bne.n	80099ea <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800993c:	2301      	movs	r3, #1
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009940:	e045      	b.n	80099ce <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d12e      	bne.n	80099c8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800996a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800996c:	2b00      	cmp	r3, #0
 800996e:	da2b      	bge.n	80099c8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800997c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009980:	429a      	cmp	r2, r3
 8009982:	d121      	bne.n	80099c8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009988:	4613      	mov	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009996:	2201      	movs	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80099c4:	6053      	str	r3, [r2, #4]
            break;
 80099c6:	e008      	b.n	80099da <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	3301      	adds	r3, #1
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	461a      	mov	r2, r3
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d3b3      	bcc.n	8009942 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	695a      	ldr	r2, [r3, #20]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80099e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f005 f86d 	bl	800eace <USB_ReadInterrupts>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80099fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fe:	d10a      	bne.n	8009a16 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f88d 	bl	8009b20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	695a      	ldr	r2, [r3, #20]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f005 f857 	bl	800eace <USB_ReadInterrupts>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d115      	bne.n	8009a56 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f879 	bl	8009b34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6859      	ldr	r1, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	e000      	b.n	8009a56 <HAL_PCD_IRQHandler+0x996>
      return;
 8009a54:	bf00      	nop
    }
  }
}
 8009a56:	3734      	adds	r7, #52	@ 0x34
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd90      	pop	{r4, r7, pc}

08009a5c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	da0c      	bge.n	8009b76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	f003 020f 	and.w	r2, r3, #15
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	3310      	adds	r3, #16
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	3304      	adds	r3, #4
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e00c      	b.n	8009b90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	f003 020f 	and.w	r2, r3, #15
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68f9      	ldr	r1, [r7, #12]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f004 fe38 	bl	800e80c <USB_EPStopXfer>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b08a      	sub	sp, #40	@ 0x28
 8009bae:	af02      	add	r7, sp, #8
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	3310      	adds	r3, #16
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	3304      	adds	r3, #4
 8009bd0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	695a      	ldr	r2, [r3, #20]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d901      	bls.n	8009be2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e06b      	b.n	8009cba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d902      	bls.n	8009bfe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	3303      	adds	r3, #3
 8009c02:	089b      	lsrs	r3, r3, #2
 8009c04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c06:	e02a      	b.n	8009c5e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	691a      	ldr	r2, [r3, #16]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d902      	bls.n	8009c24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	3303      	adds	r3, #3
 8009c28:	089b      	lsrs	r3, r3, #2
 8009c2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68d9      	ldr	r1, [r3, #12]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6978      	ldr	r0, [r7, #20]
 8009c42:	f004 fe8d 	bl	800e960 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	441a      	add	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d809      	bhi.n	8009c88 <PCD_WriteEmptyTxFifo+0xde>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	695a      	ldr	r2, [r3, #20]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d203      	bcs.n	8009c88 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1bf      	bne.n	8009c08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d811      	bhi.n	8009cb8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	43db      	mvns	r3, r3
 8009cae:	6939      	ldr	r1, [r7, #16]
 8009cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	333c      	adds	r3, #60	@ 0x3c
 8009cdc:	3304      	adds	r3, #4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	799b      	ldrb	r3, [r3, #6]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d17b      	bne.n	8009df2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d015      	beq.n	8009d30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	4a61      	ldr	r2, [pc, #388]	@ (8009e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	f240 80b9 	bls.w	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 80b3 	beq.w	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d26:	461a      	mov	r2, r3
 8009d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d2c:	6093      	str	r3, [r2, #8]
 8009d2e:	e0a7      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d46:	461a      	mov	r2, r3
 8009d48:	2320      	movs	r3, #32
 8009d4a:	6093      	str	r3, [r2, #8]
 8009d4c:	e098      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 8093 	bne.w	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8009e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d90f      	bls.n	8009d82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d7e:	6093      	str	r3, [r2, #8]
 8009d80:	e07e      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4413      	add	r3, r2
 8009d94:	3304      	adds	r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a1a      	ldr	r2, [r3, #32]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	0159      	lsls	r1, r3, #5
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	440b      	add	r3, r1
 8009da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d114      	bne.n	8009de4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d109      	bne.n	8009dd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009dcc:	461a      	mov	r2, r3
 8009dce:	2101      	movs	r1, #1
 8009dd0:	f004 ff42 	bl	800ec58 <USB_EP0_OutStart>
 8009dd4:	e006      	b.n	8009de4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	441a      	add	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fe36 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
 8009df0:	e046      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	4a26      	ldr	r2, [pc, #152]	@ (8009e90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d124      	bne.n	8009e44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	461a      	mov	r2, r3
 8009e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e16:	6093      	str	r3, [r2, #8]
 8009e18:	e032      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f003 0320 	and.w	r3, r3, #32
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e30:	461a      	mov	r2, r3
 8009e32:	2320      	movs	r3, #32
 8009e34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7ff fe0d 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
 8009e42:	e01d      	b.n	8009e80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d114      	bne.n	8009e74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d108      	bne.n	8009e74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2100      	movs	r1, #0
 8009e70:	f004 fef2 	bl	800ec58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fdee 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3720      	adds	r7, #32
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	4f54300a 	.word	0x4f54300a
 8009e90:	4f54310a 	.word	0x4f54310a

08009e94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	333c      	adds	r3, #60	@ 0x3c
 8009eac:	3304      	adds	r3, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4a15      	ldr	r2, [pc, #84]	@ (8009f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d90e      	bls.n	8009ee8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d009      	beq.n	8009ee8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fdcf 	bl	8009a8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8009f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d90c      	bls.n	8009f10 <PCD_EP_OutSetupPacket_int+0x7c>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	799b      	ldrb	r3, [r3, #6]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d108      	bne.n	8009f10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f08:	461a      	mov	r2, r3
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	f004 fea4 	bl	800ec58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	4f54300a 	.word	0x4f54300a

08009f20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f4e:	4b05      	ldr	r3, [pc, #20]	@ (8009f64 <HAL_PCDEx_ActivateLPM+0x44>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	10000003 	.word	0x10000003

08009f68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f84:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a04      	ldr	r2, [pc, #16]	@ (8009f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40007000 	.word	0x40007000

08009fa0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009faa:	4b23      	ldr	r3, [pc, #140]	@ (800a038 <HAL_PWREx_EnableOverDrive+0x98>)
 8009fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fae:	4a22      	ldr	r2, [pc, #136]	@ (800a038 <HAL_PWREx_EnableOverDrive+0x98>)
 8009fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009fb6:	4b20      	ldr	r3, [pc, #128]	@ (800a038 <HAL_PWREx_EnableOverDrive+0x98>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fce:	f7fa fced 	bl	80049ac <HAL_GetTick>
 8009fd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009fd4:	e009      	b.n	8009fea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009fd6:	f7fa fce9 	bl	80049ac <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009fe4:	d901      	bls.n	8009fea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e022      	b.n	800a030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009fea:	4b14      	ldr	r3, [pc, #80]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ff6:	d1ee      	bne.n	8009fd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009ff8:	4b10      	ldr	r3, [pc, #64]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a004:	f7fa fcd2 	bl	80049ac <HAL_GetTick>
 800a008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a00a:	e009      	b.n	800a020 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a00c:	f7fa fcce 	bl	80049ac <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a01a:	d901      	bls.n	800a020 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e007      	b.n	800a030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a02c:	d1ee      	bne.n	800a00c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40023800 	.word	0x40023800
 800a03c:	40007000 	.word	0x40007000

0800a040 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af02      	add	r7, sp, #8
 800a046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a048:	f7fa fcb0 	bl	80049ac <HAL_GetTick>
 800a04c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e067      	b.n	800a128 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7f8 f919 	bl	80022a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a072:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f85e 	bl	800a138 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	021a      	lsls	r2, r3, #8
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2120      	movs	r1, #32
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f856 	bl	800a154 <QSPI_WaitFlagStateUntilTimeout>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d135      	bne.n	800a11e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a130 <HAL_QSPI_Init+0xf0>)
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6852      	ldr	r2, [r2, #4]
 800a0c0:	0611      	lsls	r1, r2, #24
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68d2      	ldr	r2, [r2, #12]
 800a0c6:	4311      	orrs	r1, r2
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	69d2      	ldr	r2, [r2, #28]
 800a0cc:	4311      	orrs	r1, r2
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6a12      	ldr	r2, [r2, #32]
 800a0d2:	4311      	orrs	r1, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	4b14      	ldr	r3, [pc, #80]	@ (800a134 <HAL_QSPI_Init+0xf4>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	6912      	ldr	r2, [r2, #16]
 800a0ea:	0411      	lsls	r1, r2, #16
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6952      	ldr	r2, [r2, #20]
 800a0f0:	4311      	orrs	r1, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6992      	ldr	r2, [r2, #24]
 800a0f6:	4311      	orrs	r1, r2
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6812      	ldr	r2, [r2, #0]
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0201 	orr.w	r2, r2, #1
 800a10e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a126:	7afb      	ldrb	r3, [r7, #11]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	00ffff2f 	.word	0x00ffff2f
 800a134:	ffe0f8fe 	.word	0xffe0f8fe

0800a138 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	4613      	mov	r3, r2
 800a162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a164:	e01a      	b.n	800a19c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d016      	beq.n	800a19c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a16e:	f7fa fc1d 	bl	80049ac <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d302      	bcc.n	800a184 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10b      	bne.n	800a19c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2204      	movs	r2, #4
 800a188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a190:	f043 0201 	orr.w	r2, r3, #1
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e00e      	b.n	800a1ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bf14      	ite	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	2300      	moveq	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d1d6      	bne.n	800a166 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e29b      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8087 	beq.w	800a2f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a1e8:	4b96      	ldr	r3, [pc, #600]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	f003 030c 	and.w	r3, r3, #12
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d00c      	beq.n	800a20e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1f4:	4b93      	ldr	r3, [pc, #588]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f003 030c 	and.w	r3, r3, #12
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d112      	bne.n	800a226 <HAL_RCC_OscConfig+0x62>
 800a200:	4b90      	ldr	r3, [pc, #576]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a20c:	d10b      	bne.n	800a226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a20e:	4b8d      	ldr	r3, [pc, #564]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d06c      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x130>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d168      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e275      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a22e:	d106      	bne.n	800a23e <HAL_RCC_OscConfig+0x7a>
 800a230:	4b84      	ldr	r3, [pc, #528]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a83      	ldr	r2, [pc, #524]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e02e      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10c      	bne.n	800a260 <HAL_RCC_OscConfig+0x9c>
 800a246:	4b7f      	ldr	r3, [pc, #508]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a7e      	ldr	r2, [pc, #504]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a24c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	4b7c      	ldr	r3, [pc, #496]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a7b      	ldr	r2, [pc, #492]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	e01d      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a268:	d10c      	bne.n	800a284 <HAL_RCC_OscConfig+0xc0>
 800a26a:	4b76      	ldr	r3, [pc, #472]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a75      	ldr	r2, [pc, #468]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	4b73      	ldr	r3, [pc, #460]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a72      	ldr	r2, [pc, #456]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a27c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	e00b      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a284:	4b6f      	ldr	r3, [pc, #444]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a6e      	ldr	r2, [pc, #440]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a28a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	4b6c      	ldr	r3, [pc, #432]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a6b      	ldr	r2, [pc, #428]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a29a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d013      	beq.n	800a2cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fa fb82 	bl	80049ac <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2ac:	f7fa fb7e 	bl	80049ac <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b64      	cmp	r3, #100	@ 0x64
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e229      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2be:	4b61      	ldr	r3, [pc, #388]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0xe8>
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2cc:	f7fa fb6e 	bl	80049ac <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2d4:	f7fa fb6a 	bl	80049ac <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b64      	cmp	r3, #100	@ 0x64
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e215      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2e6:	4b57      	ldr	r3, [pc, #348]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x110>
 800a2f2:	e000      	b.n	800a2f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d069      	beq.n	800a3d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a302:	4b50      	ldr	r3, [pc, #320]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f003 030c 	and.w	r3, r3, #12
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a30e:	4b4d      	ldr	r3, [pc, #308]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f003 030c 	and.w	r3, r3, #12
 800a316:	2b08      	cmp	r3, #8
 800a318:	d11c      	bne.n	800a354 <HAL_RCC_OscConfig+0x190>
 800a31a:	4b4a      	ldr	r3, [pc, #296]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d116      	bne.n	800a354 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a326:	4b47      	ldr	r3, [pc, #284]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <HAL_RCC_OscConfig+0x17a>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d001      	beq.n	800a33e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e1e9      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a33e:	4b41      	ldr	r3, [pc, #260]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	493d      	ldr	r1, [pc, #244]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a352:	e040      	b.n	800a3d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d023      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a35c:	4b39      	ldr	r3, [pc, #228]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a38      	ldr	r2, [pc, #224]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a368:	f7fa fb20 	bl	80049ac <HAL_GetTick>
 800a36c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a370:	f7fa fb1c 	bl	80049ac <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e1c7      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a382:	4b30      	ldr	r3, [pc, #192]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f0      	beq.n	800a370 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a38e:	4b2d      	ldr	r3, [pc, #180]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	4929      	ldr	r1, [pc, #164]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	600b      	str	r3, [r1, #0]
 800a3a2:	e018      	b.n	800a3d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3a4:	4b27      	ldr	r3, [pc, #156]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a26      	ldr	r2, [pc, #152]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b0:	f7fa fafc 	bl	80049ac <HAL_GetTick>
 800a3b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3b6:	e008      	b.n	800a3ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3b8:	f7fa faf8 	bl	80049ac <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e1a3      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f0      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d038      	beq.n	800a454 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d019      	beq.n	800a41e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3ea:	4b16      	ldr	r3, [pc, #88]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a3ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ee:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a3f0:	f043 0301 	orr.w	r3, r3, #1
 800a3f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3f6:	f7fa fad9 	bl	80049ac <HAL_GetTick>
 800a3fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3fc:	e008      	b.n	800a410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3fe:	f7fa fad5 	bl	80049ac <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d901      	bls.n	800a410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e180      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a410:	4b0c      	ldr	r3, [pc, #48]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0f0      	beq.n	800a3fe <HAL_RCC_OscConfig+0x23a>
 800a41c:	e01a      	b.n	800a454 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a41e:	4b09      	ldr	r3, [pc, #36]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a422:	4a08      	ldr	r2, [pc, #32]	@ (800a444 <HAL_RCC_OscConfig+0x280>)
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a42a:	f7fa fabf 	bl	80049ac <HAL_GetTick>
 800a42e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a430:	e00a      	b.n	800a448 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a432:	f7fa fabb 	bl	80049ac <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d903      	bls.n	800a448 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e166      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
 800a444:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a448:	4b92      	ldr	r3, [pc, #584]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a44a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1ee      	bne.n	800a432 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0304 	and.w	r3, r3, #4
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80a4 	beq.w	800a5aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a462:	4b8c      	ldr	r3, [pc, #560]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10d      	bne.n	800a48a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a46e:	4b89      	ldr	r3, [pc, #548]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a472:	4a88      	ldr	r2, [pc, #544]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a478:	6413      	str	r3, [r2, #64]	@ 0x40
 800a47a:	4b86      	ldr	r3, [pc, #536]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a482:	60bb      	str	r3, [r7, #8]
 800a484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a486:	2301      	movs	r3, #1
 800a488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a48a:	4b83      	ldr	r3, [pc, #524]	@ (800a698 <HAL_RCC_OscConfig+0x4d4>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a492:	2b00      	cmp	r3, #0
 800a494:	d118      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a496:	4b80      	ldr	r3, [pc, #512]	@ (800a698 <HAL_RCC_OscConfig+0x4d4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a7f      	ldr	r2, [pc, #508]	@ (800a698 <HAL_RCC_OscConfig+0x4d4>)
 800a49c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4a2:	f7fa fa83 	bl	80049ac <HAL_GetTick>
 800a4a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4a8:	e008      	b.n	800a4bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4aa:	f7fa fa7f 	bl	80049ac <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b64      	cmp	r3, #100	@ 0x64
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e12a      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4bc:	4b76      	ldr	r3, [pc, #472]	@ (800a698 <HAL_RCC_OscConfig+0x4d4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d106      	bne.n	800a4de <HAL_RCC_OscConfig+0x31a>
 800a4d0:	4b70      	ldr	r3, [pc, #448]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4d4:	4a6f      	ldr	r2, [pc, #444]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4dc:	e02d      	b.n	800a53a <HAL_RCC_OscConfig+0x376>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10c      	bne.n	800a500 <HAL_RCC_OscConfig+0x33c>
 800a4e6:	4b6b      	ldr	r3, [pc, #428]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ea:	4a6a      	ldr	r2, [pc, #424]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4f2:	4b68      	ldr	r3, [pc, #416]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4f6:	4a67      	ldr	r2, [pc, #412]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a4f8:	f023 0304 	bic.w	r3, r3, #4
 800a4fc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4fe:	e01c      	b.n	800a53a <HAL_RCC_OscConfig+0x376>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b05      	cmp	r3, #5
 800a506:	d10c      	bne.n	800a522 <HAL_RCC_OscConfig+0x35e>
 800a508:	4b62      	ldr	r3, [pc, #392]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a50a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a50c:	4a61      	ldr	r2, [pc, #388]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a50e:	f043 0304 	orr.w	r3, r3, #4
 800a512:	6713      	str	r3, [r2, #112]	@ 0x70
 800a514:	4b5f      	ldr	r3, [pc, #380]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a518:	4a5e      	ldr	r2, [pc, #376]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a520:	e00b      	b.n	800a53a <HAL_RCC_OscConfig+0x376>
 800a522:	4b5c      	ldr	r3, [pc, #368]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a526:	4a5b      	ldr	r2, [pc, #364]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a528:	f023 0301 	bic.w	r3, r3, #1
 800a52c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a52e:	4b59      	ldr	r3, [pc, #356]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a532:	4a58      	ldr	r2, [pc, #352]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a534:	f023 0304 	bic.w	r3, r3, #4
 800a538:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d015      	beq.n	800a56e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a542:	f7fa fa33 	bl	80049ac <HAL_GetTick>
 800a546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a548:	e00a      	b.n	800a560 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a54a:	f7fa fa2f 	bl	80049ac <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a558:	4293      	cmp	r3, r2
 800a55a:	d901      	bls.n	800a560 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e0d8      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a560:	4b4c      	ldr	r3, [pc, #304]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0ee      	beq.n	800a54a <HAL_RCC_OscConfig+0x386>
 800a56c:	e014      	b.n	800a598 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a56e:	f7fa fa1d 	bl	80049ac <HAL_GetTick>
 800a572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a574:	e00a      	b.n	800a58c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a576:	f7fa fa19 	bl	80049ac <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a584:	4293      	cmp	r3, r2
 800a586:	d901      	bls.n	800a58c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e0c2      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a58c:	4b41      	ldr	r3, [pc, #260]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a58e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ee      	bne.n	800a576 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d105      	bne.n	800a5aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a59e:	4b3d      	ldr	r3, [pc, #244]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a2:	4a3c      	ldr	r2, [pc, #240]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 80ae 	beq.w	800a710 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5b4:	4b37      	ldr	r3, [pc, #220]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f003 030c 	and.w	r3, r3, #12
 800a5bc:	2b08      	cmp	r3, #8
 800a5be:	d06d      	beq.n	800a69c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d14b      	bne.n	800a660 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5c8:	4b32      	ldr	r3, [pc, #200]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a31      	ldr	r2, [pc, #196]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d4:	f7fa f9ea 	bl	80049ac <HAL_GetTick>
 800a5d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5da:	e008      	b.n	800a5ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5dc:	f7fa f9e6 	bl	80049ac <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e091      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ee:	4b29      	ldr	r3, [pc, #164]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1f0      	bne.n	800a5dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69da      	ldr	r2, [r3, #28]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	019b      	lsls	r3, r3, #6
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	3b01      	subs	r3, #1
 800a614:	041b      	lsls	r3, r3, #16
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61c:	061b      	lsls	r3, r3, #24
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a624:	071b      	lsls	r3, r3, #28
 800a626:	491b      	ldr	r1, [pc, #108]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a62c:	4b19      	ldr	r3, [pc, #100]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a18      	ldr	r2, [pc, #96]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a638:	f7fa f9b8 	bl	80049ac <HAL_GetTick>
 800a63c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a63e:	e008      	b.n	800a652 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a640:	f7fa f9b4 	bl	80049ac <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d901      	bls.n	800a652 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e05f      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a652:	4b10      	ldr	r3, [pc, #64]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0f0      	beq.n	800a640 <HAL_RCC_OscConfig+0x47c>
 800a65e:	e057      	b.n	800a710 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a660:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a0b      	ldr	r2, [pc, #44]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a66a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66c:	f7fa f99e 	bl	80049ac <HAL_GetTick>
 800a670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a672:	e008      	b.n	800a686 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a674:	f7fa f99a 	bl	80049ac <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e045      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a686:	4b03      	ldr	r3, [pc, #12]	@ (800a694 <HAL_RCC_OscConfig+0x4d0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f0      	bne.n	800a674 <HAL_RCC_OscConfig+0x4b0>
 800a692:	e03d      	b.n	800a710 <HAL_RCC_OscConfig+0x54c>
 800a694:	40023800 	.word	0x40023800
 800a698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a69c:	4b1f      	ldr	r3, [pc, #124]	@ (800a71c <HAL_RCC_OscConfig+0x558>)
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d030      	beq.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d129      	bne.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d122      	bne.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d119      	bne.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e2:	085b      	lsrs	r3, r3, #1
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d10f      	bne.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d107      	bne.n	800a70c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a706:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a708:	429a      	cmp	r2, r3
 800a70a:	d001      	beq.n	800a710 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40023800 	.word	0x40023800

0800a720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e0d0      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a738:	4b6a      	ldr	r3, [pc, #424]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d910      	bls.n	800a768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a746:	4b67      	ldr	r3, [pc, #412]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f023 020f 	bic.w	r2, r3, #15
 800a74e:	4965      	ldr	r1, [pc, #404]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	4313      	orrs	r3, r2
 800a754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a756:	4b63      	ldr	r3, [pc, #396]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d001      	beq.n	800a768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e0b8      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d020      	beq.n	800a7b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a780:	4b59      	ldr	r3, [pc, #356]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	4a58      	ldr	r2, [pc, #352]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a78a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0308 	and.w	r3, r3, #8
 800a794:	2b00      	cmp	r3, #0
 800a796:	d005      	beq.n	800a7a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a798:	4b53      	ldr	r3, [pc, #332]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4a52      	ldr	r2, [pc, #328]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a79e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a7a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7a4:	4b50      	ldr	r3, [pc, #320]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	494d      	ldr	r1, [pc, #308]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d040      	beq.n	800a844 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d107      	bne.n	800a7da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ca:	4b47      	ldr	r3, [pc, #284]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d115      	bne.n	800a802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e07f      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d107      	bne.n	800a7f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7e2:	4b41      	ldr	r3, [pc, #260]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e073      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7f2:	4b3d      	ldr	r3, [pc, #244]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e06b      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a802:	4b39      	ldr	r3, [pc, #228]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f023 0203 	bic.w	r2, r3, #3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	4936      	ldr	r1, [pc, #216]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a810:	4313      	orrs	r3, r2
 800a812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a814:	f7fa f8ca 	bl	80049ac <HAL_GetTick>
 800a818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a81a:	e00a      	b.n	800a832 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a81c:	f7fa f8c6 	bl	80049ac <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e053      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a832:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 020c 	and.w	r2, r3, #12
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	429a      	cmp	r2, r3
 800a842:	d1eb      	bne.n	800a81c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a844:	4b27      	ldr	r3, [pc, #156]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d210      	bcs.n	800a874 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a852:	4b24      	ldr	r3, [pc, #144]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f023 020f 	bic.w	r2, r3, #15
 800a85a:	4922      	ldr	r1, [pc, #136]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	4313      	orrs	r3, r2
 800a860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a862:	4b20      	ldr	r3, [pc, #128]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d001      	beq.n	800a874 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e032      	b.n	800a8da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d008      	beq.n	800a892 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a880:	4b19      	ldr	r3, [pc, #100]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	4916      	ldr	r1, [pc, #88]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d009      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a89e:	4b12      	ldr	r3, [pc, #72]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	490e      	ldr	r1, [pc, #56]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a8b2:	f000 f885 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	091b      	lsrs	r3, r3, #4
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	490a      	ldr	r1, [pc, #40]	@ (800a8ec <HAL_RCC_ClockConfig+0x1cc>)
 800a8c4:	5ccb      	ldrb	r3, [r1, r3]
 800a8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ca:	4a09      	ldr	r2, [pc, #36]	@ (800a8f0 <HAL_RCC_ClockConfig+0x1d0>)
 800a8cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a8ce:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <HAL_RCC_ClockConfig+0x1d4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7f8 fb24 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	40023c00 	.word	0x40023c00
 800a8e8:	40023800 	.word	0x40023800
 800a8ec:	0800ee3c 	.word	0x0800ee3c
 800a8f0:	20000000 	.word	0x20000000
 800a8f4:	20000018 	.word	0x20000018

0800a8f8 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08c      	sub	sp, #48	@ 0x30
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d127      	bne.n	800a95a <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a90a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a90e:	4a29      	ldr	r2, [pc, #164]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a910:	f043 0301 	orr.w	r3, r3, #1
 800a914:	6313      	str	r3, [r2, #48]	@ 0x30
 800a916:	4b27      	ldr	r3, [pc, #156]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	61bb      	str	r3, [r7, #24]
 800a920:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a928:	2302      	movs	r3, #2
 800a92a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a92c:	2303      	movs	r3, #3
 800a92e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a930:	2300      	movs	r3, #0
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a934:	2300      	movs	r3, #0
 800a936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a938:	f107 031c 	add.w	r3, r7, #28
 800a93c:	4619      	mov	r1, r3
 800a93e:	481e      	ldr	r0, [pc, #120]	@ (800a9b8 <HAL_RCC_MCOConfig+0xc0>)
 800a940:	f7fd fae8 	bl	8007f14 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a944:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	430b      	orrs	r3, r1
 800a952:	4918      	ldr	r1, [pc, #96]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a954:	4313      	orrs	r3, r2
 800a956:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800a958:	e027      	b.n	800a9aa <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800a95a:	4b16      	ldr	r3, [pc, #88]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95e:	4a15      	ldr	r2, [pc, #84]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a960:	f043 0304 	orr.w	r3, r3, #4
 800a964:	6313      	str	r3, [r2, #48]	@ 0x30
 800a966:	4b13      	ldr	r3, [pc, #76]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a978:	2302      	movs	r3, #2
 800a97a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a97c:	2303      	movs	r3, #3
 800a97e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a980:	2300      	movs	r3, #0
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a984:	2300      	movs	r3, #0
 800a986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a988:	f107 031c 	add.w	r3, r7, #28
 800a98c:	4619      	mov	r1, r3
 800a98e:	480b      	ldr	r0, [pc, #44]	@ (800a9bc <HAL_RCC_MCOConfig+0xc4>)
 800a990:	f7fd fac0 	bl	8007f14 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800a994:	4b07      	ldr	r3, [pc, #28]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	00d9      	lsls	r1, r3, #3
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	430b      	orrs	r3, r1
 800a9a4:	4903      	ldr	r1, [pc, #12]	@ (800a9b4 <HAL_RCC_MCOConfig+0xbc>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	608b      	str	r3, [r1, #8]
}
 800a9aa:	bf00      	nop
 800a9ac:	3730      	adds	r7, #48	@ 0x30
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	40020000 	.word	0x40020000
 800a9bc:	40020800 	.word	0x40020800

0800a9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9c4:	b090      	sub	sp, #64	@ 0x40
 800a9c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9d8:	4b59      	ldr	r3, [pc, #356]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f003 030c 	and.w	r3, r3, #12
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d00d      	beq.n	800aa00 <HAL_RCC_GetSysClockFreq+0x40>
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	f200 80a1 	bhi.w	800ab2c <HAL_RCC_GetSysClockFreq+0x16c>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <HAL_RCC_GetSysClockFreq+0x34>
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d003      	beq.n	800a9fa <HAL_RCC_GetSysClockFreq+0x3a>
 800a9f2:	e09b      	b.n	800ab2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a9f4:	4b53      	ldr	r3, [pc, #332]	@ (800ab44 <HAL_RCC_GetSysClockFreq+0x184>)
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a9f8:	e09b      	b.n	800ab32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a9fa:	4b53      	ldr	r3, [pc, #332]	@ (800ab48 <HAL_RCC_GetSysClockFreq+0x188>)
 800a9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a9fe:	e098      	b.n	800ab32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa00:	4b4f      	ldr	r3, [pc, #316]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa0a:	4b4d      	ldr	r3, [pc, #308]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d028      	beq.n	800aa68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa16:	4b4a      	ldr	r3, [pc, #296]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	099b      	lsrs	r3, r3, #6
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	623b      	str	r3, [r7, #32]
 800aa20:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4b47      	ldr	r3, [pc, #284]	@ (800ab48 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa2c:	fb03 f201 	mul.w	r2, r3, r1
 800aa30:	2300      	movs	r3, #0
 800aa32:	fb00 f303 	mul.w	r3, r0, r3
 800aa36:	4413      	add	r3, r2
 800aa38:	4a43      	ldr	r2, [pc, #268]	@ (800ab48 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa3a:	fba0 1202 	umull	r1, r2, r0, r2
 800aa3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa40:	460a      	mov	r2, r1
 800aa42:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aa44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa46:	4413      	add	r3, r2
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	61bb      	str	r3, [r7, #24]
 800aa50:	61fa      	str	r2, [r7, #28]
 800aa52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aa5a:	f7f5 fbed 	bl	8000238 <__aeabi_uldivmod>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4613      	mov	r3, r2
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa66:	e053      	b.n	800ab10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa68:	4b35      	ldr	r3, [pc, #212]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	099b      	lsrs	r3, r3, #6
 800aa6e:	2200      	movs	r2, #0
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	617a      	str	r2, [r7, #20]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aa7a:	f04f 0b00 	mov.w	fp, #0
 800aa7e:	4652      	mov	r2, sl
 800aa80:	465b      	mov	r3, fp
 800aa82:	f04f 0000 	mov.w	r0, #0
 800aa86:	f04f 0100 	mov.w	r1, #0
 800aa8a:	0159      	lsls	r1, r3, #5
 800aa8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa90:	0150      	lsls	r0, r2, #5
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	ebb2 080a 	subs.w	r8, r2, sl
 800aa9a:	eb63 090b 	sbc.w	r9, r3, fp
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800aaaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800aaae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800aab2:	ebb2 0408 	subs.w	r4, r2, r8
 800aab6:	eb63 0509 	sbc.w	r5, r3, r9
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	00eb      	lsls	r3, r5, #3
 800aac4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aac8:	00e2      	lsls	r2, r4, #3
 800aaca:	4614      	mov	r4, r2
 800aacc:	461d      	mov	r5, r3
 800aace:	eb14 030a 	adds.w	r3, r4, sl
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	eb45 030b 	adc.w	r3, r5, fp
 800aad8:	607b      	str	r3, [r7, #4]
 800aada:	f04f 0200 	mov.w	r2, #0
 800aade:	f04f 0300 	mov.w	r3, #0
 800aae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aae6:	4629      	mov	r1, r5
 800aae8:	028b      	lsls	r3, r1, #10
 800aaea:	4621      	mov	r1, r4
 800aaec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	028a      	lsls	r2, r1, #10
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	2200      	movs	r2, #0
 800aafc:	60bb      	str	r3, [r7, #8]
 800aafe:	60fa      	str	r2, [r7, #12]
 800ab00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab04:	f7f5 fb98 	bl	8000238 <__aeabi_uldivmod>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ab10:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ab20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab2a:	e002      	b.n	800ab32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab2c:	4b05      	ldr	r3, [pc, #20]	@ (800ab44 <HAL_RCC_GetSysClockFreq+0x184>)
 800ab2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab30:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3740      	adds	r7, #64	@ 0x40
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab3e:	bf00      	nop
 800ab40:	40023800 	.word	0x40023800
 800ab44:	00f42400 	.word	0x00f42400
 800ab48:	017d7840 	.word	0x017d7840

0800ab4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab50:	4b03      	ldr	r3, [pc, #12]	@ (800ab60 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab52:	681b      	ldr	r3, [r3, #0]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20000000 	.word	0x20000000

0800ab64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab68:	f7ff fff0 	bl	800ab4c <HAL_RCC_GetHCLKFreq>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	4b05      	ldr	r3, [pc, #20]	@ (800ab84 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	0a9b      	lsrs	r3, r3, #10
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	4903      	ldr	r1, [pc, #12]	@ (800ab88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab7a:	5ccb      	ldrb	r3, [r1, r3]
 800ab7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	40023800 	.word	0x40023800
 800ab88:	0800ee4c 	.word	0x0800ee4c

0800ab8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab90:	f7ff ffdc 	bl	800ab4c <HAL_RCC_GetHCLKFreq>
 800ab94:	4602      	mov	r2, r0
 800ab96:	4b05      	ldr	r3, [pc, #20]	@ (800abac <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	0b5b      	lsrs	r3, r3, #13
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	4903      	ldr	r1, [pc, #12]	@ (800abb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	40023800 	.word	0x40023800
 800abb0:	0800ee4c 	.word	0x0800ee4c

0800abb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	220f      	movs	r2, #15
 800abc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800abc4:	4b12      	ldr	r3, [pc, #72]	@ (800ac10 <HAL_RCC_GetClockConfig+0x5c>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f003 0203 	and.w	r2, r3, #3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800abd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac10 <HAL_RCC_GetClockConfig+0x5c>)
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800abdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac10 <HAL_RCC_GetClockConfig+0x5c>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800abe8:	4b09      	ldr	r3, [pc, #36]	@ (800ac10 <HAL_RCC_GetClockConfig+0x5c>)
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	08db      	lsrs	r3, r3, #3
 800abee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800abf6:	4b07      	ldr	r3, [pc, #28]	@ (800ac14 <HAL_RCC_GetClockConfig+0x60>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 020f 	and.w	r2, r3, #15
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40023c00 	.word	0x40023c00

0800ac18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d012      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac40:	4b69      	ldr	r3, [pc, #420]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4a68      	ldr	r2, [pc, #416]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac4a:	6093      	str	r3, [r2, #8]
 800ac4c:	4b66      	ldr	r3, [pc, #408]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac54:	4964      	ldr	r1, [pc, #400]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ac62:	2301      	movs	r3, #1
 800ac64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d017      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac72:	4b5d      	ldr	r3, [pc, #372]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac80:	4959      	ldr	r1, [pc, #356]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac90:	d101      	bne.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ac92:	2301      	movs	r3, #1
 800ac94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d017      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800acae:	4b4e      	ldr	r3, [pc, #312]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	494a      	ldr	r1, [pc, #296]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800accc:	d101      	bne.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800acce:	2301      	movs	r3, #1
 800acd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800acea:	2301      	movs	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0320 	and.w	r3, r3, #32
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 808b 	beq.w	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800acfc:	4b3a      	ldr	r3, [pc, #232]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad00:	4a39      	ldr	r2, [pc, #228]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad06:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad08:	4b37      	ldr	r3, [pc, #220]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad10:	60bb      	str	r3, [r7, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad14:	4b35      	ldr	r3, [pc, #212]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a34      	ldr	r2, [pc, #208]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad20:	f7f9 fe44 	bl	80049ac <HAL_GetTick>
 800ad24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad26:	e008      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad28:	f7f9 fe40 	bl	80049ac <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	2b64      	cmp	r3, #100	@ 0x64
 800ad34:	d901      	bls.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e38f      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad3a:	4b2c      	ldr	r3, [pc, #176]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0f0      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ad46:	4b28      	ldr	r3, [pc, #160]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d035      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d02e      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad64:	4b20      	ldr	r3, [pc, #128]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad72:	4a1d      	ldr	r2, [pc, #116]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad78:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ad7a:	4b1b      	ldr	r3, [pc, #108]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ad86:	4a18      	ldr	r2, [pc, #96]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ad8c:	4b16      	ldr	r3, [pc, #88]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d114      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad98:	f7f9 fe08 	bl	80049ac <HAL_GetTick>
 800ad9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad9e:	e00a      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ada0:	f7f9 fe04 	bl	80049ac <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adae:	4293      	cmp	r3, r2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e351      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0ee      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adce:	d111      	bne.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800add0:	4b05      	ldr	r3, [pc, #20]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800adde:	400b      	ands	r3, r1
 800ade0:	4901      	ldr	r1, [pc, #4]	@ (800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	608b      	str	r3, [r1, #8]
 800ade6:	e00b      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ade8:	40023800 	.word	0x40023800
 800adec:	40007000 	.word	0x40007000
 800adf0:	0ffffcff 	.word	0x0ffffcff
 800adf4:	4bac      	ldr	r3, [pc, #688]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4aab      	ldr	r2, [pc, #684]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800adfe:	6093      	str	r3, [r2, #8]
 800ae00:	4ba9      	ldr	r3, [pc, #676]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae0c:	49a6      	ldr	r1, [pc, #664]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d010      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae1e:	4ba2      	ldr	r3, [pc, #648]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae24:	4aa0      	ldr	r2, [pc, #640]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ae2e:	4b9e      	ldr	r3, [pc, #632]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae30:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae38:	499b      	ldr	r1, [pc, #620]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae4c:	4b96      	ldr	r3, [pc, #600]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae5a:	4993      	ldr	r1, [pc, #588]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae6e:	4b8e      	ldr	r3, [pc, #568]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae7c:	498a      	ldr	r1, [pc, #552]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00a      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ae90:	4b85      	ldr	r3, [pc, #532]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae9e:	4982      	ldr	r1, [pc, #520]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00a      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aeb2:	4b7d      	ldr	r3, [pc, #500]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aeb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec0:	4979      	ldr	r1, [pc, #484]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00a      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aed4:	4b74      	ldr	r3, [pc, #464]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeda:	f023 0203 	bic.w	r2, r3, #3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee2:	4971      	ldr	r1, [pc, #452]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aef6:	4b6c      	ldr	r3, [pc, #432]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aefc:	f023 020c 	bic.w	r2, r3, #12
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af04:	4968      	ldr	r1, [pc, #416]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af06:	4313      	orrs	r3, r2
 800af08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af18:	4b63      	ldr	r3, [pc, #396]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af26:	4960      	ldr	r1, [pc, #384]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800af3a:	4b5b      	ldr	r3, [pc, #364]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af40:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af48:	4957      	ldr	r1, [pc, #348]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800af5c:	4b52      	ldr	r3, [pc, #328]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af6a:	494f      	ldr	r1, [pc, #316]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800af7e:	4b4a      	ldr	r3, [pc, #296]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af8c:	4946      	ldr	r1, [pc, #280]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800afa0:	4b41      	ldr	r3, [pc, #260]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afa6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afae:	493e      	ldr	r1, [pc, #248]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800afc2:	4b39      	ldr	r3, [pc, #228]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afd0:	4935      	ldr	r1, [pc, #212]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afe4:	4b30      	ldr	r3, [pc, #192]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aff2:	492d      	ldr	r1, [pc, #180]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d011      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b006:	4b28      	ldr	r3, [pc, #160]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b014:	4924      	ldr	r1, [pc, #144]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b016:	4313      	orrs	r3, r2
 800b018:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b024:	d101      	bne.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b026:	2301      	movs	r3, #1
 800b028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0308 	and.w	r3, r3, #8
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b046:	4b18      	ldr	r3, [pc, #96]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b04c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b054:	4914      	ldr	r1, [pc, #80]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b056:	4313      	orrs	r3, r2
 800b058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b068:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b06e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b078:	490b      	ldr	r1, [pc, #44]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00f      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b08c:	4b06      	ldr	r3, [pc, #24]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b092:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09c:	4902      	ldr	r1, [pc, #8]	@ (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b0a4:	e002      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 800b0a6:	bf00      	nop
 800b0a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b0b8:	4b8a      	ldr	r3, [pc, #552]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c8:	4986      	ldr	r1, [pc, #536]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b0dc:	4b81      	ldr	r3, [pc, #516]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ec:	497d      	ldr	r1, [pc, #500]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d006      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 80d6 	beq.w	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b108:	4b76      	ldr	r3, [pc, #472]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a75      	ldr	r2, [pc, #468]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b10e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b114:	f7f9 fc4a 	bl	80049ac <HAL_GetTick>
 800b118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b11a:	e008      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b11c:	f7f9 fc46 	bl	80049ac <HAL_GetTick>
 800b120:	4602      	mov	r2, r0
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	2b64      	cmp	r3, #100	@ 0x64
 800b128:	d901      	bls.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e195      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b12e:	4b6d      	ldr	r3, [pc, #436]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1f0      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d021      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d11d      	bne.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b14e:	4b65      	ldr	r3, [pc, #404]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b154:	0c1b      	lsrs	r3, r3, #16
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b15c:	4b61      	ldr	r3, [pc, #388]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b162:	0e1b      	lsrs	r3, r3, #24
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	019a      	lsls	r2, r3, #6
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	041b      	lsls	r3, r3, #16
 800b174:	431a      	orrs	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	061b      	lsls	r3, r3, #24
 800b17a:	431a      	orrs	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	071b      	lsls	r3, r3, #28
 800b182:	4958      	ldr	r1, [pc, #352]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b184:	4313      	orrs	r3, r2
 800b186:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d004      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b19e:	d00a      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d02e      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b4:	d129      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1bc:	0c1b      	lsrs	r3, r3, #16
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1c4:	4b47      	ldr	r3, [pc, #284]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ca:	0f1b      	lsrs	r3, r3, #28
 800b1cc:	f003 0307 	and.w	r3, r3, #7
 800b1d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	019a      	lsls	r2, r3, #6
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	041b      	lsls	r3, r3, #16
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	061b      	lsls	r3, r3, #24
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	071b      	lsls	r3, r3, #28
 800b1ea:	493e      	ldr	r1, [pc, #248]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1f2:	4b3c      	ldr	r3, [pc, #240]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1f8:	f023 021f 	bic.w	r2, r3, #31
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b200:	3b01      	subs	r3, #1
 800b202:	4938      	ldr	r1, [pc, #224]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b204:	4313      	orrs	r3, r2
 800b206:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d01d      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b216:	4b33      	ldr	r3, [pc, #204]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b21c:	0e1b      	lsrs	r3, r3, #24
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b224:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b22a:	0f1b      	lsrs	r3, r3, #28
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	019a      	lsls	r2, r3, #6
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	041b      	lsls	r3, r3, #16
 800b23e:	431a      	orrs	r2, r3
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	061b      	lsls	r3, r3, #24
 800b244:	431a      	orrs	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	071b      	lsls	r3, r3, #28
 800b24a:	4926      	ldr	r1, [pc, #152]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d011      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	019a      	lsls	r2, r3, #6
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	041b      	lsls	r3, r3, #16
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	061b      	lsls	r3, r3, #24
 800b272:	431a      	orrs	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	071b      	lsls	r3, r3, #28
 800b27a:	491a      	ldr	r1, [pc, #104]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b282:	4b18      	ldr	r3, [pc, #96]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a17      	ldr	r2, [pc, #92]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7f9 fb8d 	bl	80049ac <HAL_GetTick>
 800b292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b294:	e008      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b296:	f7f9 fb89 	bl	80049ac <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b64      	cmp	r3, #100	@ 0x64
 800b2a2:	d901      	bls.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e0d8      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b2a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f0      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	f040 80ce 	bne.w	800b458 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b2bc:	4b09      	ldr	r3, [pc, #36]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a08      	ldr	r2, [pc, #32]	@ (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b2c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2c8:	f7f9 fb70 	bl	80049ac <HAL_GetTick>
 800b2cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2ce:	e00b      	b.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2d0:	f7f9 fb6c 	bl	80049ac <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b64      	cmp	r3, #100	@ 0x64
 800b2dc:	d904      	bls.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e0bb      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b2e2:	bf00      	nop
 800b2e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2f4:	d0ec      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d009      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b312:	2b00      	cmp	r3, #0
 800b314:	d02e      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d12a      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b31e:	4b51      	ldr	r3, [pc, #324]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b324:	0c1b      	lsrs	r3, r3, #16
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b32c:	4b4d      	ldr	r3, [pc, #308]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b332:	0f1b      	lsrs	r3, r3, #28
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	019a      	lsls	r2, r3, #6
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	041b      	lsls	r3, r3, #16
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	061b      	lsls	r3, r3, #24
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	071b      	lsls	r3, r3, #28
 800b352:	4944      	ldr	r1, [pc, #272]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b354:	4313      	orrs	r3, r2
 800b356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b35a:	4b42      	ldr	r3, [pc, #264]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b360:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	3b01      	subs	r3, #1
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	493d      	ldr	r1, [pc, #244]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d022      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b388:	d11d      	bne.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b38a:	4b36      	ldr	r3, [pc, #216]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b390:	0e1b      	lsrs	r3, r3, #24
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b398:	4b32      	ldr	r3, [pc, #200]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b39e:	0f1b      	lsrs	r3, r3, #28
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	019a      	lsls	r2, r3, #6
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	061b      	lsls	r3, r3, #24
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	071b      	lsls	r3, r3, #28
 800b3be:	4929      	ldr	r1, [pc, #164]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0308 	and.w	r3, r3, #8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d028      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b3d2:	4b24      	ldr	r3, [pc, #144]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d8:	0e1b      	lsrs	r3, r3, #24
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3e0:	4b20      	ldr	r3, [pc, #128]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	f003 0303 	and.w	r3, r3, #3
 800b3ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	019a      	lsls	r2, r3, #6
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	061b      	lsls	r3, r3, #24
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	071b      	lsls	r3, r3, #28
 800b406:	4917      	ldr	r1, [pc, #92]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b40e:	4b15      	ldr	r3, [pc, #84]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b414:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41c:	4911      	ldr	r1, [pc, #68]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b424:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a0e      	ldr	r2, [pc, #56]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b42a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b42e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b430:	f7f9 fabc 	bl	80049ac <HAL_GetTick>
 800b434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b436:	e008      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b438:	f7f9 fab8 	bl	80049ac <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b64      	cmp	r3, #100	@ 0x64
 800b444:	d901      	bls.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e007      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b44a:	4b06      	ldr	r3, [pc, #24]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b456:	d1ef      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3720      	adds	r7, #32
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40023800 	.word	0x40023800

0800b468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b486:	f040 80a4 	bne.w	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b48a:	4ba6      	ldr	r3, [pc, #664]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b490:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b498:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4a0:	f000 808a 	beq.w	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4aa:	f200 8091 	bhi.w	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b4:	d07d      	beq.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4bc:	f200 8088 	bhi.w	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4cc:	d039      	beq.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b4ce:	e07f      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4d0:	4b94      	ldr	r3, [pc, #592]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d108      	bne.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b4dc:	4b91      	ldr	r3, [pc, #580]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4e4:	4a90      	ldr	r2, [pc, #576]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	e007      	b.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b4ee:	4b8d      	ldr	r3, [pc, #564]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4f6:	4a8d      	ldr	r2, [pc, #564]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b4fe:	4b89      	ldr	r3, [pc, #548]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b504:	0e1b      	lsrs	r3, r3, #24
 800b506:	f003 030f 	and.w	r3, r3, #15
 800b50a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b50c:	4b85      	ldr	r3, [pc, #532]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b512:	099b      	lsrs	r3, r3, #6
 800b514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	fb03 f202 	mul.w	r2, r3, r2
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	fbb2 f3f3 	udiv	r3, r2, r3
 800b524:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b526:	4b7f      	ldr	r3, [pc, #508]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b52c:	0a1b      	lsrs	r3, r3, #8
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	3301      	adds	r3, #1
 800b534:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53e:	617b      	str	r3, [r7, #20]
        break;
 800b540:	e047      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b542:	4b78      	ldr	r3, [pc, #480]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d108      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b54e:	4b75      	ldr	r3, [pc, #468]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b556:	4a74      	ldr	r2, [pc, #464]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b558:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55c:	613b      	str	r3, [r7, #16]
 800b55e:	e007      	b.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b560:	4b70      	ldr	r3, [pc, #448]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b568:	4a70      	ldr	r2, [pc, #448]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b570:	4b6c      	ldr	r3, [pc, #432]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b576:	0e1b      	lsrs	r3, r3, #24
 800b578:	f003 030f 	and.w	r3, r3, #15
 800b57c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b57e:	4b69      	ldr	r3, [pc, #420]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b584:	099b      	lsrs	r3, r3, #6
 800b586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	fb03 f202 	mul.w	r2, r3, r2
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	fbb2 f3f3 	udiv	r3, r2, r3
 800b596:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b598:	4b62      	ldr	r3, [pc, #392]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b59e:	f003 031f 	and.w	r3, r3, #31
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ae:	617b      	str	r3, [r7, #20]
        break;
 800b5b0:	e00f      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5b2:	4b5f      	ldr	r3, [pc, #380]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b5b4:	617b      	str	r3, [r7, #20]
        break;
 800b5b6:	e00c      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b5b8:	4b5a      	ldr	r3, [pc, #360]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800b5c4:	4b58      	ldr	r3, [pc, #352]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b5c6:	617b      	str	r3, [r7, #20]
        break;
 800b5c8:	e003      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800b5ca:	4b58      	ldr	r3, [pc, #352]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b5cc:	617b      	str	r3, [r7, #20]
        break;
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800b5d0:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5d8:	f040 80ad 	bne.w	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b5dc:	4b51      	ldr	r3, [pc, #324]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5e2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b5ea:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b5f2:	f000 808a 	beq.w	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b5fc:	f200 809a 	bhi.w	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b606:	d07d      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b60e:	f200 8091 	bhi.w	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b61e:	d039      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b620:	e088      	b.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b622:	4b40      	ldr	r3, [pc, #256]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b62e:	4b3d      	ldr	r3, [pc, #244]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b636:	4a3c      	ldr	r2, [pc, #240]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b638:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	e007      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b640:	4b38      	ldr	r3, [pc, #224]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b648:	4a38      	ldr	r2, [pc, #224]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b650:	4b34      	ldr	r3, [pc, #208]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b656:	0e1b      	lsrs	r3, r3, #24
 800b658:	f003 030f 	and.w	r3, r3, #15
 800b65c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b65e:	4b31      	ldr	r3, [pc, #196]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b664:	099b      	lsrs	r3, r3, #6
 800b666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	fb03 f202 	mul.w	r2, r3, r2
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	fbb2 f3f3 	udiv	r3, r2, r3
 800b676:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b678:	4b2a      	ldr	r3, [pc, #168]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b67e:	0a1b      	lsrs	r3, r3, #8
 800b680:	f003 031f 	and.w	r3, r3, #31
 800b684:	3301      	adds	r3, #1
 800b686:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b690:	617b      	str	r3, [r7, #20]
        break;
 800b692:	e050      	b.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b694:	4b23      	ldr	r3, [pc, #140]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d108      	bne.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b6a0:	4b20      	ldr	r3, [pc, #128]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6a8:	4a1f      	ldr	r2, [pc, #124]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ae:	613b      	str	r3, [r7, #16]
 800b6b0:	e007      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b6b2:	4b1c      	ldr	r3, [pc, #112]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b6c2:	4b18      	ldr	r3, [pc, #96]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6c8:	0e1b      	lsrs	r3, r3, #24
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b6d0:	4b14      	ldr	r3, [pc, #80]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6d6:	099b      	lsrs	r3, r3, #6
 800b6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	fb03 f202 	mul.w	r2, r3, r2
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6f0:	f003 031f 	and.w	r3, r3, #31
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b700:	617b      	str	r3, [r7, #20]
        break;
 800b702:	e018      	b.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b704:	4b0a      	ldr	r3, [pc, #40]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b706:	617b      	str	r3, [r7, #20]
        break;
 800b708:	e015      	b.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b70a:	4b06      	ldr	r3, [pc, #24]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d102      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800b716:	4b04      	ldr	r3, [pc, #16]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b718:	617b      	str	r3, [r7, #20]
        break;
 800b71a:	e00c      	b.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800b71c:	4b03      	ldr	r3, [pc, #12]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b71e:	617b      	str	r3, [r7, #20]
        break;
 800b720:	e009      	b.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800b722:	bf00      	nop
 800b724:	40023800 	.word	0x40023800
 800b728:	00f42400 	.word	0x00f42400
 800b72c:	017d7840 	.word	0x017d7840
 800b730:	00bb8000 	.word	0x00bb8000
        break;
 800b734:	bf00      	nop
      }
    }
  }

  return frequency;
 800b736:	697b      	ldr	r3, [r7, #20]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e071      	b.n	800b83e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7f5b      	ldrb	r3, [r3, #29]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d105      	bne.n	800b770 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7f6 fe4a 	bl	8002404 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2202      	movs	r2, #2
 800b774:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0310 	and.w	r3, r3, #16
 800b780:	2b10      	cmp	r3, #16
 800b782:	d053      	beq.n	800b82c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	22ca      	movs	r2, #202	@ 0xca
 800b78a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2253      	movs	r2, #83	@ 0x53
 800b792:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fac7 	bl	800bd28 <RTC_EnterInitMode>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d12a      	bne.n	800b7fa <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6899      	ldr	r1, [r3, #8]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	4b26      	ldr	r3, [pc, #152]	@ (800b848 <HAL_RTC_Init+0x104>)
 800b7b0:	400b      	ands	r3, r1
 800b7b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6899      	ldr	r1, [r3, #8]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	68d2      	ldr	r2, [r2, #12]
 800b7da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6919      	ldr	r1, [r3, #16]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	041a      	lsls	r2, r3, #16
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fad0 	bl	800bd96 <RTC_ExitInitMode>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d110      	bne.n	800b822 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f022 0208 	bic.w	r2, r2, #8
 800b80e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699a      	ldr	r2, [r3, #24]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	22ff      	movs	r2, #255	@ 0xff
 800b828:	625a      	str	r2, [r3, #36]	@ 0x24
 800b82a:	e001      	b.n	800b830 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	ff8fffbf 	.word	0xff8fffbf

0800b84c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	7f1b      	ldrb	r3, [r3, #28]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <HAL_RTC_SetTime+0x1c>
 800b864:	2302      	movs	r3, #2
 800b866:	e085      	b.n	800b974 <HAL_RTC_SetTime+0x128>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2201      	movs	r2, #1
 800b86c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2202      	movs	r2, #2
 800b872:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d126      	bne.n	800b8c8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	4618      	mov	r0, r3
 800b894:	f000 faa4 	bl	800bde0 <RTC_ByteToBcd2>
 800b898:	4603      	mov	r3, r0
 800b89a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 fa9d 	bl	800bde0 <RTC_ByteToBcd2>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b8aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	789b      	ldrb	r3, [r3, #2]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fa95 	bl	800bde0 <RTC_ByteToBcd2>
 800b8b6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b8b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	78db      	ldrb	r3, [r3, #3]
 800b8c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e018      	b.n	800b8fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b8e8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b8ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	78db      	ldrb	r3, [r3, #3]
 800b8f4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	22ca      	movs	r2, #202	@ 0xca
 800b900:	625a      	str	r2, [r3, #36]	@ 0x24
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2253      	movs	r2, #83	@ 0x53
 800b908:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 fa0c 	bl	800bd28 <RTC_EnterInitMode>
 800b910:	4603      	mov	r3, r0
 800b912:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b914:	7cfb      	ldrb	r3, [r7, #19]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d11e      	bne.n	800b958 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	6979      	ldr	r1, [r7, #20]
 800b920:	4b16      	ldr	r3, [pc, #88]	@ (800b97c <HAL_RTC_SetTime+0x130>)
 800b922:	400b      	ands	r3, r1
 800b924:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b934:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6899      	ldr	r1, [r3, #8]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	68da      	ldr	r2, [r3, #12]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	431a      	orrs	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f000 fa21 	bl	800bd96 <RTC_ExitInitMode>
 800b954:	4603      	mov	r3, r0
 800b956:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b958:	7cfb      	ldrb	r3, [r7, #19]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d102      	bne.n	800b964 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2201      	movs	r2, #1
 800b962:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	22ff      	movs	r2, #255	@ 0xff
 800b96a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	771a      	strb	r2, [r3, #28]

  return status;
 800b972:	7cfb      	ldrb	r3, [r7, #19]
}
 800b974:	4618      	mov	r0, r3
 800b976:	371c      	adds	r7, #28
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd90      	pop	{r4, r7, pc}
 800b97c:	007f7f7f 	.word	0x007f7f7f

0800b980 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	7f1b      	ldrb	r3, [r3, #28]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d101      	bne.n	800b99c <HAL_RTC_SetDate+0x1c>
 800b998:	2302      	movs	r3, #2
 800b99a:	e06f      	b.n	800ba7c <HAL_RTC_SetDate+0xfc>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10e      	bne.n	800b9cc <HAL_RTC_SetDate+0x4c>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	785b      	ldrb	r3, [r3, #1]
 800b9b2:	f003 0310 	and.w	r3, r3, #16
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d008      	beq.n	800b9cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	785b      	ldrb	r3, [r3, #1]
 800b9be:	f023 0310 	bic.w	r3, r3, #16
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	330a      	adds	r3, #10
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d11c      	bne.n	800ba0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	78db      	ldrb	r3, [r3, #3]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 fa02 	bl	800bde0 <RTC_ByteToBcd2>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 f9fb 	bl	800bde0 <RTC_ByteToBcd2>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b9ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	789b      	ldrb	r3, [r3, #2]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 f9f3 	bl	800bde0 <RTC_ByteToBcd2>
 800b9fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	e00e      	b.n	800ba2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	78db      	ldrb	r3, [r3, #3]
 800ba10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba26:	4313      	orrs	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	22ca      	movs	r2, #202	@ 0xca
 800ba30:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2253      	movs	r2, #83	@ 0x53
 800ba38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 f974 	bl	800bd28 <RTC_EnterInitMode>
 800ba40:	4603      	mov	r3, r0
 800ba42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ba44:	7cfb      	ldrb	r3, [r7, #19]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	6979      	ldr	r1, [r7, #20]
 800ba50:	4b0c      	ldr	r3, [pc, #48]	@ (800ba84 <HAL_RTC_SetDate+0x104>)
 800ba52:	400b      	ands	r3, r1
 800ba54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f99d 	bl	800bd96 <RTC_ExitInitMode>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ba60:	7cfb      	ldrb	r3, [r7, #19]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	22ff      	movs	r2, #255	@ 0xff
 800ba72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	771a      	strb	r2, [r3, #28]

  return status;
 800ba7a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd90      	pop	{r4, r7, pc}
 800ba84:	00ffff3f 	.word	0x00ffff3f

0800ba88 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b089      	sub	sp, #36	@ 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	7f1b      	ldrb	r3, [r3, #28]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d101      	bne.n	800baac <HAL_RTC_SetAlarm+0x24>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e113      	b.n	800bcd4 <HAL_RTC_SetAlarm+0x24c>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2202      	movs	r2, #2
 800bab6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d137      	bne.n	800bb2e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2200      	movs	r2, #0
 800bad0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 f982 	bl	800bde0 <RTC_ByteToBcd2>
 800badc:	4603      	mov	r3, r0
 800bade:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	785b      	ldrb	r3, [r3, #1]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f97b 	bl	800bde0 <RTC_ByteToBcd2>
 800baea:	4603      	mov	r3, r0
 800baec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800baee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	789b      	ldrb	r3, [r3, #2]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f973 	bl	800bde0 <RTC_ByteToBcd2>
 800bafa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bafc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	78db      	ldrb	r3, [r3, #3]
 800bb04:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bb06:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 f965 	bl	800bde0 <RTC_ByteToBcd2>
 800bb16:	4603      	mov	r3, r0
 800bb18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800bb1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bb22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	e023      	b.n	800bb76 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bb4e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bb54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	78db      	ldrb	r3, [r3, #3]
 800bb5a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bb5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bb66:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb6c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bb72:	4313      	orrs	r3, r2
 800bb74:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	22ca      	movs	r2, #202	@ 0xca
 800bb88:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2253      	movs	r2, #83	@ 0x53
 800bb90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb9a:	d148      	bne.n	800bc2e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689a      	ldr	r2, [r3, #8]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbaa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bbba:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bbcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bbce:	f7f8 feed 	bl	80049ac <HAL_GetTick>
 800bbd2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bbd4:	e013      	b.n	800bbfe <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bbd6:	f7f8 fee9 	bl	80049ac <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbe4:	d90b      	bls.n	800bbfe <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	22ff      	movs	r2, #255	@ 0xff
 800bbec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2203      	movs	r2, #3
 800bbf2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e06a      	b.n	800bcd4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d0e4      	beq.n	800bbd6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689a      	ldr	r2, [r3, #8]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc2a:	609a      	str	r2, [r3, #8]
 800bc2c:	e047      	b.n	800bcbe <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bc3c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc4c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bc5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc60:	f7f8 fea4 	bl	80049ac <HAL_GetTick>
 800bc64:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc66:	e013      	b.n	800bc90 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc68:	f7f8 fea0 	bl	80049ac <HAL_GetTick>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc76:	d90b      	bls.n	800bc90 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	22ff      	movs	r2, #255	@ 0xff
 800bc7e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2203      	movs	r2, #3
 800bc84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e021      	b.n	800bcd4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0e4      	beq.n	800bc68 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	69fa      	ldr	r2, [r7, #28]
 800bca4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bcbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	22ff      	movs	r2, #255	@ 0xff
 800bcc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3724      	adds	r7, #36	@ 0x24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd90      	pop	{r4, r7, pc}

0800bcdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a0d      	ldr	r2, [pc, #52]	@ (800bd24 <HAL_RTC_WaitForSynchro+0x48>)
 800bcee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bcf0:	f7f8 fe5c 	bl	80049ac <HAL_GetTick>
 800bcf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bcf6:	e009      	b.n	800bd0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bcf8:	f7f8 fe58 	bl	80049ac <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd06:	d901      	bls.n	800bd0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e007      	b.n	800bd1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d0ee      	beq.n	800bcf8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	0001ff5f 	.word	0x0001ff5f

0800bd28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d122      	bne.n	800bd8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bd54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd56:	f7f8 fe29 	bl	80049ac <HAL_GetTick>
 800bd5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd5c:	e00c      	b.n	800bd78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd5e:	f7f8 fe25 	bl	80049ac <HAL_GetTick>
 800bd62:	4602      	mov	r2, r0
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd6c:	d904      	bls.n	800bd78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2204      	movs	r2, #4
 800bd72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d102      	bne.n	800bd8c <RTC_EnterInitMode+0x64>
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d1e8      	bne.n	800bd5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68da      	ldr	r2, [r3, #12]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f003 0320 	and.w	r3, r3, #32
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff ff8b 	bl	800bcdc <HAL_RTC_WaitForSynchro>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2204      	movs	r2, #4
 800bdd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bdee:	e005      	b.n	800bdfc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	3b0a      	subs	r3, #10
 800bdfa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d8f6      	bhi.n	800bdf0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	79fb      	ldrb	r3, [r7, #7]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b2db      	uxtb	r3, r3
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e156      	b.n	800c0e8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7f6 ffbc 	bl	8002dcc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2202      	movs	r2, #2
 800be58:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f95b 	bl	800c118 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	2b02      	cmp	r3, #2
 800be68:	d00c      	beq.n	800be84 <HAL_SAI_Init+0x68>
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d80d      	bhi.n	800be8a <HAL_SAI_Init+0x6e>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <HAL_SAI_Init+0x5c>
 800be72:	2b01      	cmp	r3, #1
 800be74:	d003      	beq.n	800be7e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800be76:	e008      	b.n	800be8a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800be78:	2300      	movs	r3, #0
 800be7a:	61fb      	str	r3, [r7, #28]
      break;
 800be7c:	e006      	b.n	800be8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800be7e:	2310      	movs	r3, #16
 800be80:	61fb      	str	r3, [r7, #28]
      break;
 800be82:	e003      	b.n	800be8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800be84:	2320      	movs	r3, #32
 800be86:	61fb      	str	r3, [r7, #28]
      break;
 800be88:	e000      	b.n	800be8c <HAL_SAI_Init+0x70>
      break;
 800be8a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	2b03      	cmp	r3, #3
 800be92:	d81e      	bhi.n	800bed2 <HAL_SAI_Init+0xb6>
 800be94:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <HAL_SAI_Init+0x80>)
 800be96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9a:	bf00      	nop
 800be9c:	0800bead 	.word	0x0800bead
 800bea0:	0800beb3 	.word	0x0800beb3
 800bea4:	0800bebb 	.word	0x0800bebb
 800bea8:	0800bec3 	.word	0x0800bec3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	617b      	str	r3, [r7, #20]
    }
    break;
 800beb0:	e010      	b.n	800bed4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800beb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beb6:	617b      	str	r3, [r7, #20]
    }
    break;
 800beb8:	e00c      	b.n	800bed4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800beba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bebe:	617b      	str	r3, [r7, #20]
    }
    break;
 800bec0:	e008      	b.n	800bed4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bec2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bec6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bed0:	e000      	b.n	800bed4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bed2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a85      	ldr	r2, [pc, #532]	@ (800c0f0 <HAL_SAI_Init+0x2d4>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d004      	beq.n	800bee8 <HAL_SAI_Init+0xcc>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a84      	ldr	r2, [pc, #528]	@ (800c0f4 <HAL_SAI_Init+0x2d8>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d103      	bne.n	800bef0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bee8:	4a83      	ldr	r2, [pc, #524]	@ (800c0f8 <HAL_SAI_Init+0x2dc>)
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	e002      	b.n	800bef6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bef0:	4a82      	ldr	r2, [pc, #520]	@ (800c0fc <HAL_SAI_Init+0x2e0>)
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d04c      	beq.n	800bf98 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a7a      	ldr	r2, [pc, #488]	@ (800c0f0 <HAL_SAI_Init+0x2d4>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d004      	beq.n	800bf16 <HAL_SAI_Init+0xfa>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a78      	ldr	r2, [pc, #480]	@ (800c0f4 <HAL_SAI_Init+0x2d8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d104      	bne.n	800bf20 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bf16:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bf1a:	f7ff faa5 	bl	800b468 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf1e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a76      	ldr	r2, [pc, #472]	@ (800c100 <HAL_SAI_Init+0x2e4>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d004      	beq.n	800bf34 <HAL_SAI_Init+0x118>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a75      	ldr	r2, [pc, #468]	@ (800c104 <HAL_SAI_Init+0x2e8>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d104      	bne.n	800bf3e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bf34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bf38:	f7ff fa96 	bl	800b468 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf3c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	461a      	mov	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	025b      	lsls	r3, r3, #9
 800bf50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf54:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4a6b      	ldr	r2, [pc, #428]	@ (800c108 <HAL_SAI_Init+0x2ec>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	08da      	lsrs	r2, r3, #3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bf64:	68f9      	ldr	r1, [r7, #12]
 800bf66:	4b68      	ldr	r3, [pc, #416]	@ (800c108 <HAL_SAI_Init+0x2ec>)
 800bf68:	fba3 2301 	umull	r2, r3, r3, r1
 800bf6c:	08da      	lsrs	r2, r3, #3
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	1aca      	subs	r2, r1, r3
 800bf78:	2a08      	cmp	r2, #8
 800bf7a:	d904      	bls.n	800bf86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d104      	bne.n	800bf98 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	085a      	lsrs	r2, r3, #1
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <HAL_SAI_Init+0x18c>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d109      	bne.n	800bfbc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_SAI_Init+0x198>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e001      	b.n	800bfb8 <HAL_SAI_Init+0x19c>
 800bfb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	e008      	b.n	800bfce <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d102      	bne.n	800bfca <HAL_SAI_Init+0x1ae>
 800bfc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfc8:	e000      	b.n	800bfcc <HAL_SAI_Init+0x1b0>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	4b4c      	ldr	r3, [pc, #304]	@ (800c10c <HAL_SAI_Init+0x2f0>)
 800bfda:	400b      	ands	r3, r1
 800bfdc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfec:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bff2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff8:	431a      	orrs	r2, r3
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c006:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c012:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	051b      	lsls	r3, r3, #20
 800c01a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	430a      	orrs	r2, r1
 800c022:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6859      	ldr	r1, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	4b38      	ldr	r3, [pc, #224]	@ (800c110 <HAL_SAI_Init+0x2f4>)
 800c030:	400b      	ands	r3, r1
 800c032:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6859      	ldr	r1, [r3, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699a      	ldr	r2, [r3, #24]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c042:	431a      	orrs	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c048:	431a      	orrs	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6899      	ldr	r1, [r3, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	4b2d      	ldr	r3, [pc, #180]	@ (800c114 <HAL_SAI_Init+0x2f8>)
 800c05e:	400b      	ands	r3, r1
 800c060:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6899      	ldr	r1, [r3, #8]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c072:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c078:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c07e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c084:	3b01      	subs	r3, #1
 800c086:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c088:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68d9      	ldr	r1, [r3, #12]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c0a0:	400b      	ands	r3, r1
 800c0a2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68d9      	ldr	r1, [r3, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0b2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0b8:	041b      	lsls	r3, r3, #16
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3720      	adds	r7, #32
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	40015804 	.word	0x40015804
 800c0f4:	40015824 	.word	0x40015824
 800c0f8:	40015800 	.word	0x40015800
 800c0fc:	40015c00 	.word	0x40015c00
 800c100:	40015c04 	.word	0x40015c04
 800c104:	40015c24 	.word	0x40015c24
 800c108:	cccccccd 	.word	0xcccccccd
 800c10c:	ff05c010 	.word	0xff05c010
 800c110:	ffff1ff0 	.word	0xffff1ff0
 800c114:	fff88000 	.word	0xfff88000

0800c118 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c120:	4b17      	ldr	r3, [pc, #92]	@ (800c180 <SAI_Disable+0x68>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a17      	ldr	r2, [pc, #92]	@ (800c184 <SAI_Disable+0x6c>)
 800c126:	fba2 2303 	umull	r2, r3, r2, r3
 800c12a:	0b1b      	lsrs	r3, r3, #12
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c142:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	1e5a      	subs	r2, r3, #1
 800c148:	60fa      	str	r2, [r7, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c154:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	72fb      	strb	r3, [r7, #11]
      break;
 800c162:	e006      	b.n	800c172 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e8      	bne.n	800c144 <SAI_Disable+0x2c>

  return status;
 800c172:	7afb      	ldrb	r3, [r7, #11]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	20000000 	.word	0x20000000
 800c184:	95cbec1b 	.word	0x95cbec1b

0800c188 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	e025      	b.n	800c1e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7f6 fe01 	bl	8002db8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f001 fec7 	bl	800df5c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	f001 ff1b 	bl	800e014 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c202:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	2b02      	cmp	r3, #2
 800c208:	d101      	bne.n	800c20e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800c20a:	2302      	movs	r3, #2
 800c20c:	e021      	b.n	800c252 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d002      	beq.n	800c21a <HAL_SDRAM_SendCommand+0x2a>
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	2b05      	cmp	r3, #5
 800c218:	d118      	bne.n	800c24c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2202      	movs	r2, #2
 800c21e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f001 ff5c 	bl	800e0e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d104      	bne.n	800c242 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2205      	movs	r2, #5
 800c23c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c240:	e006      	b.n	800c250 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c24a:	e001      	b.n	800c250 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e000      	b.n	800c252 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d101      	bne.n	800c274 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c270:	2302      	movs	r3, #2
 800c272:	e016      	b.n	800c2a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d10f      	bne.n	800c2a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	f001 ff4e 	bl	800e130 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e000      	b.n	800c2a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e04c      	b.n	800c358 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7f6 f8ec 	bl	80024b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f022 0203 	bic.w	r2, r2, #3
 800c2ee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4b19      	ldr	r3, [pc, #100]	@ (800c360 <HAL_SPDIFRX_Init+0xb4>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c308:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c30e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c314:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c31a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c320:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c326:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c32c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800c332:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800c338:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	fff88407 	.word	0xfff88407

0800c364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e09d      	b.n	800c4b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d108      	bne.n	800c390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c386:	d009      	beq.n	800c39c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	61da      	str	r2, [r3, #28]
 800c38e:	e005      	b.n	800c39c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7f6 f8e0 	bl	800257c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c3dc:	d902      	bls.n	800c3e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	e002      	b.n	800c3ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c3e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c3e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c3f2:	d007      	beq.n	800c404 <HAL_SPI_Init+0xa0>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c3fc:	d002      	beq.n	800c404 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c414:	431a      	orrs	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	f003 0302 	and.w	r3, r3, #2
 800c41e:	431a      	orrs	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c446:	ea42 0103 	orr.w	r1, r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c44e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	430a      	orrs	r2, r1
 800c458:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	0c1b      	lsrs	r3, r3, #16
 800c460:	f003 0204 	and.w	r2, r3, #4
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c468:	f003 0310 	and.w	r3, r3, #16
 800c46c:	431a      	orrs	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c472:	f003 0308 	and.w	r3, r3, #8
 800c476:	431a      	orrs	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c480:	ea42 0103 	orr.w	r1, r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	69da      	ldr	r2, [r3, #28]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c4a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e049      	b.n	800c560 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d106      	bne.n	800c4e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7f6 f8bf 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f000 fc11 	bl	800cd20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d001      	beq.n	800c580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e054      	b.n	800c62a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68da      	ldr	r2, [r3, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0201 	orr.w	r2, r2, #1
 800c596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a26      	ldr	r2, [pc, #152]	@ (800c638 <HAL_TIM_Base_Start_IT+0xd0>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d022      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5aa:	d01d      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a22      	ldr	r2, [pc, #136]	@ (800c63c <HAL_TIM_Base_Start_IT+0xd4>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d018      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a21      	ldr	r2, [pc, #132]	@ (800c640 <HAL_TIM_Base_Start_IT+0xd8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d013      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c644 <HAL_TIM_Base_Start_IT+0xdc>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d00e      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1e      	ldr	r2, [pc, #120]	@ (800c648 <HAL_TIM_Base_Start_IT+0xe0>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d009      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c64c <HAL_TIM_Base_Start_IT+0xe4>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d004      	beq.n	800c5e8 <HAL_TIM_Base_Start_IT+0x80>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a1b      	ldr	r2, [pc, #108]	@ (800c650 <HAL_TIM_Base_Start_IT+0xe8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d115      	bne.n	800c614 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689a      	ldr	r2, [r3, #8]
 800c5ee:	4b19      	ldr	r3, [pc, #100]	@ (800c654 <HAL_TIM_Base_Start_IT+0xec>)
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b06      	cmp	r3, #6
 800c5f8:	d015      	beq.n	800c626 <HAL_TIM_Base_Start_IT+0xbe>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c600:	d011      	beq.n	800c626 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f042 0201 	orr.w	r2, r2, #1
 800c610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c612:	e008      	b.n	800c626 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f042 0201 	orr.w	r2, r2, #1
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	e000      	b.n	800c628 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	40010000 	.word	0x40010000
 800c63c:	40000400 	.word	0x40000400
 800c640:	40000800 	.word	0x40000800
 800c644:	40000c00 	.word	0x40000c00
 800c648:	40010400 	.word	0x40010400
 800c64c:	40014000 	.word	0x40014000
 800c650:	40001800 	.word	0x40001800
 800c654:	00010007 	.word	0x00010007

0800c658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e049      	b.n	800c6fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d106      	bne.n	800c684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7f6 f838 	bl	80026f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3304      	adds	r3, #4
 800c694:	4619      	mov	r1, r3
 800c696:	4610      	mov	r0, r2
 800c698:	f000 fb42 	bl	800cd20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f003 0302 	and.w	r3, r3, #2
 800c724:	2b00      	cmp	r3, #0
 800c726:	d020      	beq.n	800c76a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f003 0302 	and.w	r3, r3, #2
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d01b      	beq.n	800c76a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f06f 0202 	mvn.w	r2, #2
 800c73a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	f003 0303 	and.w	r3, r3, #3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fac7 	bl	800cce4 <HAL_TIM_IC_CaptureCallback>
 800c756:	e005      	b.n	800c764 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fab9 	bl	800ccd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 faca 	bl	800ccf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d020      	beq.n	800c7b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f003 0304 	and.w	r3, r3, #4
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01b      	beq.n	800c7b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f06f 0204 	mvn.w	r2, #4
 800c786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 faa1 	bl	800cce4 <HAL_TIM_IC_CaptureCallback>
 800c7a2:	e005      	b.n	800c7b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fa93 	bl	800ccd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 faa4 	bl	800ccf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f003 0308 	and.w	r3, r3, #8
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d020      	beq.n	800c802 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f003 0308 	and.w	r3, r3, #8
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d01b      	beq.n	800c802 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f06f 0208 	mvn.w	r2, #8
 800c7d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	f003 0303 	and.w	r3, r3, #3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fa7b 	bl	800cce4 <HAL_TIM_IC_CaptureCallback>
 800c7ee:	e005      	b.n	800c7fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fa6d 	bl	800ccd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fa7e 	bl	800ccf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d020      	beq.n	800c84e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	d01b      	beq.n	800c84e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f06f 0210 	mvn.w	r2, #16
 800c81e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2208      	movs	r2, #8
 800c824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa55 	bl	800cce4 <HAL_TIM_IC_CaptureCallback>
 800c83a:	e005      	b.n	800c848 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fa47 	bl	800ccd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fa58 	bl	800ccf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f003 0301 	and.w	r3, r3, #1
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00c      	beq.n	800c872 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d007      	beq.n	800c872 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f06f 0201 	mvn.w	r2, #1
 800c86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7f5 f929 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d104      	bne.n	800c886 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00c      	beq.n	800c8a0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d007      	beq.n	800c8a0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fe7c 	bl	800d598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d007      	beq.n	800c8c4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fe74 	bl	800d5ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00c      	beq.n	800c8e8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d007      	beq.n	800c8e8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa12 	bl	800cd0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f003 0320 	and.w	r3, r3, #32
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00c      	beq.n	800c90c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d007      	beq.n	800c90c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f06f 0220 	mvn.w	r2, #32
 800c904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fe3c 	bl	800d584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c90c:	bf00      	nop
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d101      	bne.n	800c932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c92e:	2302      	movs	r3, #2
 800c930:	e0ff      	b.n	800cb32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2201      	movs	r2, #1
 800c936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b14      	cmp	r3, #20
 800c93e:	f200 80f0 	bhi.w	800cb22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c942:	a201      	add	r2, pc, #4	@ (adr r2, 800c948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c948:	0800c99d 	.word	0x0800c99d
 800c94c:	0800cb23 	.word	0x0800cb23
 800c950:	0800cb23 	.word	0x0800cb23
 800c954:	0800cb23 	.word	0x0800cb23
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800cb23 	.word	0x0800cb23
 800c960:	0800cb23 	.word	0x0800cb23
 800c964:	0800cb23 	.word	0x0800cb23
 800c968:	0800ca1f 	.word	0x0800ca1f
 800c96c:	0800cb23 	.word	0x0800cb23
 800c970:	0800cb23 	.word	0x0800cb23
 800c974:	0800cb23 	.word	0x0800cb23
 800c978:	0800ca5f 	.word	0x0800ca5f
 800c97c:	0800cb23 	.word	0x0800cb23
 800c980:	0800cb23 	.word	0x0800cb23
 800c984:	0800cb23 	.word	0x0800cb23
 800c988:	0800caa1 	.word	0x0800caa1
 800c98c:	0800cb23 	.word	0x0800cb23
 800c990:	0800cb23 	.word	0x0800cb23
 800c994:	0800cb23 	.word	0x0800cb23
 800c998:	0800cae1 	.word	0x0800cae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68b9      	ldr	r1, [r7, #8]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fa68 	bl	800ce78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0208 	orr.w	r2, r2, #8
 800c9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	699a      	ldr	r2, [r3, #24]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0204 	bic.w	r2, r2, #4
 800c9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6999      	ldr	r1, [r3, #24]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	691a      	ldr	r2, [r3, #16]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	619a      	str	r2, [r3, #24]
      break;
 800c9da:	e0a5      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 faba 	bl	800cf5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6999      	ldr	r1, [r3, #24]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	021a      	lsls	r2, r3, #8
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	619a      	str	r2, [r3, #24]
      break;
 800ca1c:	e084      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 fb11 	bl	800d04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69da      	ldr	r2, [r3, #28]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 0208 	orr.w	r2, r2, #8
 800ca38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69da      	ldr	r2, [r3, #28]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 0204 	bic.w	r2, r2, #4
 800ca48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69d9      	ldr	r1, [r3, #28]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	691a      	ldr	r2, [r3, #16]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	61da      	str	r2, [r3, #28]
      break;
 800ca5c:	e064      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fb67 	bl	800d138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	69da      	ldr	r2, [r3, #28]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	69da      	ldr	r2, [r3, #28]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	69d9      	ldr	r1, [r3, #28]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	021a      	lsls	r2, r3, #8
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	61da      	str	r2, [r3, #28]
      break;
 800ca9e:	e043      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 fb9e 	bl	800d1e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f042 0208 	orr.w	r2, r2, #8
 800caba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0204 	bic.w	r2, r2, #4
 800caca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cade:	e023      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fbd0 	bl	800d28c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cafa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	021a      	lsls	r2, r3, #8
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb20:	e002      	b.n	800cb28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	75fb      	strb	r3, [r7, #23]
      break;
 800cb26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop

0800cb3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d101      	bne.n	800cb58 <HAL_TIM_ConfigClockSource+0x1c>
 800cb54:	2302      	movs	r3, #2
 800cb56:	e0b4      	b.n	800ccc2 <HAL_TIM_ConfigClockSource+0x186>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	4b56      	ldr	r3, [pc, #344]	@ (800cccc <HAL_TIM_ConfigClockSource+0x190>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb90:	d03e      	beq.n	800cc10 <HAL_TIM_ConfigClockSource+0xd4>
 800cb92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb96:	f200 8087 	bhi.w	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cb9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb9e:	f000 8086 	beq.w	800ccae <HAL_TIM_ConfigClockSource+0x172>
 800cba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cba6:	d87f      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cba8:	2b70      	cmp	r3, #112	@ 0x70
 800cbaa:	d01a      	beq.n	800cbe2 <HAL_TIM_ConfigClockSource+0xa6>
 800cbac:	2b70      	cmp	r3, #112	@ 0x70
 800cbae:	d87b      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbb0:	2b60      	cmp	r3, #96	@ 0x60
 800cbb2:	d050      	beq.n	800cc56 <HAL_TIM_ConfigClockSource+0x11a>
 800cbb4:	2b60      	cmp	r3, #96	@ 0x60
 800cbb6:	d877      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbb8:	2b50      	cmp	r3, #80	@ 0x50
 800cbba:	d03c      	beq.n	800cc36 <HAL_TIM_ConfigClockSource+0xfa>
 800cbbc:	2b50      	cmp	r3, #80	@ 0x50
 800cbbe:	d873      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbc0:	2b40      	cmp	r3, #64	@ 0x40
 800cbc2:	d058      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x13a>
 800cbc4:	2b40      	cmp	r3, #64	@ 0x40
 800cbc6:	d86f      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbc8:	2b30      	cmp	r3, #48	@ 0x30
 800cbca:	d064      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15a>
 800cbcc:	2b30      	cmp	r3, #48	@ 0x30
 800cbce:	d86b      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d060      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15a>
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d867      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d05c      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15a>
 800cbdc:	2b10      	cmp	r3, #16
 800cbde:	d05a      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15a>
 800cbe0:	e062      	b.n	800cca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbf2:	f000 fc19 	bl	800d428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	609a      	str	r2, [r3, #8]
      break;
 800cc0e:	e04f      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc20:	f000 fc02 	bl	800d428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc32:	609a      	str	r2, [r3, #8]
      break;
 800cc34:	e03c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc42:	461a      	mov	r2, r3
 800cc44:	f000 fb76 	bl	800d334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2150      	movs	r1, #80	@ 0x50
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fbcf 	bl	800d3f2 <TIM_ITRx_SetConfig>
      break;
 800cc54:	e02c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc62:	461a      	mov	r2, r3
 800cc64:	f000 fb95 	bl	800d392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2160      	movs	r1, #96	@ 0x60
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fbbf 	bl	800d3f2 <TIM_ITRx_SetConfig>
      break;
 800cc74:	e01c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc82:	461a      	mov	r2, r3
 800cc84:	f000 fb56 	bl	800d334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2140      	movs	r1, #64	@ 0x40
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fbaf 	bl	800d3f2 <TIM_ITRx_SetConfig>
      break;
 800cc94:	e00c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f000 fba6 	bl	800d3f2 <TIM_ITRx_SetConfig>
      break;
 800cca6:	e003      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ccac:	e000      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ccae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	fffeff88 	.word	0xfffeff88

0800ccd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a46      	ldr	r2, [pc, #280]	@ (800ce4c <TIM_Base_SetConfig+0x12c>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d013      	beq.n	800cd60 <TIM_Base_SetConfig+0x40>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd3e:	d00f      	beq.n	800cd60 <TIM_Base_SetConfig+0x40>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a43      	ldr	r2, [pc, #268]	@ (800ce50 <TIM_Base_SetConfig+0x130>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d00b      	beq.n	800cd60 <TIM_Base_SetConfig+0x40>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a42      	ldr	r2, [pc, #264]	@ (800ce54 <TIM_Base_SetConfig+0x134>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d007      	beq.n	800cd60 <TIM_Base_SetConfig+0x40>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a41      	ldr	r2, [pc, #260]	@ (800ce58 <TIM_Base_SetConfig+0x138>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d003      	beq.n	800cd60 <TIM_Base_SetConfig+0x40>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a40      	ldr	r2, [pc, #256]	@ (800ce5c <TIM_Base_SetConfig+0x13c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d108      	bne.n	800cd72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a35      	ldr	r2, [pc, #212]	@ (800ce4c <TIM_Base_SetConfig+0x12c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d02b      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd80:	d027      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a32      	ldr	r2, [pc, #200]	@ (800ce50 <TIM_Base_SetConfig+0x130>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d023      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a31      	ldr	r2, [pc, #196]	@ (800ce54 <TIM_Base_SetConfig+0x134>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d01f      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a30      	ldr	r2, [pc, #192]	@ (800ce58 <TIM_Base_SetConfig+0x138>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d01b      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2f      	ldr	r2, [pc, #188]	@ (800ce5c <TIM_Base_SetConfig+0x13c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d017      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2e      	ldr	r2, [pc, #184]	@ (800ce60 <TIM_Base_SetConfig+0x140>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a2d      	ldr	r2, [pc, #180]	@ (800ce64 <TIM_Base_SetConfig+0x144>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00f      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a2c      	ldr	r2, [pc, #176]	@ (800ce68 <TIM_Base_SetConfig+0x148>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00b      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ce6c <TIM_Base_SetConfig+0x14c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d007      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ce70 <TIM_Base_SetConfig+0x150>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d003      	beq.n	800cdd2 <TIM_Base_SetConfig+0xb2>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a29      	ldr	r2, [pc, #164]	@ (800ce74 <TIM_Base_SetConfig+0x154>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d108      	bne.n	800cde4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a10      	ldr	r2, [pc, #64]	@ (800ce4c <TIM_Base_SetConfig+0x12c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d003      	beq.n	800ce18 <TIM_Base_SetConfig+0xf8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a12      	ldr	r2, [pc, #72]	@ (800ce5c <TIM_Base_SetConfig+0x13c>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d103      	bne.n	800ce20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d105      	bne.n	800ce3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	f023 0201 	bic.w	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	611a      	str	r2, [r3, #16]
  }
}
 800ce3e:	bf00      	nop
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	40010000 	.word	0x40010000
 800ce50:	40000400 	.word	0x40000400
 800ce54:	40000800 	.word	0x40000800
 800ce58:	40000c00 	.word	0x40000c00
 800ce5c:	40010400 	.word	0x40010400
 800ce60:	40014000 	.word	0x40014000
 800ce64:	40014400 	.word	0x40014400
 800ce68:	40014800 	.word	0x40014800
 800ce6c:	40001800 	.word	0x40001800
 800ce70:	40001c00 	.word	0x40001c00
 800ce74:	40002000 	.word	0x40002000

0800ce78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	f023 0201 	bic.w	r2, r3, #1
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4b2b      	ldr	r3, [pc, #172]	@ (800cf50 <TIM_OC1_SetConfig+0xd8>)
 800cea4:	4013      	ands	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f023 0302 	bic.w	r3, r3, #2
 800cec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a21      	ldr	r2, [pc, #132]	@ (800cf54 <TIM_OC1_SetConfig+0xdc>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d003      	beq.n	800cedc <TIM_OC1_SetConfig+0x64>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a20      	ldr	r2, [pc, #128]	@ (800cf58 <TIM_OC1_SetConfig+0xe0>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d10c      	bne.n	800cef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f023 0308 	bic.w	r3, r3, #8
 800cee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f023 0304 	bic.w	r3, r3, #4
 800cef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a16      	ldr	r2, [pc, #88]	@ (800cf54 <TIM_OC1_SetConfig+0xdc>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d003      	beq.n	800cf06 <TIM_OC1_SetConfig+0x8e>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a15      	ldr	r2, [pc, #84]	@ (800cf58 <TIM_OC1_SetConfig+0xe0>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d111      	bne.n	800cf2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	621a      	str	r2, [r3, #32]
}
 800cf44:	bf00      	nop
 800cf46:	371c      	adds	r7, #28
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	fffeff8f 	.word	0xfffeff8f
 800cf54:	40010000 	.word	0x40010000
 800cf58:	40010400 	.word	0x40010400

0800cf5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a1b      	ldr	r3, [r3, #32]
 800cf70:	f023 0210 	bic.w	r2, r3, #16
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	4b2e      	ldr	r3, [pc, #184]	@ (800d040 <TIM_OC2_SetConfig+0xe4>)
 800cf88:	4013      	ands	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	021b      	lsls	r3, r3, #8
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	f023 0320 	bic.w	r3, r3, #32
 800cfa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	011b      	lsls	r3, r3, #4
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a23      	ldr	r2, [pc, #140]	@ (800d044 <TIM_OC2_SetConfig+0xe8>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d003      	beq.n	800cfc4 <TIM_OC2_SetConfig+0x68>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a22      	ldr	r2, [pc, #136]	@ (800d048 <TIM_OC2_SetConfig+0xec>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d10d      	bne.n	800cfe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	011b      	lsls	r3, r3, #4
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a18      	ldr	r2, [pc, #96]	@ (800d044 <TIM_OC2_SetConfig+0xe8>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d003      	beq.n	800cff0 <TIM_OC2_SetConfig+0x94>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a17      	ldr	r2, [pc, #92]	@ (800d048 <TIM_OC2_SetConfig+0xec>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d113      	bne.n	800d018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	693a      	ldr	r2, [r7, #16]
 800d008:	4313      	orrs	r3, r2
 800d00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	4313      	orrs	r3, r2
 800d016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	621a      	str	r2, [r3, #32]
}
 800d032:	bf00      	nop
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	feff8fff 	.word	0xfeff8fff
 800d044:	40010000 	.word	0x40010000
 800d048:	40010400 	.word	0x40010400

0800d04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b087      	sub	sp, #28
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	4b2d      	ldr	r3, [pc, #180]	@ (800d12c <TIM_OC3_SetConfig+0xe0>)
 800d078:	4013      	ands	r3, r2
 800d07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f023 0303 	bic.w	r3, r3, #3
 800d082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	021b      	lsls	r3, r3, #8
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a22      	ldr	r2, [pc, #136]	@ (800d130 <TIM_OC3_SetConfig+0xe4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d003      	beq.n	800d0b2 <TIM_OC3_SetConfig+0x66>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a21      	ldr	r2, [pc, #132]	@ (800d134 <TIM_OC3_SetConfig+0xe8>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d10d      	bne.n	800d0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	021b      	lsls	r3, r3, #8
 800d0c0:	697a      	ldr	r2, [r7, #20]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a17      	ldr	r2, [pc, #92]	@ (800d130 <TIM_OC3_SetConfig+0xe4>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d003      	beq.n	800d0de <TIM_OC3_SetConfig+0x92>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a16      	ldr	r2, [pc, #88]	@ (800d134 <TIM_OC3_SetConfig+0xe8>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d113      	bne.n	800d106 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d0ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	011b      	lsls	r3, r3, #4
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	4313      	orrs	r3, r2
 800d104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	621a      	str	r2, [r3, #32]
}
 800d120:	bf00      	nop
 800d122:	371c      	adds	r7, #28
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	fffeff8f 	.word	0xfffeff8f
 800d130:	40010000 	.word	0x40010000
 800d134:	40010400 	.word	0x40010400

0800d138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d138:	b480      	push	{r7}
 800d13a:	b087      	sub	sp, #28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4b1e      	ldr	r3, [pc, #120]	@ (800d1dc <TIM_OC4_SetConfig+0xa4>)
 800d164:	4013      	ands	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	4313      	orrs	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	031b      	lsls	r3, r3, #12
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a13      	ldr	r2, [pc, #76]	@ (800d1e0 <TIM_OC4_SetConfig+0xa8>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d003      	beq.n	800d1a0 <TIM_OC4_SetConfig+0x68>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a12      	ldr	r2, [pc, #72]	@ (800d1e4 <TIM_OC4_SetConfig+0xac>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d109      	bne.n	800d1b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	019b      	lsls	r3, r3, #6
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	621a      	str	r2, [r3, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	feff8fff 	.word	0xfeff8fff
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40010400 	.word	0x40010400

0800d1e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6a1b      	ldr	r3, [r3, #32]
 800d1fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	4b1b      	ldr	r3, [pc, #108]	@ (800d280 <TIM_OC5_SetConfig+0x98>)
 800d214:	4013      	ands	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4313      	orrs	r3, r2
 800d220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	041b      	lsls	r3, r3, #16
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	4313      	orrs	r3, r2
 800d234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a12      	ldr	r2, [pc, #72]	@ (800d284 <TIM_OC5_SetConfig+0x9c>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d003      	beq.n	800d246 <TIM_OC5_SetConfig+0x5e>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a11      	ldr	r2, [pc, #68]	@ (800d288 <TIM_OC5_SetConfig+0xa0>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d109      	bne.n	800d25a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d24c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	021b      	lsls	r3, r3, #8
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	621a      	str	r2, [r3, #32]
}
 800d274:	bf00      	nop
 800d276:	371c      	adds	r7, #28
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	fffeff8f 	.word	0xfffeff8f
 800d284:	40010000 	.word	0x40010000
 800d288:	40010400 	.word	0x40010400

0800d28c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <TIM_OC6_SetConfig+0x9c>)
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	021b      	lsls	r3, r3, #8
 800d2c2:	68fa      	ldr	r2, [r7, #12]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d2ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	051b      	lsls	r3, r3, #20
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a13      	ldr	r2, [pc, #76]	@ (800d32c <TIM_OC6_SetConfig+0xa0>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d003      	beq.n	800d2ec <TIM_OC6_SetConfig+0x60>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a12      	ldr	r2, [pc, #72]	@ (800d330 <TIM_OC6_SetConfig+0xa4>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d109      	bne.n	800d300 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	029b      	lsls	r3, r3, #10
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	621a      	str	r2, [r3, #32]
}
 800d31a:	bf00      	nop
 800d31c:	371c      	adds	r7, #28
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	feff8fff 	.word	0xfeff8fff
 800d32c:	40010000 	.word	0x40010000
 800d330:	40010400 	.word	0x40010400

0800d334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d334:	b480      	push	{r7}
 800d336:	b087      	sub	sp, #28
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6a1b      	ldr	r3, [r3, #32]
 800d344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	f023 0201 	bic.w	r2, r3, #1
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	011b      	lsls	r3, r3, #4
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	4313      	orrs	r3, r2
 800d368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	f023 030a 	bic.w	r3, r3, #10
 800d370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	4313      	orrs	r3, r2
 800d378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	621a      	str	r2, [r3, #32]
}
 800d386:	bf00      	nop
 800d388:	371c      	adds	r7, #28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d392:	b480      	push	{r7}
 800d394:	b087      	sub	sp, #28
 800d396:	af00      	add	r7, sp, #0
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	f023 0210 	bic.w	r2, r3, #16
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d3bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	031b      	lsls	r3, r3, #12
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d3ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	621a      	str	r2, [r3, #32]
}
 800d3e6:	bf00      	nop
 800d3e8:	371c      	adds	r7, #28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b085      	sub	sp, #20
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	f043 0307 	orr.w	r3, r3, #7
 800d414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	609a      	str	r2, [r3, #8]
}
 800d41c:	bf00      	nop
 800d41e:	3714      	adds	r7, #20
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	021a      	lsls	r2, r3, #8
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	431a      	orrs	r2, r3
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4313      	orrs	r3, r2
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	4313      	orrs	r3, r2
 800d454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	697a      	ldr	r2, [r7, #20]
 800d45a:	609a      	str	r2, [r3, #8]
}
 800d45c:	bf00      	nop
 800d45e:	371c      	adds	r7, #28
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d101      	bne.n	800d480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d47c:	2302      	movs	r3, #2
 800d47e:	e06d      	b.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a30      	ldr	r2, [pc, #192]	@ (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d004      	beq.n	800d4b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a2f      	ldr	r2, [pc, #188]	@ (800d56c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d108      	bne.n	800d4c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d4ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a20      	ldr	r2, [pc, #128]	@ (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d022      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4f2:	d01d      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d570 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d018      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a1c      	ldr	r2, [pc, #112]	@ (800d574 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d013      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a1a      	ldr	r2, [pc, #104]	@ (800d578 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d00e      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a15      	ldr	r2, [pc, #84]	@ (800d56c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d009      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a16      	ldr	r2, [pc, #88]	@ (800d57c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d004      	beq.n	800d530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a15      	ldr	r2, [pc, #84]	@ (800d580 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d10c      	bne.n	800d54a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	40010000 	.word	0x40010000
 800d56c:	40010400 	.word	0x40010400
 800d570:	40000400 	.word	0x40000400
 800d574:	40000800 	.word	0x40000800
 800d578:	40000c00 	.word	0x40000c00
 800d57c:	40014000 	.word	0x40014000
 800d580:	40001800 	.word	0x40001800

0800d584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e040      	b.n	800d654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7f5 f962 	bl	80028ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2224      	movs	r2, #36	@ 0x24
 800d5ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f022 0201 	bic.w	r2, r2, #1
 800d5fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fa8c 	bl	800db24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f825 	bl	800d65c <UART_SetConfig>
 800d612:	4603      	mov	r3, r0
 800d614:	2b01      	cmp	r3, #1
 800d616:	d101      	bne.n	800d61c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	e01b      	b.n	800d654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d62a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d63a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f042 0201 	orr.w	r2, r2, #1
 800d64a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 fb0b 	bl	800dc68 <UART_CheckIdleState>
 800d652:	4603      	mov	r3, r0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	689a      	ldr	r2, [r3, #8]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	431a      	orrs	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4ba6      	ldr	r3, [pc, #664]	@ (800d920 <UART_SetConfig+0x2c4>)
 800d688:	4013      	ands	r3, r2
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	6812      	ldr	r2, [r2, #0]
 800d68e:	6979      	ldr	r1, [r7, #20]
 800d690:	430b      	orrs	r3, r1
 800d692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a94      	ldr	r2, [pc, #592]	@ (800d924 <UART_SetConfig+0x2c8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d120      	bne.n	800d71a <UART_SetConfig+0xbe>
 800d6d8:	4b93      	ldr	r3, [pc, #588]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6de:	f003 0303 	and.w	r3, r3, #3
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d816      	bhi.n	800d714 <UART_SetConfig+0xb8>
 800d6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6ec <UART_SetConfig+0x90>)
 800d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ec:	0800d6fd 	.word	0x0800d6fd
 800d6f0:	0800d709 	.word	0x0800d709
 800d6f4:	0800d703 	.word	0x0800d703
 800d6f8:	0800d70f 	.word	0x0800d70f
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	77fb      	strb	r3, [r7, #31]
 800d700:	e150      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d702:	2302      	movs	r3, #2
 800d704:	77fb      	strb	r3, [r7, #31]
 800d706:	e14d      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d708:	2304      	movs	r3, #4
 800d70a:	77fb      	strb	r3, [r7, #31]
 800d70c:	e14a      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d70e:	2308      	movs	r3, #8
 800d710:	77fb      	strb	r3, [r7, #31]
 800d712:	e147      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d714:	2310      	movs	r3, #16
 800d716:	77fb      	strb	r3, [r7, #31]
 800d718:	e144      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a83      	ldr	r2, [pc, #524]	@ (800d92c <UART_SetConfig+0x2d0>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d132      	bne.n	800d78a <UART_SetConfig+0x12e>
 800d724:	4b80      	ldr	r3, [pc, #512]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d72a:	f003 030c 	and.w	r3, r3, #12
 800d72e:	2b0c      	cmp	r3, #12
 800d730:	d828      	bhi.n	800d784 <UART_SetConfig+0x128>
 800d732:	a201      	add	r2, pc, #4	@ (adr r2, 800d738 <UART_SetConfig+0xdc>)
 800d734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d738:	0800d76d 	.word	0x0800d76d
 800d73c:	0800d785 	.word	0x0800d785
 800d740:	0800d785 	.word	0x0800d785
 800d744:	0800d785 	.word	0x0800d785
 800d748:	0800d779 	.word	0x0800d779
 800d74c:	0800d785 	.word	0x0800d785
 800d750:	0800d785 	.word	0x0800d785
 800d754:	0800d785 	.word	0x0800d785
 800d758:	0800d773 	.word	0x0800d773
 800d75c:	0800d785 	.word	0x0800d785
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d785 	.word	0x0800d785
 800d768:	0800d77f 	.word	0x0800d77f
 800d76c:	2300      	movs	r3, #0
 800d76e:	77fb      	strb	r3, [r7, #31]
 800d770:	e118      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d772:	2302      	movs	r3, #2
 800d774:	77fb      	strb	r3, [r7, #31]
 800d776:	e115      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d778:	2304      	movs	r3, #4
 800d77a:	77fb      	strb	r3, [r7, #31]
 800d77c:	e112      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d77e:	2308      	movs	r3, #8
 800d780:	77fb      	strb	r3, [r7, #31]
 800d782:	e10f      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d784:	2310      	movs	r3, #16
 800d786:	77fb      	strb	r3, [r7, #31]
 800d788:	e10c      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a68      	ldr	r2, [pc, #416]	@ (800d930 <UART_SetConfig+0x2d4>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d120      	bne.n	800d7d6 <UART_SetConfig+0x17a>
 800d794:	4b64      	ldr	r3, [pc, #400]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d79a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d79e:	2b30      	cmp	r3, #48	@ 0x30
 800d7a0:	d013      	beq.n	800d7ca <UART_SetConfig+0x16e>
 800d7a2:	2b30      	cmp	r3, #48	@ 0x30
 800d7a4:	d814      	bhi.n	800d7d0 <UART_SetConfig+0x174>
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d009      	beq.n	800d7be <UART_SetConfig+0x162>
 800d7aa:	2b20      	cmp	r3, #32
 800d7ac:	d810      	bhi.n	800d7d0 <UART_SetConfig+0x174>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <UART_SetConfig+0x15c>
 800d7b2:	2b10      	cmp	r3, #16
 800d7b4:	d006      	beq.n	800d7c4 <UART_SetConfig+0x168>
 800d7b6:	e00b      	b.n	800d7d0 <UART_SetConfig+0x174>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	77fb      	strb	r3, [r7, #31]
 800d7bc:	e0f2      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	77fb      	strb	r3, [r7, #31]
 800d7c2:	e0ef      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d7c4:	2304      	movs	r3, #4
 800d7c6:	77fb      	strb	r3, [r7, #31]
 800d7c8:	e0ec      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d7ca:	2308      	movs	r3, #8
 800d7cc:	77fb      	strb	r3, [r7, #31]
 800d7ce:	e0e9      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d7d0:	2310      	movs	r3, #16
 800d7d2:	77fb      	strb	r3, [r7, #31]
 800d7d4:	e0e6      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a56      	ldr	r2, [pc, #344]	@ (800d934 <UART_SetConfig+0x2d8>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d120      	bne.n	800d822 <UART_SetConfig+0x1c6>
 800d7e0:	4b51      	ldr	r3, [pc, #324]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d7ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800d7ec:	d013      	beq.n	800d816 <UART_SetConfig+0x1ba>
 800d7ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800d7f0:	d814      	bhi.n	800d81c <UART_SetConfig+0x1c0>
 800d7f2:	2b80      	cmp	r3, #128	@ 0x80
 800d7f4:	d009      	beq.n	800d80a <UART_SetConfig+0x1ae>
 800d7f6:	2b80      	cmp	r3, #128	@ 0x80
 800d7f8:	d810      	bhi.n	800d81c <UART_SetConfig+0x1c0>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <UART_SetConfig+0x1a8>
 800d7fe:	2b40      	cmp	r3, #64	@ 0x40
 800d800:	d006      	beq.n	800d810 <UART_SetConfig+0x1b4>
 800d802:	e00b      	b.n	800d81c <UART_SetConfig+0x1c0>
 800d804:	2300      	movs	r3, #0
 800d806:	77fb      	strb	r3, [r7, #31]
 800d808:	e0cc      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d80a:	2302      	movs	r3, #2
 800d80c:	77fb      	strb	r3, [r7, #31]
 800d80e:	e0c9      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d810:	2304      	movs	r3, #4
 800d812:	77fb      	strb	r3, [r7, #31]
 800d814:	e0c6      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d816:	2308      	movs	r3, #8
 800d818:	77fb      	strb	r3, [r7, #31]
 800d81a:	e0c3      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d81c:	2310      	movs	r3, #16
 800d81e:	77fb      	strb	r3, [r7, #31]
 800d820:	e0c0      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a44      	ldr	r2, [pc, #272]	@ (800d938 <UART_SetConfig+0x2dc>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d125      	bne.n	800d878 <UART_SetConfig+0x21c>
 800d82c:	4b3e      	ldr	r3, [pc, #248]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d83a:	d017      	beq.n	800d86c <UART_SetConfig+0x210>
 800d83c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d840:	d817      	bhi.n	800d872 <UART_SetConfig+0x216>
 800d842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d846:	d00b      	beq.n	800d860 <UART_SetConfig+0x204>
 800d848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d84c:	d811      	bhi.n	800d872 <UART_SetConfig+0x216>
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <UART_SetConfig+0x1fe>
 800d852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d856:	d006      	beq.n	800d866 <UART_SetConfig+0x20a>
 800d858:	e00b      	b.n	800d872 <UART_SetConfig+0x216>
 800d85a:	2300      	movs	r3, #0
 800d85c:	77fb      	strb	r3, [r7, #31]
 800d85e:	e0a1      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d860:	2302      	movs	r3, #2
 800d862:	77fb      	strb	r3, [r7, #31]
 800d864:	e09e      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d866:	2304      	movs	r3, #4
 800d868:	77fb      	strb	r3, [r7, #31]
 800d86a:	e09b      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d86c:	2308      	movs	r3, #8
 800d86e:	77fb      	strb	r3, [r7, #31]
 800d870:	e098      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d872:	2310      	movs	r3, #16
 800d874:	77fb      	strb	r3, [r7, #31]
 800d876:	e095      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a2f      	ldr	r2, [pc, #188]	@ (800d93c <UART_SetConfig+0x2e0>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d125      	bne.n	800d8ce <UART_SetConfig+0x272>
 800d882:	4b29      	ldr	r3, [pc, #164]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d888:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d88c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d890:	d017      	beq.n	800d8c2 <UART_SetConfig+0x266>
 800d892:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d896:	d817      	bhi.n	800d8c8 <UART_SetConfig+0x26c>
 800d898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d89c:	d00b      	beq.n	800d8b6 <UART_SetConfig+0x25a>
 800d89e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8a2:	d811      	bhi.n	800d8c8 <UART_SetConfig+0x26c>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <UART_SetConfig+0x254>
 800d8a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8ac:	d006      	beq.n	800d8bc <UART_SetConfig+0x260>
 800d8ae:	e00b      	b.n	800d8c8 <UART_SetConfig+0x26c>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	77fb      	strb	r3, [r7, #31]
 800d8b4:	e076      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	77fb      	strb	r3, [r7, #31]
 800d8ba:	e073      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d8bc:	2304      	movs	r3, #4
 800d8be:	77fb      	strb	r3, [r7, #31]
 800d8c0:	e070      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	77fb      	strb	r3, [r7, #31]
 800d8c6:	e06d      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d8c8:	2310      	movs	r3, #16
 800d8ca:	77fb      	strb	r3, [r7, #31]
 800d8cc:	e06a      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a1b      	ldr	r2, [pc, #108]	@ (800d940 <UART_SetConfig+0x2e4>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d138      	bne.n	800d94a <UART_SetConfig+0x2ee>
 800d8d8:	4b13      	ldr	r3, [pc, #76]	@ (800d928 <UART_SetConfig+0x2cc>)
 800d8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d8e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8e6:	d017      	beq.n	800d918 <UART_SetConfig+0x2bc>
 800d8e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8ec:	d82a      	bhi.n	800d944 <UART_SetConfig+0x2e8>
 800d8ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f2:	d00b      	beq.n	800d90c <UART_SetConfig+0x2b0>
 800d8f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f8:	d824      	bhi.n	800d944 <UART_SetConfig+0x2e8>
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <UART_SetConfig+0x2aa>
 800d8fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d902:	d006      	beq.n	800d912 <UART_SetConfig+0x2b6>
 800d904:	e01e      	b.n	800d944 <UART_SetConfig+0x2e8>
 800d906:	2300      	movs	r3, #0
 800d908:	77fb      	strb	r3, [r7, #31]
 800d90a:	e04b      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d90c:	2302      	movs	r3, #2
 800d90e:	77fb      	strb	r3, [r7, #31]
 800d910:	e048      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d912:	2304      	movs	r3, #4
 800d914:	77fb      	strb	r3, [r7, #31]
 800d916:	e045      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d918:	2308      	movs	r3, #8
 800d91a:	77fb      	strb	r3, [r7, #31]
 800d91c:	e042      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d91e:	bf00      	nop
 800d920:	efff69f3 	.word	0xefff69f3
 800d924:	40011000 	.word	0x40011000
 800d928:	40023800 	.word	0x40023800
 800d92c:	40004400 	.word	0x40004400
 800d930:	40004800 	.word	0x40004800
 800d934:	40004c00 	.word	0x40004c00
 800d938:	40005000 	.word	0x40005000
 800d93c:	40011400 	.word	0x40011400
 800d940:	40007800 	.word	0x40007800
 800d944:	2310      	movs	r3, #16
 800d946:	77fb      	strb	r3, [r7, #31]
 800d948:	e02c      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a72      	ldr	r2, [pc, #456]	@ (800db18 <UART_SetConfig+0x4bc>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d125      	bne.n	800d9a0 <UART_SetConfig+0x344>
 800d954:	4b71      	ldr	r3, [pc, #452]	@ (800db1c <UART_SetConfig+0x4c0>)
 800d956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d95a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d95e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d962:	d017      	beq.n	800d994 <UART_SetConfig+0x338>
 800d964:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d968:	d817      	bhi.n	800d99a <UART_SetConfig+0x33e>
 800d96a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d96e:	d00b      	beq.n	800d988 <UART_SetConfig+0x32c>
 800d970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d974:	d811      	bhi.n	800d99a <UART_SetConfig+0x33e>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d003      	beq.n	800d982 <UART_SetConfig+0x326>
 800d97a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d97e:	d006      	beq.n	800d98e <UART_SetConfig+0x332>
 800d980:	e00b      	b.n	800d99a <UART_SetConfig+0x33e>
 800d982:	2300      	movs	r3, #0
 800d984:	77fb      	strb	r3, [r7, #31]
 800d986:	e00d      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d988:	2302      	movs	r3, #2
 800d98a:	77fb      	strb	r3, [r7, #31]
 800d98c:	e00a      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d98e:	2304      	movs	r3, #4
 800d990:	77fb      	strb	r3, [r7, #31]
 800d992:	e007      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d994:	2308      	movs	r3, #8
 800d996:	77fb      	strb	r3, [r7, #31]
 800d998:	e004      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d99a:	2310      	movs	r3, #16
 800d99c:	77fb      	strb	r3, [r7, #31]
 800d99e:	e001      	b.n	800d9a4 <UART_SetConfig+0x348>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	69db      	ldr	r3, [r3, #28]
 800d9a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9ac:	d15b      	bne.n	800da66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
 800d9b0:	2b08      	cmp	r3, #8
 800d9b2:	d828      	bhi.n	800da06 <UART_SetConfig+0x3aa>
 800d9b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9bc <UART_SetConfig+0x360>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800d9e1 	.word	0x0800d9e1
 800d9c0:	0800d9e9 	.word	0x0800d9e9
 800d9c4:	0800d9f1 	.word	0x0800d9f1
 800d9c8:	0800da07 	.word	0x0800da07
 800d9cc:	0800d9f7 	.word	0x0800d9f7
 800d9d0:	0800da07 	.word	0x0800da07
 800d9d4:	0800da07 	.word	0x0800da07
 800d9d8:	0800da07 	.word	0x0800da07
 800d9dc:	0800d9ff 	.word	0x0800d9ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9e0:	f7fd f8c0 	bl	800ab64 <HAL_RCC_GetPCLK1Freq>
 800d9e4:	61b8      	str	r0, [r7, #24]
        break;
 800d9e6:	e013      	b.n	800da10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9e8:	f7fd f8d0 	bl	800ab8c <HAL_RCC_GetPCLK2Freq>
 800d9ec:	61b8      	str	r0, [r7, #24]
        break;
 800d9ee:	e00f      	b.n	800da10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9f0:	4b4b      	ldr	r3, [pc, #300]	@ (800db20 <UART_SetConfig+0x4c4>)
 800d9f2:	61bb      	str	r3, [r7, #24]
        break;
 800d9f4:	e00c      	b.n	800da10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9f6:	f7fc ffe3 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800d9fa:	61b8      	str	r0, [r7, #24]
        break;
 800d9fc:	e008      	b.n	800da10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da02:	61bb      	str	r3, [r7, #24]
        break;
 800da04:	e004      	b.n	800da10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	77bb      	strb	r3, [r7, #30]
        break;
 800da0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d074      	beq.n	800db00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	005a      	lsls	r2, r3, #1
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	441a      	add	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	fbb2 f3f3 	udiv	r3, r2, r3
 800da2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	2b0f      	cmp	r3, #15
 800da30:	d916      	bls.n	800da60 <UART_SetConfig+0x404>
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da38:	d212      	bcs.n	800da60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	f023 030f 	bic.w	r3, r3, #15
 800da42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	085b      	lsrs	r3, r3, #1
 800da48:	b29b      	uxth	r3, r3
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	b29a      	uxth	r2, r3
 800da50:	89fb      	ldrh	r3, [r7, #14]
 800da52:	4313      	orrs	r3, r2
 800da54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	89fa      	ldrh	r2, [r7, #14]
 800da5c:	60da      	str	r2, [r3, #12]
 800da5e:	e04f      	b.n	800db00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	77bb      	strb	r3, [r7, #30]
 800da64:	e04c      	b.n	800db00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da66:	7ffb      	ldrb	r3, [r7, #31]
 800da68:	2b08      	cmp	r3, #8
 800da6a:	d828      	bhi.n	800dabe <UART_SetConfig+0x462>
 800da6c:	a201      	add	r2, pc, #4	@ (adr r2, 800da74 <UART_SetConfig+0x418>)
 800da6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da72:	bf00      	nop
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800daa1 	.word	0x0800daa1
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	0800dabf 	.word	0x0800dabf
 800da84:	0800daaf 	.word	0x0800daaf
 800da88:	0800dabf 	.word	0x0800dabf
 800da8c:	0800dabf 	.word	0x0800dabf
 800da90:	0800dabf 	.word	0x0800dabf
 800da94:	0800dab7 	.word	0x0800dab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da98:	f7fd f864 	bl	800ab64 <HAL_RCC_GetPCLK1Freq>
 800da9c:	61b8      	str	r0, [r7, #24]
        break;
 800da9e:	e013      	b.n	800dac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800daa0:	f7fd f874 	bl	800ab8c <HAL_RCC_GetPCLK2Freq>
 800daa4:	61b8      	str	r0, [r7, #24]
        break;
 800daa6:	e00f      	b.n	800dac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800daa8:	4b1d      	ldr	r3, [pc, #116]	@ (800db20 <UART_SetConfig+0x4c4>)
 800daaa:	61bb      	str	r3, [r7, #24]
        break;
 800daac:	e00c      	b.n	800dac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800daae:	f7fc ff87 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800dab2:	61b8      	str	r0, [r7, #24]
        break;
 800dab4:	e008      	b.n	800dac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800daba:	61bb      	str	r3, [r7, #24]
        break;
 800dabc:	e004      	b.n	800dac8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800dabe:	2300      	movs	r3, #0
 800dac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	77bb      	strb	r3, [r7, #30]
        break;
 800dac6:	bf00      	nop
    }

    if (pclk != 0U)
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d018      	beq.n	800db00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	085a      	lsrs	r2, r3, #1
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	441a      	add	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b0f      	cmp	r3, #15
 800dae6:	d909      	bls.n	800dafc <UART_SetConfig+0x4a0>
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daee:	d205      	bcs.n	800dafc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	60da      	str	r2, [r3, #12]
 800dafa:	e001      	b.n	800db00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800db0c:	7fbb      	ldrb	r3, [r7, #30]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	40007c00 	.word	0x40007c00
 800db1c:	40023800 	.word	0x40023800
 800db20:	00f42400 	.word	0x00f42400

0800db24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db30:	f003 0308 	and.w	r3, r3, #8
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00a      	beq.n	800db4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00a      	beq.n	800db70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	430a      	orrs	r2, r1
 800db6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00a      	beq.n	800db92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db96:	f003 0304 	and.w	r3, r3, #4
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb8:	f003 0310 	and.w	r3, r3, #16
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00a      	beq.n	800dbd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbda:	f003 0320 	and.w	r3, r3, #32
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00a      	beq.n	800dbf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d01a      	beq.n	800dc3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc22:	d10a      	bne.n	800dc3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	430a      	orrs	r2, r1
 800dc38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00a      	beq.n	800dc5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	430a      	orrs	r2, r1
 800dc5a:	605a      	str	r2, [r3, #4]
  }
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b098      	sub	sp, #96	@ 0x60
 800dc6c:	af02      	add	r7, sp, #8
 800dc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc78:	f7f6 fe98 	bl	80049ac <HAL_GetTick>
 800dc7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f003 0308 	and.w	r3, r3, #8
 800dc88:	2b08      	cmp	r3, #8
 800dc8a:	d12e      	bne.n	800dcea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc94:	2200      	movs	r2, #0
 800dc96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f88c 	bl	800ddb8 <UART_WaitOnFlagUntilTimeout>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d021      	beq.n	800dcea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcae:	e853 3f00 	ldrex	r3, [r3]
 800dcb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcba:	653b      	str	r3, [r7, #80]	@ 0x50
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dcca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dccc:	e841 2300 	strex	r3, r2, [r1]
 800dcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1e6      	bne.n	800dca6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2220      	movs	r2, #32
 800dcdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e062      	b.n	800ddb0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 0304 	and.w	r3, r3, #4
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d149      	bne.n	800dd8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd00:	2200      	movs	r2, #0
 800dd02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f856 	bl	800ddb8 <UART_WaitOnFlagUntilTimeout>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d03c      	beq.n	800dd8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1a:	e853 3f00 	ldrex	r3, [r3]
 800dd1e:	623b      	str	r3, [r7, #32]
   return(result);
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd30:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd38:	e841 2300 	strex	r3, r2, [r1]
 800dd3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1e6      	bne.n	800dd12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3308      	adds	r3, #8
 800dd4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	e853 3f00 	ldrex	r3, [r3]
 800dd52:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0301 	bic.w	r3, r3, #1
 800dd5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3308      	adds	r3, #8
 800dd62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd64:	61fa      	str	r2, [r7, #28]
 800dd66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	69b9      	ldr	r1, [r7, #24]
 800dd6a:	69fa      	ldr	r2, [r7, #28]
 800dd6c:	e841 2300 	strex	r3, r2, [r1]
 800dd70:	617b      	str	r3, [r7, #20]
   return(result);
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e5      	bne.n	800dd44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2220      	movs	r2, #32
 800dd7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e011      	b.n	800ddb0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2220      	movs	r2, #32
 800dd96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3758      	adds	r7, #88	@ 0x58
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	603b      	str	r3, [r7, #0]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddc8:	e04f      	b.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd0:	d04b      	beq.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddd2:	f7f6 fdeb 	bl	80049ac <HAL_GetTick>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	69ba      	ldr	r2, [r7, #24]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d302      	bcc.n	800dde8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dde8:	2303      	movs	r3, #3
 800ddea:	e04e      	b.n	800de8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f003 0304 	and.w	r3, r3, #4
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d037      	beq.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b80      	cmp	r3, #128	@ 0x80
 800ddfe:	d034      	beq.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b40      	cmp	r3, #64	@ 0x40
 800de04:	d031      	beq.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	69db      	ldr	r3, [r3, #28]
 800de0c:	f003 0308 	and.w	r3, r3, #8
 800de10:	2b08      	cmp	r3, #8
 800de12:	d110      	bne.n	800de36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2208      	movs	r2, #8
 800de1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 f838 	bl	800de92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2208      	movs	r2, #8
 800de26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	e029      	b.n	800de8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	69db      	ldr	r3, [r3, #28]
 800de3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de44:	d111      	bne.n	800de6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 f81e 	bl	800de92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2220      	movs	r2, #32
 800de5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800de66:	2303      	movs	r3, #3
 800de68:	e00f      	b.n	800de8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69da      	ldr	r2, [r3, #28]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4013      	ands	r3, r2
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	429a      	cmp	r2, r3
 800de78:	bf0c      	ite	eq
 800de7a:	2301      	moveq	r3, #1
 800de7c:	2300      	movne	r3, #0
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	461a      	mov	r2, r3
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	429a      	cmp	r2, r3
 800de86:	d0a0      	beq.n	800ddca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de92:	b480      	push	{r7}
 800de94:	b095      	sub	sp, #84	@ 0x54
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800deae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	461a      	mov	r2, r3
 800deb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800deba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800debe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e6      	bne.n	800de9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	e853 3f00 	ldrex	r3, [r3]
 800deda:	61fb      	str	r3, [r7, #28]
   return(result);
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f023 0301 	bic.w	r3, r3, #1
 800dee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3308      	adds	r3, #8
 800deea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800deec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800deee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800def2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800def4:	e841 2300 	strex	r3, r2, [r1]
 800def8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800defa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1e5      	bne.n	800decc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df04:	2b01      	cmp	r3, #1
 800df06:	d118      	bne.n	800df3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	e853 3f00 	ldrex	r3, [r3]
 800df14:	60bb      	str	r3, [r7, #8]
   return(result);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	f023 0310 	bic.w	r3, r3, #16
 800df1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df26:	61bb      	str	r3, [r7, #24]
 800df28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	6979      	ldr	r1, [r7, #20]
 800df2c:	69ba      	ldr	r2, [r7, #24]
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	613b      	str	r3, [r7, #16]
   return(result);
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e6      	bne.n	800df08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2220      	movs	r2, #32
 800df3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800df4e:	bf00      	nop
 800df50:	3754      	adds	r7, #84	@ 0x54
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d121      	bne.n	800dfb2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	4b27      	ldr	r3, [pc, #156]	@ (800e010 <FMC_SDRAM_Init+0xb4>)
 800df74:	4013      	ands	r3, r2
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	6851      	ldr	r1, [r2, #4]
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	6892      	ldr	r2, [r2, #8]
 800df7e:	4311      	orrs	r1, r2
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	68d2      	ldr	r2, [r2, #12]
 800df84:	4311      	orrs	r1, r2
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	6912      	ldr	r2, [r2, #16]
 800df8a:	4311      	orrs	r1, r2
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	6952      	ldr	r2, [r2, #20]
 800df90:	4311      	orrs	r1, r2
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	6992      	ldr	r2, [r2, #24]
 800df96:	4311      	orrs	r1, r2
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	69d2      	ldr	r2, [r2, #28]
 800df9c:	4311      	orrs	r1, r2
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	6a12      	ldr	r2, [r2, #32]
 800dfa2:	4311      	orrs	r1, r2
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dfa8:	430a      	orrs	r2, r1
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	e026      	b.n	800e000 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	69d9      	ldr	r1, [r3, #28]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	6a1b      	ldr	r3, [r3, #32]
 800dfc2:	4319      	orrs	r1, r3
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800e010 <FMC_SDRAM_Init+0xb4>)
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	6851      	ldr	r1, [r2, #4]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	6892      	ldr	r2, [r2, #8]
 800dfe0:	4311      	orrs	r1, r2
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	68d2      	ldr	r2, [r2, #12]
 800dfe6:	4311      	orrs	r1, r2
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	6912      	ldr	r2, [r2, #16]
 800dfec:	4311      	orrs	r1, r2
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	6952      	ldr	r2, [r2, #20]
 800dff2:	4311      	orrs	r1, r2
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	6992      	ldr	r2, [r2, #24]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	ffff8000 	.word	0xffff8000

0800e014 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d128      	bne.n	800e078 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	1e59      	subs	r1, r3, #1
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	3b01      	subs	r3, #1
 800e03a:	011b      	lsls	r3, r3, #4
 800e03c:	4319      	orrs	r1, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	3b01      	subs	r3, #1
 800e044:	021b      	lsls	r3, r3, #8
 800e046:	4319      	orrs	r1, r3
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	031b      	lsls	r3, r3, #12
 800e050:	4319      	orrs	r1, r3
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	3b01      	subs	r3, #1
 800e058:	041b      	lsls	r3, r3, #16
 800e05a:	4319      	orrs	r1, r3
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	3b01      	subs	r3, #1
 800e062:	051b      	lsls	r3, r3, #20
 800e064:	4319      	orrs	r1, r3
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	061b      	lsls	r3, r3, #24
 800e06e:	430b      	orrs	r3, r1
 800e070:	431a      	orrs	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	609a      	str	r2, [r3, #8]
 800e076:	e02d      	b.n	800e0d4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	689a      	ldr	r2, [r3, #8]
 800e07c:	4b19      	ldr	r3, [pc, #100]	@ (800e0e4 <FMC_SDRAM_Timing_Init+0xd0>)
 800e07e:	4013      	ands	r3, r2
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	68d2      	ldr	r2, [r2, #12]
 800e084:	3a01      	subs	r2, #1
 800e086:	0311      	lsls	r1, r2, #12
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	6952      	ldr	r2, [r2, #20]
 800e08c:	3a01      	subs	r2, #1
 800e08e:	0512      	lsls	r2, r2, #20
 800e090:	430a      	orrs	r2, r1
 800e092:	431a      	orrs	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	1e59      	subs	r1, r3, #1
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	011b      	lsls	r3, r3, #4
 800e0ae:	4319      	orrs	r1, r3
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	4319      	orrs	r1, r3
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	041b      	lsls	r3, r3, #16
 800e0c2:	4319      	orrs	r1, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	061b      	lsls	r3, r3, #24
 800e0cc:	430b      	orrs	r3, r1
 800e0ce:	431a      	orrs	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	ff0f0fff 	.word	0xff0f0fff

0800e0e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	691a      	ldr	r2, [r3, #16]
 800e0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <FMC_SDRAM_SendCommand+0x44>)
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	6811      	ldr	r1, [r2, #0]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	6852      	ldr	r2, [r2, #4]
 800e104:	4311      	orrs	r1, r2
 800e106:	68ba      	ldr	r2, [r7, #8]
 800e108:	6892      	ldr	r2, [r2, #8]
 800e10a:	3a01      	subs	r2, #1
 800e10c:	0152      	lsls	r2, r2, #5
 800e10e:	4311      	orrs	r1, r2
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	68d2      	ldr	r2, [r2, #12]
 800e114:	0252      	lsls	r2, r2, #9
 800e116:	430a      	orrs	r2, r1
 800e118:	431a      	orrs	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	ffc00000 	.word	0xffc00000

0800e130 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	695a      	ldr	r2, [r3, #20]
 800e13e:	4b07      	ldr	r3, [pc, #28]	@ (800e15c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e140:	4013      	ands	r3, r2
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	0052      	lsls	r2, r2, #1
 800e146:	431a      	orrs	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	370c      	adds	r7, #12
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	ffffc001 	.word	0xffffc001

0800e160 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e160:	b084      	sub	sp, #16
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	f107 001c 	add.w	r0, r7, #28
 800e16e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e172:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e176:	2b01      	cmp	r3, #1
 800e178:	d121      	bne.n	800e1be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	4b21      	ldr	r3, [pc, #132]	@ (800e210 <USB_CoreInit+0xb0>)
 800e18c:	4013      	ands	r3, r2
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e19e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d105      	bne.n	800e1b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 fdae 	bl	800ed14 <USB_CoreReset>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	73fb      	strb	r3, [r7, #15]
 800e1bc:	e010      	b.n	800e1e0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fda2 	bl	800ed14 <USB_CoreReset>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800e1e0:	7fbb      	ldrb	r3, [r7, #30]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d10b      	bne.n	800e1fe <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f043 0206 	orr.w	r2, r3, #6
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f043 0220 	orr.w	r2, r3, #32
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e20a:	b004      	add	sp, #16
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	ffbdffbf 	.word	0xffbdffbf

0800e214 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	4613      	mov	r3, r2
 800e220:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d165      	bne.n	800e2f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	4a41      	ldr	r2, [pc, #260]	@ (800e330 <USB_SetTurnaroundTime+0x11c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d906      	bls.n	800e23e <USB_SetTurnaroundTime+0x2a>
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	4a40      	ldr	r2, [pc, #256]	@ (800e334 <USB_SetTurnaroundTime+0x120>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d202      	bcs.n	800e23e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e238:	230f      	movs	r3, #15
 800e23a:	617b      	str	r3, [r7, #20]
 800e23c:	e062      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	4a3c      	ldr	r2, [pc, #240]	@ (800e334 <USB_SetTurnaroundTime+0x120>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d306      	bcc.n	800e254 <USB_SetTurnaroundTime+0x40>
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	4a3b      	ldr	r2, [pc, #236]	@ (800e338 <USB_SetTurnaroundTime+0x124>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d202      	bcs.n	800e254 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e24e:	230e      	movs	r3, #14
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e057      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	4a38      	ldr	r2, [pc, #224]	@ (800e338 <USB_SetTurnaroundTime+0x124>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d306      	bcc.n	800e26a <USB_SetTurnaroundTime+0x56>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	4a37      	ldr	r2, [pc, #220]	@ (800e33c <USB_SetTurnaroundTime+0x128>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d202      	bcs.n	800e26a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e264:	230d      	movs	r3, #13
 800e266:	617b      	str	r3, [r7, #20]
 800e268:	e04c      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	4a33      	ldr	r2, [pc, #204]	@ (800e33c <USB_SetTurnaroundTime+0x128>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d306      	bcc.n	800e280 <USB_SetTurnaroundTime+0x6c>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	4a32      	ldr	r2, [pc, #200]	@ (800e340 <USB_SetTurnaroundTime+0x12c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d802      	bhi.n	800e280 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e27a:	230c      	movs	r3, #12
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	e041      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	4a2f      	ldr	r2, [pc, #188]	@ (800e340 <USB_SetTurnaroundTime+0x12c>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d906      	bls.n	800e296 <USB_SetTurnaroundTime+0x82>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	4a2e      	ldr	r2, [pc, #184]	@ (800e344 <USB_SetTurnaroundTime+0x130>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d802      	bhi.n	800e296 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e290:	230b      	movs	r3, #11
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e036      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	4a2a      	ldr	r2, [pc, #168]	@ (800e344 <USB_SetTurnaroundTime+0x130>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d906      	bls.n	800e2ac <USB_SetTurnaroundTime+0x98>
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	4a29      	ldr	r2, [pc, #164]	@ (800e348 <USB_SetTurnaroundTime+0x134>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d802      	bhi.n	800e2ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e2a6:	230a      	movs	r3, #10
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	e02b      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	4a26      	ldr	r2, [pc, #152]	@ (800e348 <USB_SetTurnaroundTime+0x134>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d906      	bls.n	800e2c2 <USB_SetTurnaroundTime+0xae>
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4a25      	ldr	r2, [pc, #148]	@ (800e34c <USB_SetTurnaroundTime+0x138>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d202      	bcs.n	800e2c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e2bc:	2309      	movs	r3, #9
 800e2be:	617b      	str	r3, [r7, #20]
 800e2c0:	e020      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	4a21      	ldr	r2, [pc, #132]	@ (800e34c <USB_SetTurnaroundTime+0x138>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d306      	bcc.n	800e2d8 <USB_SetTurnaroundTime+0xc4>
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	4a20      	ldr	r2, [pc, #128]	@ (800e350 <USB_SetTurnaroundTime+0x13c>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d802      	bhi.n	800e2d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e2d2:	2308      	movs	r3, #8
 800e2d4:	617b      	str	r3, [r7, #20]
 800e2d6:	e015      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	4a1d      	ldr	r2, [pc, #116]	@ (800e350 <USB_SetTurnaroundTime+0x13c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d906      	bls.n	800e2ee <USB_SetTurnaroundTime+0xda>
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	4a1c      	ldr	r2, [pc, #112]	@ (800e354 <USB_SetTurnaroundTime+0x140>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d202      	bcs.n	800e2ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e2e8:	2307      	movs	r3, #7
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e00a      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e2ee:	2306      	movs	r3, #6
 800e2f0:	617b      	str	r3, [r7, #20]
 800e2f2:	e007      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d102      	bne.n	800e300 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e2fa:	2309      	movs	r3, #9
 800e2fc:	617b      	str	r3, [r7, #20]
 800e2fe:	e001      	b.n	800e304 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e300:	2309      	movs	r3, #9
 800e302:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	68da      	ldr	r2, [r3, #12]
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	029b      	lsls	r3, r3, #10
 800e318:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e31c:	431a      	orrs	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	371c      	adds	r7, #28
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	00d8acbf 	.word	0x00d8acbf
 800e334:	00e4e1c0 	.word	0x00e4e1c0
 800e338:	00f42400 	.word	0x00f42400
 800e33c:	01067380 	.word	0x01067380
 800e340:	011a499f 	.word	0x011a499f
 800e344:	01312cff 	.word	0x01312cff
 800e348:	014ca43f 	.word	0x014ca43f
 800e34c:	016e3600 	.word	0x016e3600
 800e350:	01a6ab1f 	.word	0x01a6ab1f
 800e354:	01e84800 	.word	0x01e84800

0800e358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	f023 0201 	bic.w	r2, r3, #1
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e386:	2300      	movs	r3, #0
 800e388:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e396:	78fb      	ldrb	r3, [r7, #3]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d115      	bne.n	800e3c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e3a8:	200a      	movs	r0, #10
 800e3aa:	f7f6 fb0b 	bl	80049c4 <HAL_Delay>
      ms += 10U;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	330a      	adds	r3, #10
 800e3b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fc1d 	bl	800ebf4 <USB_GetMode>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d01e      	beq.n	800e3fe <USB_SetCurrentMode+0x84>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800e3c4:	d9f0      	bls.n	800e3a8 <USB_SetCurrentMode+0x2e>
 800e3c6:	e01a      	b.n	800e3fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e3c8:	78fb      	ldrb	r3, [r7, #3]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d115      	bne.n	800e3fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e3da:	200a      	movs	r0, #10
 800e3dc:	f7f6 faf2 	bl	80049c4 <HAL_Delay>
      ms += 10U;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	330a      	adds	r3, #10
 800e3e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fc04 	bl	800ebf4 <USB_GetMode>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <USB_SetCurrentMode+0x84>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800e3f6:	d9f0      	bls.n	800e3da <USB_SetCurrentMode+0x60>
 800e3f8:	e001      	b.n	800e3fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e005      	b.n	800e40a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2bc8      	cmp	r3, #200	@ 0xc8
 800e402:	d101      	bne.n	800e408 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	e000      	b.n	800e40a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e414:	b084      	sub	sp, #16
 800e416:	b580      	push	{r7, lr}
 800e418:	b086      	sub	sp, #24
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e42e:	2300      	movs	r3, #0
 800e430:	613b      	str	r3, [r7, #16]
 800e432:	e009      	b.n	800e448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	3340      	adds	r3, #64	@ 0x40
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	2200      	movs	r2, #0
 800e440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	3301      	adds	r3, #1
 800e446:	613b      	str	r3, [r7, #16]
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	2b0e      	cmp	r3, #14
 800e44c:	d9f2      	bls.n	800e434 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e44e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e452:	2b00      	cmp	r3, #0
 800e454:	d11c      	bne.n	800e490 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e464:	f043 0302 	orr.w	r3, r3, #2
 800e468:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e46e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	e005      	b.n	800e49c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e494:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e4a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d10d      	bne.n	800e4cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d104      	bne.n	800e4c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f968 	bl	800e790 <USB_SetDevSpeed>
 800e4c0:	e008      	b.n	800e4d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f963 	bl	800e790 <USB_SetDevSpeed>
 800e4ca:	e003      	b.n	800e4d4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e4cc:	2103      	movs	r1, #3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 f95e 	bl	800e790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e4d4:	2110      	movs	r1, #16
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 f8fa 	bl	800e6d0 <USB_FlushTxFifo>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f924 	bl	800e734 <USB_FlushRxFifo>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	2300      	movs	r3, #0
 800e500:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e508:	461a      	mov	r2, r3
 800e50a:	2300      	movs	r3, #0
 800e50c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e514:	461a      	mov	r2, r3
 800e516:	2300      	movs	r3, #0
 800e518:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e51a:	2300      	movs	r3, #0
 800e51c:	613b      	str	r3, [r7, #16]
 800e51e:	e043      	b.n	800e5a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	015a      	lsls	r2, r3, #5
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4413      	add	r3, r2
 800e528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e536:	d118      	bne.n	800e56a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	4413      	add	r3, r2
 800e546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e54a:	461a      	mov	r2, r3
 800e54c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e550:	6013      	str	r3, [r2, #0]
 800e552:	e013      	b.n	800e57c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e560:	461a      	mov	r2, r3
 800e562:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	e008      	b.n	800e57c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	015a      	lsls	r2, r3, #5
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	4413      	add	r3, r2
 800e572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e576:	461a      	mov	r2, r3
 800e578:	2300      	movs	r3, #0
 800e57a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	4413      	add	r3, r2
 800e584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e588:	461a      	mov	r2, r3
 800e58a:	2300      	movs	r3, #0
 800e58c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	4413      	add	r3, r2
 800e596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e59a:	461a      	mov	r2, r3
 800e59c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e5a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	613b      	str	r3, [r7, #16]
 800e5a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d3b5      	bcc.n	800e520 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	613b      	str	r3, [r7, #16]
 800e5b8:	e043      	b.n	800e642 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	015a      	lsls	r2, r3, #5
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5d0:	d118      	bne.n	800e604 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10a      	bne.n	800e5ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	e013      	b.n	800e616 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	e008      	b.n	800e616 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e610:	461a      	mov	r2, r3
 800e612:	2300      	movs	r3, #0
 800e614:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e622:	461a      	mov	r2, r3
 800e624:	2300      	movs	r3, #0
 800e626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e634:	461a      	mov	r2, r3
 800e636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e63a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	3301      	adds	r3, #1
 800e640:	613b      	str	r3, [r7, #16]
 800e642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e646:	461a      	mov	r2, r3
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d3b5      	bcc.n	800e5ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e65c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e660:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e66e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e670:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e674:	2b00      	cmp	r3, #0
 800e676:	d105      	bne.n	800e684 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	f043 0210 	orr.w	r2, r3, #16
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	699a      	ldr	r2, [r3, #24]
 800e688:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c8 <USB_DevInit+0x2b4>)
 800e68a:	4313      	orrs	r3, r2
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e690:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e694:	2b00      	cmp	r3, #0
 800e696:	d005      	beq.n	800e6a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	699b      	ldr	r3, [r3, #24]
 800e69c:	f043 0208 	orr.w	r2, r3, #8
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e6a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d105      	bne.n	800e6b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	699a      	ldr	r2, [r3, #24]
 800e6b0:	4b06      	ldr	r3, [pc, #24]	@ (800e6cc <USB_DevInit+0x2b8>)
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6c4:	b004      	add	sp, #16
 800e6c6:	4770      	bx	lr
 800e6c8:	803c3800 	.word	0x803c3800
 800e6cc:	40000004 	.word	0x40000004

0800e6d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e6ea:	d901      	bls.n	800e6f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	e01b      	b.n	800e728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	daf2      	bge.n	800e6de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	019b      	lsls	r3, r3, #6
 800e700:	f043 0220 	orr.w	r2, r3, #32
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e714:	d901      	bls.n	800e71a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e716:	2303      	movs	r3, #3
 800e718:	e006      	b.n	800e728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b20      	cmp	r3, #32
 800e724:	d0f0      	beq.n	800e708 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e73c:	2300      	movs	r3, #0
 800e73e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e74c:	d901      	bls.n	800e752 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	e018      	b.n	800e784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	daf2      	bge.n	800e740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e75a:	2300      	movs	r3, #0
 800e75c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2210      	movs	r2, #16
 800e762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	3301      	adds	r3, #1
 800e768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e770:	d901      	bls.n	800e776 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	e006      	b.n	800e784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	f003 0310 	and.w	r3, r3, #16
 800e77e:	2b10      	cmp	r3, #16
 800e780:	d0f0      	beq.n	800e764 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	68f9      	ldr	r1, [r7, #12]
 800e7ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b087      	sub	sp, #28
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	f003 0306 	and.w	r3, r3, #6
 800e7da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d102      	bne.n	800e7e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	75fb      	strb	r3, [r7, #23]
 800e7e6:	e00a      	b.n	800e7fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	d002      	beq.n	800e7f4 <USB_GetDevSpeed+0x32>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b06      	cmp	r3, #6
 800e7f2:	d102      	bne.n	800e7fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	75fb      	strb	r3, [r7, #23]
 800e7f8:	e001      	b.n	800e7fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e7fa:	230f      	movs	r3, #15
 800e7fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e800:	4618      	mov	r0, r3
 800e802:	371c      	adds	r7, #28
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e816:	2300      	movs	r3, #0
 800e818:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	785b      	ldrb	r3, [r3, #1]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d14a      	bne.n	800e8c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	015a      	lsls	r2, r3, #5
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	4413      	add	r3, r2
 800e834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e83e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e842:	f040 8086 	bne.w	800e952 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	7812      	ldrb	r2, [r2, #0]
 800e85a:	0151      	lsls	r1, r2, #5
 800e85c:	693a      	ldr	r2, [r7, #16]
 800e85e:	440a      	add	r2, r1
 800e860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e864:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e868:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	7812      	ldrb	r2, [r2, #0]
 800e87e:	0151      	lsls	r1, r2, #5
 800e880:	693a      	ldr	r2, [r7, #16]
 800e882:	440a      	add	r2, r1
 800e884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e888:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e88c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	3301      	adds	r3, #1
 800e892:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d902      	bls.n	800e8a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e8a2:	e056      	b.n	800e952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	015a      	lsls	r2, r3, #5
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8bc:	d0e7      	beq.n	800e88e <USB_EPStopXfer+0x82>
 800e8be:	e048      	b.n	800e952 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	015a      	lsls	r2, r3, #5
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8d8:	d13b      	bne.n	800e952 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	7812      	ldrb	r2, [r2, #0]
 800e8ee:	0151      	lsls	r1, r2, #5
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	440a      	add	r2, r1
 800e8f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e8fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	4413      	add	r3, r2
 800e908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	7812      	ldrb	r2, [r2, #0]
 800e912:	0151      	lsls	r1, r2, #5
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	440a      	add	r2, r1
 800e918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e91c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3301      	adds	r3, #1
 800e926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e92e:	4293      	cmp	r3, r2
 800e930:	d902      	bls.n	800e938 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	75fb      	strb	r3, [r7, #23]
          break;
 800e936:	e00c      	b.n	800e952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e94c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e950:	d0e7      	beq.n	800e922 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e952:	7dfb      	ldrb	r3, [r7, #23]
}
 800e954:	4618      	mov	r0, r3
 800e956:	371c      	adds	r7, #28
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e960:	b480      	push	{r7}
 800e962:	b089      	sub	sp, #36	@ 0x24
 800e964:	af00      	add	r7, sp, #0
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	4611      	mov	r1, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	460b      	mov	r3, r1
 800e970:	71fb      	strb	r3, [r7, #7]
 800e972:	4613      	mov	r3, r2
 800e974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e97e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e982:	2b00      	cmp	r3, #0
 800e984:	d123      	bne.n	800e9ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e986:	88bb      	ldrh	r3, [r7, #4]
 800e988:	3303      	adds	r3, #3
 800e98a:	089b      	lsrs	r3, r3, #2
 800e98c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e98e:	2300      	movs	r3, #0
 800e990:	61bb      	str	r3, [r7, #24]
 800e992:	e018      	b.n	800e9c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	031a      	lsls	r2, r3, #12
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	61bb      	str	r3, [r7, #24]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d3e2      	bcc.n	800e994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3724      	adds	r7, #36	@ 0x24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b08b      	sub	sp, #44	@ 0x2c
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e9f2:	88fb      	ldrh	r3, [r7, #6]
 800e9f4:	089b      	lsrs	r3, r3, #2
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e9fa:	88fb      	ldrh	r3, [r7, #6]
 800e9fc:	f003 0303 	and.w	r3, r3, #3
 800ea00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
 800ea06:	e014      	b.n	800ea32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea12:	601a      	str	r2, [r3, #0]
    pDest++;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea16:	3301      	adds	r3, #1
 800ea18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea22:	3301      	adds	r3, #1
 800ea24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	3301      	adds	r3, #1
 800ea2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	623b      	str	r3, [r7, #32]
 800ea32:	6a3a      	ldr	r2, [r7, #32]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d3e6      	bcc.n	800ea08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ea3a:	8bfb      	ldrh	r3, [r7, #30]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d01e      	beq.n	800ea7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ea40:	2300      	movs	r3, #0
 800ea42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	f107 0310 	add.w	r3, r7, #16
 800ea50:	6812      	ldr	r2, [r2, #0]
 800ea52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ea54:	693a      	ldr	r2, [r7, #16]
 800ea56:	6a3b      	ldr	r3, [r7, #32]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea64:	701a      	strb	r2, [r3, #0]
      i++;
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	3301      	adds	r3, #1
 800ea70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ea72:	8bfb      	ldrh	r3, [r7, #30]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ea78:	8bfb      	ldrh	r3, [r7, #30]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1ea      	bne.n	800ea54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	372c      	adds	r7, #44	@ 0x2c
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eaa6:	f023 0303 	bic.w	r3, r3, #3
 800eaaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eaba:	f043 0302 	orr.w	r3, r3, #2
 800eabe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3714      	adds	r7, #20
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800eace:	b480      	push	{r7}
 800ead0:	b085      	sub	sp, #20
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	695b      	ldr	r3, [r3, #20]
 800eada:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4013      	ands	r3, r2
 800eae4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eae6:	68fb      	ldr	r3, [r7, #12]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3714      	adds	r7, #20
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb06:	699b      	ldr	r3, [r3, #24]
 800eb08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	68ba      	ldr	r2, [r7, #8]
 800eb14:	4013      	ands	r3, r2
 800eb16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	0c1b      	lsrs	r3, r3, #16
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	4013      	ands	r3, r2
 800eb4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	b29b      	uxth	r3, r3
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eb6c:	78fb      	ldrb	r3, [r7, #3]
 800eb6e:	015a      	lsls	r2, r3, #5
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb82:	695b      	ldr	r3, [r3, #20]
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	4013      	ands	r3, r2
 800eb88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ebbc:	78fb      	ldrb	r3, [r7, #3]
 800ebbe:	f003 030f 	and.w	r3, r3, #15
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc8:	01db      	lsls	r3, r3, #7
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ebd2:	78fb      	ldrb	r3, [r7, #3]
 800ebd4:	015a      	lsls	r2, r3, #5
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	4413      	add	r3, r2
 800ebda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	693a      	ldr	r2, [r7, #16]
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebe6:	68bb      	ldr	r3, [r7, #8]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	371c      	adds	r7, #28
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	695b      	ldr	r3, [r3, #20]
 800ec00:	f003 0301 	and.w	r3, r3, #1
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4b09      	ldr	r3, [pc, #36]	@ (800ec54 <USB_ActivateSetup+0x44>)
 800ec2e:	4013      	ands	r3, r2
 800ec30:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	fffff800 	.word	0xfffff800

0800ec58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b087      	sub	sp, #28
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	460b      	mov	r3, r1
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	333c      	adds	r3, #60	@ 0x3c
 800ec6e:	3304      	adds	r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	4a26      	ldr	r2, [pc, #152]	@ (800ed10 <USB_EP0_OutStart+0xb8>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d90a      	bls.n	800ec92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec8c:	d101      	bne.n	800ec92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e037      	b.n	800ed02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec98:	461a      	mov	r2, r3
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ecb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecc0:	f043 0318 	orr.w	r3, r3, #24
 800ecc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecd4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ecd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ecda:	7afb      	ldrb	r3, [r7, #11]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d10f      	bne.n	800ed00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece6:	461a      	mov	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	697a      	ldr	r2, [r7, #20]
 800ecf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecfa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ecfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed00:	2300      	movs	r3, #0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	4f54300a 	.word	0x4f54300a

0800ed14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	3301      	adds	r3, #1
 800ed24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed2c:	d901      	bls.n	800ed32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e01b      	b.n	800ed6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	daf2      	bge.n	800ed20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	f043 0201 	orr.w	r2, r3, #1
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed56:	d901      	bls.n	800ed5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	e006      	b.n	800ed6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	f003 0301 	and.w	r3, r3, #1
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d0f0      	beq.n	800ed4a <USB_CoreReset+0x36>

  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <memset>:
 800ed76:	4402      	add	r2, r0
 800ed78:	4603      	mov	r3, r0
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d100      	bne.n	800ed80 <memset+0xa>
 800ed7e:	4770      	bx	lr
 800ed80:	f803 1b01 	strb.w	r1, [r3], #1
 800ed84:	e7f9      	b.n	800ed7a <memset+0x4>
	...

0800ed88 <__libc_init_array>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	4d0d      	ldr	r5, [pc, #52]	@ (800edc0 <__libc_init_array+0x38>)
 800ed8c:	4c0d      	ldr	r4, [pc, #52]	@ (800edc4 <__libc_init_array+0x3c>)
 800ed8e:	1b64      	subs	r4, r4, r5
 800ed90:	10a4      	asrs	r4, r4, #2
 800ed92:	2600      	movs	r6, #0
 800ed94:	42a6      	cmp	r6, r4
 800ed96:	d109      	bne.n	800edac <__libc_init_array+0x24>
 800ed98:	4d0b      	ldr	r5, [pc, #44]	@ (800edc8 <__libc_init_array+0x40>)
 800ed9a:	4c0c      	ldr	r4, [pc, #48]	@ (800edcc <__libc_init_array+0x44>)
 800ed9c:	f000 f818 	bl	800edd0 <_init>
 800eda0:	1b64      	subs	r4, r4, r5
 800eda2:	10a4      	asrs	r4, r4, #2
 800eda4:	2600      	movs	r6, #0
 800eda6:	42a6      	cmp	r6, r4
 800eda8:	d105      	bne.n	800edb6 <__libc_init_array+0x2e>
 800edaa:	bd70      	pop	{r4, r5, r6, pc}
 800edac:	f855 3b04 	ldr.w	r3, [r5], #4
 800edb0:	4798      	blx	r3
 800edb2:	3601      	adds	r6, #1
 800edb4:	e7ee      	b.n	800ed94 <__libc_init_array+0xc>
 800edb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800edba:	4798      	blx	r3
 800edbc:	3601      	adds	r6, #1
 800edbe:	e7f2      	b.n	800eda6 <__libc_init_array+0x1e>
 800edc0:	08010b30 	.word	0x08010b30
 800edc4:	08010b30 	.word	0x08010b30
 800edc8:	08010b30 	.word	0x08010b30
 800edcc:	08010b34 	.word	0x08010b34

0800edd0 <_init>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	bf00      	nop
 800edd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd6:	bc08      	pop	{r3}
 800edd8:	469e      	mov	lr, r3
 800edda:	4770      	bx	lr

0800eddc <_fini>:
 800eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edde:	bf00      	nop
 800ede0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede2:	bc08      	pop	{r3}
 800ede4:	469e      	mov	lr, r3
 800ede6:	4770      	bx	lr
